// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUpepMolecularTypes(t *testing.T) {
	t.Parallel()

	query := UpepMolecularTypes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUpepMolecularTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepMolecularType.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepMolecularTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepMolecularTypes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepMolecularTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepMolecularTypeSlice{upepMolecularType}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUpepMolecularTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UpepMolecularTypeExists(tx, upepMolecularType.ID)
	if err != nil {
		t.Errorf("Unable to check if UpepMolecularType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpepMolecularTypeExistsG to return true, but got false.")
	}
}
func testUpepMolecularTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	upepMolecularTypeFound, err := FindUpepMolecularType(tx, upepMolecularType.ID)
	if err != nil {
		t.Error(err)
	}

	if upepMolecularTypeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUpepMolecularTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepMolecularTypes(tx).Bind(upepMolecularType); err != nil {
		t.Error(err)
	}
}

func testUpepMolecularTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UpepMolecularTypes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpepMolecularTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularTypeOne := &UpepMolecularType{}
	upepMolecularTypeTwo := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularTypeOne, upepMolecularTypeDBTypes, false, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}
	if err = randomize.Struct(seed, upepMolecularTypeTwo, upepMolecularTypeDBTypes, false, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularTypeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepMolecularTypeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepMolecularTypes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpepMolecularTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	upepMolecularTypeOne := &UpepMolecularType{}
	upepMolecularTypeTwo := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularTypeOne, upepMolecularTypeDBTypes, false, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}
	if err = randomize.Struct(seed, upepMolecularTypeTwo, upepMolecularTypeDBTypes, false, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularTypeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepMolecularTypeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func upepMolecularTypeBeforeInsertHook(e boil.Executor, o *UpepMolecularType) error {
	*o = UpepMolecularType{}
	return nil
}

func upepMolecularTypeAfterInsertHook(e boil.Executor, o *UpepMolecularType) error {
	*o = UpepMolecularType{}
	return nil
}

func upepMolecularTypeAfterSelectHook(e boil.Executor, o *UpepMolecularType) error {
	*o = UpepMolecularType{}
	return nil
}

func upepMolecularTypeBeforeUpdateHook(e boil.Executor, o *UpepMolecularType) error {
	*o = UpepMolecularType{}
	return nil
}

func upepMolecularTypeAfterUpdateHook(e boil.Executor, o *UpepMolecularType) error {
	*o = UpepMolecularType{}
	return nil
}

func upepMolecularTypeBeforeDeleteHook(e boil.Executor, o *UpepMolecularType) error {
	*o = UpepMolecularType{}
	return nil
}

func upepMolecularTypeAfterDeleteHook(e boil.Executor, o *UpepMolecularType) error {
	*o = UpepMolecularType{}
	return nil
}

func upepMolecularTypeBeforeUpsertHook(e boil.Executor, o *UpepMolecularType) error {
	*o = UpepMolecularType{}
	return nil
}

func upepMolecularTypeAfterUpsertHook(e boil.Executor, o *UpepMolecularType) error {
	*o = UpepMolecularType{}
	return nil
}

func testUpepMolecularTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UpepMolecularType{}
	o := &UpepMolecularType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, upepMolecularTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType object: %s", err)
	}

	AddUpepMolecularTypeHook(boil.BeforeInsertHook, upepMolecularTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	upepMolecularTypeBeforeInsertHooks = []UpepMolecularTypeHook{}

	AddUpepMolecularTypeHook(boil.AfterInsertHook, upepMolecularTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	upepMolecularTypeAfterInsertHooks = []UpepMolecularTypeHook{}

	AddUpepMolecularTypeHook(boil.AfterSelectHook, upepMolecularTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	upepMolecularTypeAfterSelectHooks = []UpepMolecularTypeHook{}

	AddUpepMolecularTypeHook(boil.BeforeUpdateHook, upepMolecularTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	upepMolecularTypeBeforeUpdateHooks = []UpepMolecularTypeHook{}

	AddUpepMolecularTypeHook(boil.AfterUpdateHook, upepMolecularTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	upepMolecularTypeAfterUpdateHooks = []UpepMolecularTypeHook{}

	AddUpepMolecularTypeHook(boil.BeforeDeleteHook, upepMolecularTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	upepMolecularTypeBeforeDeleteHooks = []UpepMolecularTypeHook{}

	AddUpepMolecularTypeHook(boil.AfterDeleteHook, upepMolecularTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	upepMolecularTypeAfterDeleteHooks = []UpepMolecularTypeHook{}

	AddUpepMolecularTypeHook(boil.BeforeUpsertHook, upepMolecularTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	upepMolecularTypeBeforeUpsertHooks = []UpepMolecularTypeHook{}

	AddUpepMolecularTypeHook(boil.AfterUpsertHook, upepMolecularTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	upepMolecularTypeAfterUpsertHooks = []UpepMolecularTypeHook{}
}
func testUpepMolecularTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepMolecularTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx, upepMolecularTypeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepMolecularTypeToManyMolecularTypeUpepRefSeqEntries(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepMolecularType
	var b, c UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)
	randomize.Struct(seed, &c, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)

	b.MolecularTypeID.Valid = true
	c.MolecularTypeID.Valid = true
	b.MolecularTypeID.Int64 = a.ID
	c.MolecularTypeID.Int64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepRefSeqEntry, err := a.MolecularTypeUpepRefSeqEntries(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepRefSeqEntry {
		if v.MolecularTypeID.Int64 == b.MolecularTypeID.Int64 {
			bFound = true
		}
		if v.MolecularTypeID.Int64 == c.MolecularTypeID.Int64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepMolecularTypeSlice{&a}
	if err = a.L.LoadMolecularTypeUpepRefSeqEntries(tx, false, (*[]*UpepMolecularType)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MolecularTypeUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MolecularTypeUpepRefSeqEntries = nil
	if err = a.L.LoadMolecularTypeUpepRefSeqEntries(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MolecularTypeUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepRefSeqEntry)
	}
}

func testUpepMolecularTypeToManyAddOpMolecularTypeUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepMolecularType
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepMolecularTypeDBTypes, false, strmangle.SetComplement(upepMolecularTypePrimaryKeyColumns, upepMolecularTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepRefSeqEntry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMolecularTypeUpepRefSeqEntries(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MolecularTypeID.Int64 {
			t.Error("foreign key was wrong value", a.ID, first.MolecularTypeID.Int64)
		}
		if a.ID != second.MolecularTypeID.Int64 {
			t.Error("foreign key was wrong value", a.ID, second.MolecularTypeID.Int64)
		}

		if first.R.MolecularType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MolecularType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MolecularTypeUpepRefSeqEntries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MolecularTypeUpepRefSeqEntries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MolecularTypeUpepRefSeqEntries(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUpepMolecularTypeToManySetOpMolecularTypeUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepMolecularType
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepMolecularTypeDBTypes, false, strmangle.SetComplement(upepMolecularTypePrimaryKeyColumns, upepMolecularTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetMolecularTypeUpepRefSeqEntries(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MolecularTypeUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMolecularTypeUpepRefSeqEntries(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MolecularTypeUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.MolecularTypeID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.MolecularTypeID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.MolecularTypeID.Int64 {
		t.Error("foreign key was wrong value", a.ID, d.MolecularTypeID.Int64)
	}
	if a.ID != e.MolecularTypeID.Int64 {
		t.Error("foreign key was wrong value", a.ID, e.MolecularTypeID.Int64)
	}

	if b.R.MolecularType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MolecularType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MolecularType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.MolecularType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MolecularTypeUpepRefSeqEntries[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MolecularTypeUpepRefSeqEntries[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUpepMolecularTypeToManyRemoveOpMolecularTypeUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepMolecularType
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepMolecularTypeDBTypes, false, strmangle.SetComplement(upepMolecularTypePrimaryKeyColumns, upepMolecularTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddMolecularTypeUpepRefSeqEntries(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MolecularTypeUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMolecularTypeUpepRefSeqEntries(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MolecularTypeUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.MolecularTypeID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.MolecularTypeID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.MolecularType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MolecularType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MolecularType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.MolecularType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MolecularTypeUpepRefSeqEntries) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MolecularTypeUpepRefSeqEntries[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MolecularTypeUpepRefSeqEntries[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUpepMolecularTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepMolecularType.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUpepMolecularTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepMolecularTypeSlice{upepMolecularType}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUpepMolecularTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepMolecularTypes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	upepMolecularTypeDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `bigint`, `Name`: `character varying`, `UpdatedAt`: `timestamp without time zone`}
	_                        = bytes.MinRead
)

func testUpepMolecularTypesUpdate(t *testing.T) {
	t.Parallel()

	if len(upepMolecularTypeColumns) == len(upepMolecularTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	if err = upepMolecularType.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUpepMolecularTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(upepMolecularTypeColumns) == len(upepMolecularTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepMolecularType := &UpepMolecularType{}
	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepMolecularType, upepMolecularTypeDBTypes, true, upepMolecularTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(upepMolecularTypeColumns, upepMolecularTypePrimaryKeyColumns) {
		fields = upepMolecularTypeColumns
	} else {
		fields = strmangle.SetComplement(
			upepMolecularTypeColumns,
			upepMolecularTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(upepMolecularType))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UpepMolecularTypeSlice{upepMolecularType}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUpepMolecularTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(upepMolecularTypeColumns) == len(upepMolecularTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	upepMolecularType := UpepMolecularType{}
	if err = randomize.Struct(seed, &upepMolecularType, upepMolecularTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepMolecularType.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepMolecularType: %s", err)
	}

	count, err := UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &upepMolecularType, upepMolecularTypeDBTypes, false, upepMolecularTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	if err = upepMolecularType.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepMolecularType: %s", err)
	}

	count, err = UpepMolecularTypes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
