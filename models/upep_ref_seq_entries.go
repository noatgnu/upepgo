// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// UpepRefSeqEntry is an object representing the database table.
type UpepRefSeqEntry struct {
	ID              int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name            null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	OrganismID      null.Int64  `boil:"organism_id" json:"organism_id,omitempty" toml:"organism_id" yaml:"organism_id,omitempty"`
	MolecularTypeID null.Int64  `boil:"molecular_type_id" json:"molecular_type_id,omitempty" toml:"molecular_type_id" yaml:"molecular_type_id,omitempty"`
	AccessionID     null.Int64  `boil:"accession_id" json:"accession_id,omitempty" toml:"accession_id" yaml:"accession_id,omitempty"`
	GiID            null.Int64  `boil:"gi_id" json:"gi_id,omitempty" toml:"gi_id" yaml:"gi_id,omitempty"`
	RefSeqDBID      null.Int64  `boil:"ref_seq_db_id" json:"ref_seq_db_id,omitempty" toml:"ref_seq_db_id" yaml:"ref_seq_db_id,omitempty"`
	RefSeqSequence  string      `boil:"ref_seq_sequence" json:"ref_seq_sequence" toml:"ref_seq_sequence" yaml:"ref_seq_sequence"`

	R *upepRefSeqEntryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L upepRefSeqEntryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpepRefSeqEntryColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	Name            string
	OrganismID      string
	MolecularTypeID string
	AccessionID     string
	GiID            string
	RefSeqDBID      string
	RefSeqSequence  string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	Name:            "name",
	OrganismID:      "organism_id",
	MolecularTypeID: "molecular_type_id",
	AccessionID:     "accession_id",
	GiID:            "gi_id",
	RefSeqDBID:      "ref_seq_db_id",
	RefSeqSequence:  "ref_seq_sequence",
}

// upepRefSeqEntryR is where relationships are stored.
type upepRefSeqEntryR struct {
	Organism                     *UpepOrganism
	MolecularType                *UpepMolecularType
	Accession                    *UpepAccession
	Gi                           *UpepGeneIdentifier
	RefSeqDB                     *UpepRefSeqDB
	RefSeqEntryUpepFeatures      UpepFeatureSlice
	RefSeqEntryUpepSorfPositions UpepSorfPositionSlice
}

// upepRefSeqEntryL is where Load methods for each relationship are stored.
type upepRefSeqEntryL struct{}

var (
	upepRefSeqEntryColumns               = []string{"id", "created_at", "updated_at", "name", "organism_id", "molecular_type_id", "accession_id", "gi_id", "ref_seq_db_id", "ref_seq_sequence"}
	upepRefSeqEntryColumnsWithoutDefault = []string{"created_at", "updated_at", "name", "organism_id", "molecular_type_id", "accession_id", "gi_id", "ref_seq_db_id", "ref_seq_sequence"}
	upepRefSeqEntryColumnsWithDefault    = []string{"id"}
	upepRefSeqEntryPrimaryKeyColumns     = []string{"id"}
)

type (
	// UpepRefSeqEntrySlice is an alias for a slice of pointers to UpepRefSeqEntry.
	// This should generally be used opposed to []UpepRefSeqEntry.
	UpepRefSeqEntrySlice []*UpepRefSeqEntry
	// UpepRefSeqEntryHook is the signature for custom UpepRefSeqEntry hook methods
	UpepRefSeqEntryHook func(boil.Executor, *UpepRefSeqEntry) error

	upepRefSeqEntryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	upepRefSeqEntryType                 = reflect.TypeOf(&UpepRefSeqEntry{})
	upepRefSeqEntryMapping              = queries.MakeStructMapping(upepRefSeqEntryType)
	upepRefSeqEntryPrimaryKeyMapping, _ = queries.BindMapping(upepRefSeqEntryType, upepRefSeqEntryMapping, upepRefSeqEntryPrimaryKeyColumns)
	upepRefSeqEntryInsertCacheMut       sync.RWMutex
	upepRefSeqEntryInsertCache          = make(map[string]insertCache)
	upepRefSeqEntryUpdateCacheMut       sync.RWMutex
	upepRefSeqEntryUpdateCache          = make(map[string]updateCache)
	upepRefSeqEntryUpsertCacheMut       sync.RWMutex
	upepRefSeqEntryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var upepRefSeqEntryBeforeInsertHooks []UpepRefSeqEntryHook
var upepRefSeqEntryBeforeUpdateHooks []UpepRefSeqEntryHook
var upepRefSeqEntryBeforeDeleteHooks []UpepRefSeqEntryHook
var upepRefSeqEntryBeforeUpsertHooks []UpepRefSeqEntryHook

var upepRefSeqEntryAfterInsertHooks []UpepRefSeqEntryHook
var upepRefSeqEntryAfterSelectHooks []UpepRefSeqEntryHook
var upepRefSeqEntryAfterUpdateHooks []UpepRefSeqEntryHook
var upepRefSeqEntryAfterDeleteHooks []UpepRefSeqEntryHook
var upepRefSeqEntryAfterUpsertHooks []UpepRefSeqEntryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UpepRefSeqEntry) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepRefSeqEntryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UpepRefSeqEntry) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepRefSeqEntryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UpepRefSeqEntry) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepRefSeqEntryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UpepRefSeqEntry) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepRefSeqEntryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UpepRefSeqEntry) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepRefSeqEntryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UpepRefSeqEntry) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range upepRefSeqEntryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UpepRefSeqEntry) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepRefSeqEntryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UpepRefSeqEntry) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepRefSeqEntryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UpepRefSeqEntry) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepRefSeqEntryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUpepRefSeqEntryHook registers your hook function for all future operations.
func AddUpepRefSeqEntryHook(hookPoint boil.HookPoint, upepRefSeqEntryHook UpepRefSeqEntryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		upepRefSeqEntryBeforeInsertHooks = append(upepRefSeqEntryBeforeInsertHooks, upepRefSeqEntryHook)
	case boil.BeforeUpdateHook:
		upepRefSeqEntryBeforeUpdateHooks = append(upepRefSeqEntryBeforeUpdateHooks, upepRefSeqEntryHook)
	case boil.BeforeDeleteHook:
		upepRefSeqEntryBeforeDeleteHooks = append(upepRefSeqEntryBeforeDeleteHooks, upepRefSeqEntryHook)
	case boil.BeforeUpsertHook:
		upepRefSeqEntryBeforeUpsertHooks = append(upepRefSeqEntryBeforeUpsertHooks, upepRefSeqEntryHook)
	case boil.AfterInsertHook:
		upepRefSeqEntryAfterInsertHooks = append(upepRefSeqEntryAfterInsertHooks, upepRefSeqEntryHook)
	case boil.AfterSelectHook:
		upepRefSeqEntryAfterSelectHooks = append(upepRefSeqEntryAfterSelectHooks, upepRefSeqEntryHook)
	case boil.AfterUpdateHook:
		upepRefSeqEntryAfterUpdateHooks = append(upepRefSeqEntryAfterUpdateHooks, upepRefSeqEntryHook)
	case boil.AfterDeleteHook:
		upepRefSeqEntryAfterDeleteHooks = append(upepRefSeqEntryAfterDeleteHooks, upepRefSeqEntryHook)
	case boil.AfterUpsertHook:
		upepRefSeqEntryAfterUpsertHooks = append(upepRefSeqEntryAfterUpsertHooks, upepRefSeqEntryHook)
	}
}

// OneP returns a single upepRefSeqEntry record from the query, and panics on error.
func (q upepRefSeqEntryQuery) OneP() *UpepRefSeqEntry {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single upepRefSeqEntry record from the query.
func (q upepRefSeqEntryQuery) One() (*UpepRefSeqEntry, error) {
	o := &UpepRefSeqEntry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upep_ref_seq_entries")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UpepRefSeqEntry records from the query, and panics on error.
func (q upepRefSeqEntryQuery) AllP() UpepRefSeqEntrySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UpepRefSeqEntry records from the query.
func (q upepRefSeqEntryQuery) All() (UpepRefSeqEntrySlice, error) {
	var o []*UpepRefSeqEntry

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UpepRefSeqEntry slice")
	}

	if len(upepRefSeqEntryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UpepRefSeqEntry records in the query, and panics on error.
func (q upepRefSeqEntryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UpepRefSeqEntry records in the query.
func (q upepRefSeqEntryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upep_ref_seq_entries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q upepRefSeqEntryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q upepRefSeqEntryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upep_ref_seq_entries exists")
	}

	return count > 0, nil
}

// OrganismG pointed to by the foreign key.
func (o *UpepRefSeqEntry) OrganismG(mods ...qm.QueryMod) upepOrganismQuery {
	return o.Organism(boil.GetDB(), mods...)
}

// Organism pointed to by the foreign key.
func (o *UpepRefSeqEntry) Organism(exec boil.Executor, mods ...qm.QueryMod) upepOrganismQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrganismID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepOrganisms(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_organisms\"")

	return query
}

// MolecularTypeG pointed to by the foreign key.
func (o *UpepRefSeqEntry) MolecularTypeG(mods ...qm.QueryMod) upepMolecularTypeQuery {
	return o.MolecularType(boil.GetDB(), mods...)
}

// MolecularType pointed to by the foreign key.
func (o *UpepRefSeqEntry) MolecularType(exec boil.Executor, mods ...qm.QueryMod) upepMolecularTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.MolecularTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepMolecularTypes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_molecular_types\"")

	return query
}

// AccessionG pointed to by the foreign key.
func (o *UpepRefSeqEntry) AccessionG(mods ...qm.QueryMod) upepAccessionQuery {
	return o.Accession(boil.GetDB(), mods...)
}

// Accession pointed to by the foreign key.
func (o *UpepRefSeqEntry) Accession(exec boil.Executor, mods ...qm.QueryMod) upepAccessionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AccessionID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepAccessions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_accessions\"")

	return query
}

// GiG pointed to by the foreign key.
func (o *UpepRefSeqEntry) GiG(mods ...qm.QueryMod) upepGeneIdentifierQuery {
	return o.Gi(boil.GetDB(), mods...)
}

// Gi pointed to by the foreign key.
func (o *UpepRefSeqEntry) Gi(exec boil.Executor, mods ...qm.QueryMod) upepGeneIdentifierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GiID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepGeneIdentifiers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_gene_identifiers\"")

	return query
}

// RefSeqDBG pointed to by the foreign key.
func (o *UpepRefSeqEntry) RefSeqDBG(mods ...qm.QueryMod) upepRefSeqDBQuery {
	return o.RefSeqDB(boil.GetDB(), mods...)
}

// RefSeqDB pointed to by the foreign key.
func (o *UpepRefSeqEntry) RefSeqDB(exec boil.Executor, mods ...qm.QueryMod) upepRefSeqDBQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RefSeqDBID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepRefSeqDBS(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_ref_seq_db\"")

	return query
}

// RefSeqEntryUpepFeaturesG retrieves all the upep_feature's upep features via ref_seq_entry_id column.
func (o *UpepRefSeqEntry) RefSeqEntryUpepFeaturesG(mods ...qm.QueryMod) upepFeatureQuery {
	return o.RefSeqEntryUpepFeatures(boil.GetDB(), mods...)
}

// RefSeqEntryUpepFeatures retrieves all the upep_feature's upep features with an executor via ref_seq_entry_id column.
func (o *UpepRefSeqEntry) RefSeqEntryUpepFeatures(exec boil.Executor, mods ...qm.QueryMod) upepFeatureQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upep\".\"upep_features\".\"ref_seq_entry_id\"=?", o.ID),
	)

	query := UpepFeatures(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_features\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"upep\".\"upep_features\".*"})
	}

	return query
}

// RefSeqEntryUpepSorfPositionsG retrieves all the upep_sorf_position's upep sorf positions via ref_seq_entry_id column.
func (o *UpepRefSeqEntry) RefSeqEntryUpepSorfPositionsG(mods ...qm.QueryMod) upepSorfPositionQuery {
	return o.RefSeqEntryUpepSorfPositions(boil.GetDB(), mods...)
}

// RefSeqEntryUpepSorfPositions retrieves all the upep_sorf_position's upep sorf positions with an executor via ref_seq_entry_id column.
func (o *UpepRefSeqEntry) RefSeqEntryUpepSorfPositions(exec boil.Executor, mods ...qm.QueryMod) upepSorfPositionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upep\".\"upep_sorf_positions\".\"ref_seq_entry_id\"=?", o.ID),
	)

	query := UpepSorfPositions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_sorf_positions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"upep\".\"upep_sorf_positions\".*"})
	}

	return query
}

// LoadOrganism allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepRefSeqEntryL) LoadOrganism(e boil.Executor, singular bool, maybeUpepRefSeqEntry interface{}) error {
	var slice []*UpepRefSeqEntry
	var object *UpepRefSeqEntry

	count := 1
	if singular {
		object = maybeUpepRefSeqEntry.(*UpepRefSeqEntry)
	} else {
		slice = *maybeUpepRefSeqEntry.(*[]*UpepRefSeqEntry)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepRefSeqEntryR{}
		}
		args[0] = object.OrganismID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepRefSeqEntryR{}
			}
			args[i] = obj.OrganismID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_organisms\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepOrganism")
	}
	defer results.Close()

	var resultSlice []*UpepOrganism
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepOrganism")
	}

	if len(upepRefSeqEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Organism = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganismID.Int64 == foreign.ID {
				local.R.Organism = foreign
				break
			}
		}
	}

	return nil
}

// LoadMolecularType allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepRefSeqEntryL) LoadMolecularType(e boil.Executor, singular bool, maybeUpepRefSeqEntry interface{}) error {
	var slice []*UpepRefSeqEntry
	var object *UpepRefSeqEntry

	count := 1
	if singular {
		object = maybeUpepRefSeqEntry.(*UpepRefSeqEntry)
	} else {
		slice = *maybeUpepRefSeqEntry.(*[]*UpepRefSeqEntry)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepRefSeqEntryR{}
		}
		args[0] = object.MolecularTypeID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepRefSeqEntryR{}
			}
			args[i] = obj.MolecularTypeID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_molecular_types\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepMolecularType")
	}
	defer results.Close()

	var resultSlice []*UpepMolecularType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepMolecularType")
	}

	if len(upepRefSeqEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.MolecularType = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MolecularTypeID.Int64 == foreign.ID {
				local.R.MolecularType = foreign
				break
			}
		}
	}

	return nil
}

// LoadAccession allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepRefSeqEntryL) LoadAccession(e boil.Executor, singular bool, maybeUpepRefSeqEntry interface{}) error {
	var slice []*UpepRefSeqEntry
	var object *UpepRefSeqEntry

	count := 1
	if singular {
		object = maybeUpepRefSeqEntry.(*UpepRefSeqEntry)
	} else {
		slice = *maybeUpepRefSeqEntry.(*[]*UpepRefSeqEntry)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepRefSeqEntryR{}
		}
		args[0] = object.AccessionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepRefSeqEntryR{}
			}
			args[i] = obj.AccessionID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_accessions\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepAccession")
	}
	defer results.Close()

	var resultSlice []*UpepAccession
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepAccession")
	}

	if len(upepRefSeqEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Accession = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccessionID.Int64 == foreign.ID {
				local.R.Accession = foreign
				break
			}
		}
	}

	return nil
}

// LoadGi allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepRefSeqEntryL) LoadGi(e boil.Executor, singular bool, maybeUpepRefSeqEntry interface{}) error {
	var slice []*UpepRefSeqEntry
	var object *UpepRefSeqEntry

	count := 1
	if singular {
		object = maybeUpepRefSeqEntry.(*UpepRefSeqEntry)
	} else {
		slice = *maybeUpepRefSeqEntry.(*[]*UpepRefSeqEntry)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepRefSeqEntryR{}
		}
		args[0] = object.GiID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepRefSeqEntryR{}
			}
			args[i] = obj.GiID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_gene_identifiers\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepGeneIdentifier")
	}
	defer results.Close()

	var resultSlice []*UpepGeneIdentifier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepGeneIdentifier")
	}

	if len(upepRefSeqEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Gi = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GiID.Int64 == foreign.ID {
				local.R.Gi = foreign
				break
			}
		}
	}

	return nil
}

// LoadRefSeqDB allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepRefSeqEntryL) LoadRefSeqDB(e boil.Executor, singular bool, maybeUpepRefSeqEntry interface{}) error {
	var slice []*UpepRefSeqEntry
	var object *UpepRefSeqEntry

	count := 1
	if singular {
		object = maybeUpepRefSeqEntry.(*UpepRefSeqEntry)
	} else {
		slice = *maybeUpepRefSeqEntry.(*[]*UpepRefSeqEntry)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepRefSeqEntryR{}
		}
		args[0] = object.RefSeqDBID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepRefSeqEntryR{}
			}
			args[i] = obj.RefSeqDBID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_ref_seq_db\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepRefSeqDB")
	}
	defer results.Close()

	var resultSlice []*UpepRefSeqDB
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepRefSeqDB")
	}

	if len(upepRefSeqEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.RefSeqDB = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RefSeqDBID.Int64 == foreign.ID {
				local.R.RefSeqDB = foreign
				break
			}
		}
	}

	return nil
}

// LoadRefSeqEntryUpepFeatures allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepRefSeqEntryL) LoadRefSeqEntryUpepFeatures(e boil.Executor, singular bool, maybeUpepRefSeqEntry interface{}) error {
	var slice []*UpepRefSeqEntry
	var object *UpepRefSeqEntry

	count := 1
	if singular {
		object = maybeUpepRefSeqEntry.(*UpepRefSeqEntry)
	} else {
		slice = *maybeUpepRefSeqEntry.(*[]*UpepRefSeqEntry)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepRefSeqEntryR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepRefSeqEntryR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_features\" where \"ref_seq_entry_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upep_features")
	}
	defer results.Close()

	var resultSlice []*UpepFeature
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upep_features")
	}

	if len(upepFeatureAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RefSeqEntryUpepFeatures = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RefSeqEntryID {
				local.R.RefSeqEntryUpepFeatures = append(local.R.RefSeqEntryUpepFeatures, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRefSeqEntryUpepSorfPositions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepRefSeqEntryL) LoadRefSeqEntryUpepSorfPositions(e boil.Executor, singular bool, maybeUpepRefSeqEntry interface{}) error {
	var slice []*UpepRefSeqEntry
	var object *UpepRefSeqEntry

	count := 1
	if singular {
		object = maybeUpepRefSeqEntry.(*UpepRefSeqEntry)
	} else {
		slice = *maybeUpepRefSeqEntry.(*[]*UpepRefSeqEntry)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepRefSeqEntryR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepRefSeqEntryR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_sorf_positions\" where \"ref_seq_entry_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upep_sorf_positions")
	}
	defer results.Close()

	var resultSlice []*UpepSorfPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upep_sorf_positions")
	}

	if len(upepSorfPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RefSeqEntryUpepSorfPositions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RefSeqEntryID {
				local.R.RefSeqEntryUpepSorfPositions = append(local.R.RefSeqEntryUpepSorfPositions, foreign)
				break
			}
		}
	}

	return nil
}

// SetOrganismG of the upep_ref_seq_entry to the related item.
// Sets o.R.Organism to related.
// Adds o to related.R.OrganismUpepRefSeqEntries.
// Uses the global database handle.
func (o *UpepRefSeqEntry) SetOrganismG(insert bool, related *UpepOrganism) error {
	return o.SetOrganism(boil.GetDB(), insert, related)
}

// SetOrganismP of the upep_ref_seq_entry to the related item.
// Sets o.R.Organism to related.
// Adds o to related.R.OrganismUpepRefSeqEntries.
// Panics on error.
func (o *UpepRefSeqEntry) SetOrganismP(exec boil.Executor, insert bool, related *UpepOrganism) {
	if err := o.SetOrganism(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrganismGP of the upep_ref_seq_entry to the related item.
// Sets o.R.Organism to related.
// Adds o to related.R.OrganismUpepRefSeqEntries.
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) SetOrganismGP(insert bool, related *UpepOrganism) {
	if err := o.SetOrganism(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrganism of the upep_ref_seq_entry to the related item.
// Sets o.R.Organism to related.
// Adds o to related.R.OrganismUpepRefSeqEntries.
func (o *UpepRefSeqEntry) SetOrganism(exec boil.Executor, insert bool, related *UpepOrganism) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organism_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepRefSeqEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganismID.Int64 = related.ID
	o.OrganismID.Valid = true

	if o.R == nil {
		o.R = &upepRefSeqEntryR{
			Organism: related,
		}
	} else {
		o.R.Organism = related
	}

	if related.R == nil {
		related.R = &upepOrganismR{
			OrganismUpepRefSeqEntries: UpepRefSeqEntrySlice{o},
		}
	} else {
		related.R.OrganismUpepRefSeqEntries = append(related.R.OrganismUpepRefSeqEntries, o)
	}

	return nil
}

// RemoveOrganismG relationship.
// Sets o.R.Organism to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *UpepRefSeqEntry) RemoveOrganismG(related *UpepOrganism) error {
	return o.RemoveOrganism(boil.GetDB(), related)
}

// RemoveOrganismP relationship.
// Sets o.R.Organism to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *UpepRefSeqEntry) RemoveOrganismP(exec boil.Executor, related *UpepOrganism) {
	if err := o.RemoveOrganism(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOrganismGP relationship.
// Sets o.R.Organism to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) RemoveOrganismGP(related *UpepOrganism) {
	if err := o.RemoveOrganism(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOrganism relationship.
// Sets o.R.Organism to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UpepRefSeqEntry) RemoveOrganism(exec boil.Executor, related *UpepOrganism) error {
	var err error

	o.OrganismID.Valid = false
	if err = o.Update(exec, "organism_id"); err != nil {
		o.OrganismID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Organism = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrganismUpepRefSeqEntries {
		if o.OrganismID.Int64 != ri.OrganismID.Int64 {
			continue
		}

		ln := len(related.R.OrganismUpepRefSeqEntries)
		if ln > 1 && i < ln-1 {
			related.R.OrganismUpepRefSeqEntries[i] = related.R.OrganismUpepRefSeqEntries[ln-1]
		}
		related.R.OrganismUpepRefSeqEntries = related.R.OrganismUpepRefSeqEntries[:ln-1]
		break
	}
	return nil
}

// SetMolecularTypeG of the upep_ref_seq_entry to the related item.
// Sets o.R.MolecularType to related.
// Adds o to related.R.MolecularTypeUpepRefSeqEntries.
// Uses the global database handle.
func (o *UpepRefSeqEntry) SetMolecularTypeG(insert bool, related *UpepMolecularType) error {
	return o.SetMolecularType(boil.GetDB(), insert, related)
}

// SetMolecularTypeP of the upep_ref_seq_entry to the related item.
// Sets o.R.MolecularType to related.
// Adds o to related.R.MolecularTypeUpepRefSeqEntries.
// Panics on error.
func (o *UpepRefSeqEntry) SetMolecularTypeP(exec boil.Executor, insert bool, related *UpepMolecularType) {
	if err := o.SetMolecularType(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMolecularTypeGP of the upep_ref_seq_entry to the related item.
// Sets o.R.MolecularType to related.
// Adds o to related.R.MolecularTypeUpepRefSeqEntries.
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) SetMolecularTypeGP(insert bool, related *UpepMolecularType) {
	if err := o.SetMolecularType(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMolecularType of the upep_ref_seq_entry to the related item.
// Sets o.R.MolecularType to related.
// Adds o to related.R.MolecularTypeUpepRefSeqEntries.
func (o *UpepRefSeqEntry) SetMolecularType(exec boil.Executor, insert bool, related *UpepMolecularType) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"molecular_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepRefSeqEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MolecularTypeID.Int64 = related.ID
	o.MolecularTypeID.Valid = true

	if o.R == nil {
		o.R = &upepRefSeqEntryR{
			MolecularType: related,
		}
	} else {
		o.R.MolecularType = related
	}

	if related.R == nil {
		related.R = &upepMolecularTypeR{
			MolecularTypeUpepRefSeqEntries: UpepRefSeqEntrySlice{o},
		}
	} else {
		related.R.MolecularTypeUpepRefSeqEntries = append(related.R.MolecularTypeUpepRefSeqEntries, o)
	}

	return nil
}

// RemoveMolecularTypeG relationship.
// Sets o.R.MolecularType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *UpepRefSeqEntry) RemoveMolecularTypeG(related *UpepMolecularType) error {
	return o.RemoveMolecularType(boil.GetDB(), related)
}

// RemoveMolecularTypeP relationship.
// Sets o.R.MolecularType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *UpepRefSeqEntry) RemoveMolecularTypeP(exec boil.Executor, related *UpepMolecularType) {
	if err := o.RemoveMolecularType(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMolecularTypeGP relationship.
// Sets o.R.MolecularType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) RemoveMolecularTypeGP(related *UpepMolecularType) {
	if err := o.RemoveMolecularType(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMolecularType relationship.
// Sets o.R.MolecularType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UpepRefSeqEntry) RemoveMolecularType(exec boil.Executor, related *UpepMolecularType) error {
	var err error

	o.MolecularTypeID.Valid = false
	if err = o.Update(exec, "molecular_type_id"); err != nil {
		o.MolecularTypeID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.MolecularType = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MolecularTypeUpepRefSeqEntries {
		if o.MolecularTypeID.Int64 != ri.MolecularTypeID.Int64 {
			continue
		}

		ln := len(related.R.MolecularTypeUpepRefSeqEntries)
		if ln > 1 && i < ln-1 {
			related.R.MolecularTypeUpepRefSeqEntries[i] = related.R.MolecularTypeUpepRefSeqEntries[ln-1]
		}
		related.R.MolecularTypeUpepRefSeqEntries = related.R.MolecularTypeUpepRefSeqEntries[:ln-1]
		break
	}
	return nil
}

// SetAccessionG of the upep_ref_seq_entry to the related item.
// Sets o.R.Accession to related.
// Adds o to related.R.AccessionUpepRefSeqEntries.
// Uses the global database handle.
func (o *UpepRefSeqEntry) SetAccessionG(insert bool, related *UpepAccession) error {
	return o.SetAccession(boil.GetDB(), insert, related)
}

// SetAccessionP of the upep_ref_seq_entry to the related item.
// Sets o.R.Accession to related.
// Adds o to related.R.AccessionUpepRefSeqEntries.
// Panics on error.
func (o *UpepRefSeqEntry) SetAccessionP(exec boil.Executor, insert bool, related *UpepAccession) {
	if err := o.SetAccession(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAccessionGP of the upep_ref_seq_entry to the related item.
// Sets o.R.Accession to related.
// Adds o to related.R.AccessionUpepRefSeqEntries.
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) SetAccessionGP(insert bool, related *UpepAccession) {
	if err := o.SetAccession(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAccession of the upep_ref_seq_entry to the related item.
// Sets o.R.Accession to related.
// Adds o to related.R.AccessionUpepRefSeqEntries.
func (o *UpepRefSeqEntry) SetAccession(exec boil.Executor, insert bool, related *UpepAccession) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"accession_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepRefSeqEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccessionID.Int64 = related.ID
	o.AccessionID.Valid = true

	if o.R == nil {
		o.R = &upepRefSeqEntryR{
			Accession: related,
		}
	} else {
		o.R.Accession = related
	}

	if related.R == nil {
		related.R = &upepAccessionR{
			AccessionUpepRefSeqEntries: UpepRefSeqEntrySlice{o},
		}
	} else {
		related.R.AccessionUpepRefSeqEntries = append(related.R.AccessionUpepRefSeqEntries, o)
	}

	return nil
}

// RemoveAccessionG relationship.
// Sets o.R.Accession to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *UpepRefSeqEntry) RemoveAccessionG(related *UpepAccession) error {
	return o.RemoveAccession(boil.GetDB(), related)
}

// RemoveAccessionP relationship.
// Sets o.R.Accession to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *UpepRefSeqEntry) RemoveAccessionP(exec boil.Executor, related *UpepAccession) {
	if err := o.RemoveAccession(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAccessionGP relationship.
// Sets o.R.Accession to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) RemoveAccessionGP(related *UpepAccession) {
	if err := o.RemoveAccession(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAccession relationship.
// Sets o.R.Accession to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UpepRefSeqEntry) RemoveAccession(exec boil.Executor, related *UpepAccession) error {
	var err error

	o.AccessionID.Valid = false
	if err = o.Update(exec, "accession_id"); err != nil {
		o.AccessionID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Accession = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AccessionUpepRefSeqEntries {
		if o.AccessionID.Int64 != ri.AccessionID.Int64 {
			continue
		}

		ln := len(related.R.AccessionUpepRefSeqEntries)
		if ln > 1 && i < ln-1 {
			related.R.AccessionUpepRefSeqEntries[i] = related.R.AccessionUpepRefSeqEntries[ln-1]
		}
		related.R.AccessionUpepRefSeqEntries = related.R.AccessionUpepRefSeqEntries[:ln-1]
		break
	}
	return nil
}

// SetGiG of the upep_ref_seq_entry to the related item.
// Sets o.R.Gi to related.
// Adds o to related.R.GiUpepRefSeqEntries.
// Uses the global database handle.
func (o *UpepRefSeqEntry) SetGiG(insert bool, related *UpepGeneIdentifier) error {
	return o.SetGi(boil.GetDB(), insert, related)
}

// SetGiP of the upep_ref_seq_entry to the related item.
// Sets o.R.Gi to related.
// Adds o to related.R.GiUpepRefSeqEntries.
// Panics on error.
func (o *UpepRefSeqEntry) SetGiP(exec boil.Executor, insert bool, related *UpepGeneIdentifier) {
	if err := o.SetGi(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGiGP of the upep_ref_seq_entry to the related item.
// Sets o.R.Gi to related.
// Adds o to related.R.GiUpepRefSeqEntries.
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) SetGiGP(insert bool, related *UpepGeneIdentifier) {
	if err := o.SetGi(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGi of the upep_ref_seq_entry to the related item.
// Sets o.R.Gi to related.
// Adds o to related.R.GiUpepRefSeqEntries.
func (o *UpepRefSeqEntry) SetGi(exec boil.Executor, insert bool, related *UpepGeneIdentifier) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"gi_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepRefSeqEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GiID.Int64 = related.ID
	o.GiID.Valid = true

	if o.R == nil {
		o.R = &upepRefSeqEntryR{
			Gi: related,
		}
	} else {
		o.R.Gi = related
	}

	if related.R == nil {
		related.R = &upepGeneIdentifierR{
			GiUpepRefSeqEntries: UpepRefSeqEntrySlice{o},
		}
	} else {
		related.R.GiUpepRefSeqEntries = append(related.R.GiUpepRefSeqEntries, o)
	}

	return nil
}

// RemoveGiG relationship.
// Sets o.R.Gi to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *UpepRefSeqEntry) RemoveGiG(related *UpepGeneIdentifier) error {
	return o.RemoveGi(boil.GetDB(), related)
}

// RemoveGiP relationship.
// Sets o.R.Gi to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *UpepRefSeqEntry) RemoveGiP(exec boil.Executor, related *UpepGeneIdentifier) {
	if err := o.RemoveGi(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveGiGP relationship.
// Sets o.R.Gi to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) RemoveGiGP(related *UpepGeneIdentifier) {
	if err := o.RemoveGi(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveGi relationship.
// Sets o.R.Gi to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UpepRefSeqEntry) RemoveGi(exec boil.Executor, related *UpepGeneIdentifier) error {
	var err error

	o.GiID.Valid = false
	if err = o.Update(exec, "gi_id"); err != nil {
		o.GiID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Gi = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GiUpepRefSeqEntries {
		if o.GiID.Int64 != ri.GiID.Int64 {
			continue
		}

		ln := len(related.R.GiUpepRefSeqEntries)
		if ln > 1 && i < ln-1 {
			related.R.GiUpepRefSeqEntries[i] = related.R.GiUpepRefSeqEntries[ln-1]
		}
		related.R.GiUpepRefSeqEntries = related.R.GiUpepRefSeqEntries[:ln-1]
		break
	}
	return nil
}

// SetRefSeqDBG of the upep_ref_seq_entry to the related item.
// Sets o.R.RefSeqDB to related.
// Adds o to related.R.RefSeqDBUpepRefSeqEntries.
// Uses the global database handle.
func (o *UpepRefSeqEntry) SetRefSeqDBG(insert bool, related *UpepRefSeqDB) error {
	return o.SetRefSeqDB(boil.GetDB(), insert, related)
}

// SetRefSeqDBP of the upep_ref_seq_entry to the related item.
// Sets o.R.RefSeqDB to related.
// Adds o to related.R.RefSeqDBUpepRefSeqEntries.
// Panics on error.
func (o *UpepRefSeqEntry) SetRefSeqDBP(exec boil.Executor, insert bool, related *UpepRefSeqDB) {
	if err := o.SetRefSeqDB(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRefSeqDBGP of the upep_ref_seq_entry to the related item.
// Sets o.R.RefSeqDB to related.
// Adds o to related.R.RefSeqDBUpepRefSeqEntries.
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) SetRefSeqDBGP(insert bool, related *UpepRefSeqDB) {
	if err := o.SetRefSeqDB(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRefSeqDB of the upep_ref_seq_entry to the related item.
// Sets o.R.RefSeqDB to related.
// Adds o to related.R.RefSeqDBUpepRefSeqEntries.
func (o *UpepRefSeqEntry) SetRefSeqDB(exec boil.Executor, insert bool, related *UpepRefSeqDB) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ref_seq_db_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepRefSeqEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RefSeqDBID.Int64 = related.ID
	o.RefSeqDBID.Valid = true

	if o.R == nil {
		o.R = &upepRefSeqEntryR{
			RefSeqDB: related,
		}
	} else {
		o.R.RefSeqDB = related
	}

	if related.R == nil {
		related.R = &upepRefSeqDBR{
			RefSeqDBUpepRefSeqEntries: UpepRefSeqEntrySlice{o},
		}
	} else {
		related.R.RefSeqDBUpepRefSeqEntries = append(related.R.RefSeqDBUpepRefSeqEntries, o)
	}

	return nil
}

// RemoveRefSeqDBG relationship.
// Sets o.R.RefSeqDB to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *UpepRefSeqEntry) RemoveRefSeqDBG(related *UpepRefSeqDB) error {
	return o.RemoveRefSeqDB(boil.GetDB(), related)
}

// RemoveRefSeqDBP relationship.
// Sets o.R.RefSeqDB to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *UpepRefSeqEntry) RemoveRefSeqDBP(exec boil.Executor, related *UpepRefSeqDB) {
	if err := o.RemoveRefSeqDB(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRefSeqDBGP relationship.
// Sets o.R.RefSeqDB to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) RemoveRefSeqDBGP(related *UpepRefSeqDB) {
	if err := o.RemoveRefSeqDB(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRefSeqDB relationship.
// Sets o.R.RefSeqDB to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UpepRefSeqEntry) RemoveRefSeqDB(exec boil.Executor, related *UpepRefSeqDB) error {
	var err error

	o.RefSeqDBID.Valid = false
	if err = o.Update(exec, "ref_seq_db_id"); err != nil {
		o.RefSeqDBID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.RefSeqDB = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RefSeqDBUpepRefSeqEntries {
		if o.RefSeqDBID.Int64 != ri.RefSeqDBID.Int64 {
			continue
		}

		ln := len(related.R.RefSeqDBUpepRefSeqEntries)
		if ln > 1 && i < ln-1 {
			related.R.RefSeqDBUpepRefSeqEntries[i] = related.R.RefSeqDBUpepRefSeqEntries[ln-1]
		}
		related.R.RefSeqDBUpepRefSeqEntries = related.R.RefSeqDBUpepRefSeqEntries[:ln-1]
		break
	}
	return nil
}

// AddRefSeqEntryUpepFeaturesG adds the given related objects to the existing relationships
// of the upep_ref_seq_entry, optionally inserting them as new records.
// Appends related to o.R.RefSeqEntryUpepFeatures.
// Sets related.R.RefSeqEntry appropriately.
// Uses the global database handle.
func (o *UpepRefSeqEntry) AddRefSeqEntryUpepFeaturesG(insert bool, related ...*UpepFeature) error {
	return o.AddRefSeqEntryUpepFeatures(boil.GetDB(), insert, related...)
}

// AddRefSeqEntryUpepFeaturesP adds the given related objects to the existing relationships
// of the upep_ref_seq_entry, optionally inserting them as new records.
// Appends related to o.R.RefSeqEntryUpepFeatures.
// Sets related.R.RefSeqEntry appropriately.
// Panics on error.
func (o *UpepRefSeqEntry) AddRefSeqEntryUpepFeaturesP(exec boil.Executor, insert bool, related ...*UpepFeature) {
	if err := o.AddRefSeqEntryUpepFeatures(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRefSeqEntryUpepFeaturesGP adds the given related objects to the existing relationships
// of the upep_ref_seq_entry, optionally inserting them as new records.
// Appends related to o.R.RefSeqEntryUpepFeatures.
// Sets related.R.RefSeqEntry appropriately.
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) AddRefSeqEntryUpepFeaturesGP(insert bool, related ...*UpepFeature) {
	if err := o.AddRefSeqEntryUpepFeatures(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRefSeqEntryUpepFeatures adds the given related objects to the existing relationships
// of the upep_ref_seq_entry, optionally inserting them as new records.
// Appends related to o.R.RefSeqEntryUpepFeatures.
// Sets related.R.RefSeqEntry appropriately.
func (o *UpepRefSeqEntry) AddRefSeqEntryUpepFeatures(exec boil.Executor, insert bool, related ...*UpepFeature) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RefSeqEntryID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upep\".\"upep_features\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ref_seq_entry_id"}),
				strmangle.WhereClause("\"", "\"", 2, upepFeaturePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RefSeqEntryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &upepRefSeqEntryR{
			RefSeqEntryUpepFeatures: related,
		}
	} else {
		o.R.RefSeqEntryUpepFeatures = append(o.R.RefSeqEntryUpepFeatures, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &upepFeatureR{
				RefSeqEntry: o,
			}
		} else {
			rel.R.RefSeqEntry = o
		}
	}
	return nil
}

// AddRefSeqEntryUpepSorfPositionsG adds the given related objects to the existing relationships
// of the upep_ref_seq_entry, optionally inserting them as new records.
// Appends related to o.R.RefSeqEntryUpepSorfPositions.
// Sets related.R.RefSeqEntry appropriately.
// Uses the global database handle.
func (o *UpepRefSeqEntry) AddRefSeqEntryUpepSorfPositionsG(insert bool, related ...*UpepSorfPosition) error {
	return o.AddRefSeqEntryUpepSorfPositions(boil.GetDB(), insert, related...)
}

// AddRefSeqEntryUpepSorfPositionsP adds the given related objects to the existing relationships
// of the upep_ref_seq_entry, optionally inserting them as new records.
// Appends related to o.R.RefSeqEntryUpepSorfPositions.
// Sets related.R.RefSeqEntry appropriately.
// Panics on error.
func (o *UpepRefSeqEntry) AddRefSeqEntryUpepSorfPositionsP(exec boil.Executor, insert bool, related ...*UpepSorfPosition) {
	if err := o.AddRefSeqEntryUpepSorfPositions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRefSeqEntryUpepSorfPositionsGP adds the given related objects to the existing relationships
// of the upep_ref_seq_entry, optionally inserting them as new records.
// Appends related to o.R.RefSeqEntryUpepSorfPositions.
// Sets related.R.RefSeqEntry appropriately.
// Uses the global database handle and panics on error.
func (o *UpepRefSeqEntry) AddRefSeqEntryUpepSorfPositionsGP(insert bool, related ...*UpepSorfPosition) {
	if err := o.AddRefSeqEntryUpepSorfPositions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRefSeqEntryUpepSorfPositions adds the given related objects to the existing relationships
// of the upep_ref_seq_entry, optionally inserting them as new records.
// Appends related to o.R.RefSeqEntryUpepSorfPositions.
// Sets related.R.RefSeqEntry appropriately.
func (o *UpepRefSeqEntry) AddRefSeqEntryUpepSorfPositions(exec boil.Executor, insert bool, related ...*UpepSorfPosition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RefSeqEntryID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upep\".\"upep_sorf_positions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ref_seq_entry_id"}),
				strmangle.WhereClause("\"", "\"", 2, upepSorfPositionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RefSeqEntryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &upepRefSeqEntryR{
			RefSeqEntryUpepSorfPositions: related,
		}
	} else {
		o.R.RefSeqEntryUpepSorfPositions = append(o.R.RefSeqEntryUpepSorfPositions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &upepSorfPositionR{
				RefSeqEntry: o,
			}
		} else {
			rel.R.RefSeqEntry = o
		}
	}
	return nil
}

// UpepRefSeqEntriesG retrieves all records.
func UpepRefSeqEntriesG(mods ...qm.QueryMod) upepRefSeqEntryQuery {
	return UpepRefSeqEntries(boil.GetDB(), mods...)
}

// UpepRefSeqEntries retrieves all the records using an executor.
func UpepRefSeqEntries(exec boil.Executor, mods ...qm.QueryMod) upepRefSeqEntryQuery {
	mods = append(mods, qm.From("\"upep\".\"upep_ref_seq_entries\""))
	return upepRefSeqEntryQuery{NewQuery(exec, mods...)}
}

// FindUpepRefSeqEntryG retrieves a single record by ID.
func FindUpepRefSeqEntryG(id int64, selectCols ...string) (*UpepRefSeqEntry, error) {
	return FindUpepRefSeqEntry(boil.GetDB(), id, selectCols...)
}

// FindUpepRefSeqEntryGP retrieves a single record by ID, and panics on error.
func FindUpepRefSeqEntryGP(id int64, selectCols ...string) *UpepRefSeqEntry {
	retobj, err := FindUpepRefSeqEntry(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUpepRefSeqEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpepRefSeqEntry(exec boil.Executor, id int64, selectCols ...string) (*UpepRefSeqEntry, error) {
	upepRefSeqEntryObj := &UpepRefSeqEntry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upep\".\"upep_ref_seq_entries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(upepRefSeqEntryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upep_ref_seq_entries")
	}

	return upepRefSeqEntryObj, nil
}

// FindUpepRefSeqEntryP retrieves a single record by ID with an executor, and panics on error.
func FindUpepRefSeqEntryP(exec boil.Executor, id int64, selectCols ...string) *UpepRefSeqEntry {
	retobj, err := FindUpepRefSeqEntry(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UpepRefSeqEntry) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UpepRefSeqEntry) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UpepRefSeqEntry) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UpepRefSeqEntry) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_ref_seq_entries provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepRefSeqEntryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	upepRefSeqEntryInsertCacheMut.RLock()
	cache, cached := upepRefSeqEntryInsertCache[key]
	upepRefSeqEntryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			upepRefSeqEntryColumns,
			upepRefSeqEntryColumnsWithDefault,
			upepRefSeqEntryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(upepRefSeqEntryType, upepRefSeqEntryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(upepRefSeqEntryType, upepRefSeqEntryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upep\".\"upep_ref_seq_entries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upep\".\"upep_ref_seq_entries\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upep_ref_seq_entries")
	}

	if !cached {
		upepRefSeqEntryInsertCacheMut.Lock()
		upepRefSeqEntryInsertCache[key] = cache
		upepRefSeqEntryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UpepRefSeqEntry record. See Update for
// whitelist behavior description.
func (o *UpepRefSeqEntry) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UpepRefSeqEntry record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UpepRefSeqEntry) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UpepRefSeqEntry, and panics on error.
// See Update for whitelist behavior description.
func (o *UpepRefSeqEntry) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UpepRefSeqEntry.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UpepRefSeqEntry) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	upepRefSeqEntryUpdateCacheMut.RLock()
	cache, cached := upepRefSeqEntryUpdateCache[key]
	upepRefSeqEntryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			upepRefSeqEntryColumns,
			upepRefSeqEntryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update upep_ref_seq_entries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, upepRefSeqEntryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(upepRefSeqEntryType, upepRefSeqEntryMapping, append(wl, upepRefSeqEntryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update upep_ref_seq_entries row")
	}

	if !cached {
		upepRefSeqEntryUpdateCacheMut.Lock()
		upepRefSeqEntryUpdateCache[key] = cache
		upepRefSeqEntryUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q upepRefSeqEntryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q upepRefSeqEntryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for upep_ref_seq_entries")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UpepRefSeqEntrySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UpepRefSeqEntrySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UpepRefSeqEntrySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpepRefSeqEntrySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepRefSeqEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, upepRefSeqEntryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in upepRefSeqEntry slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UpepRefSeqEntry) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UpepRefSeqEntry) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UpepRefSeqEntry) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UpepRefSeqEntry) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_ref_seq_entries provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepRefSeqEntryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	upepRefSeqEntryUpsertCacheMut.RLock()
	cache, cached := upepRefSeqEntryUpsertCache[key]
	upepRefSeqEntryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			upepRefSeqEntryColumns,
			upepRefSeqEntryColumnsWithDefault,
			upepRefSeqEntryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			upepRefSeqEntryColumns,
			upepRefSeqEntryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert upep_ref_seq_entries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(upepRefSeqEntryPrimaryKeyColumns))
			copy(conflict, upepRefSeqEntryPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"upep\".\"upep_ref_seq_entries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(upepRefSeqEntryType, upepRefSeqEntryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(upepRefSeqEntryType, upepRefSeqEntryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upep_ref_seq_entries")
	}

	if !cached {
		upepRefSeqEntryUpsertCacheMut.Lock()
		upepRefSeqEntryUpsertCache[key] = cache
		upepRefSeqEntryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UpepRefSeqEntry record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepRefSeqEntry) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UpepRefSeqEntry record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UpepRefSeqEntry) DeleteG() error {
	if o == nil {
		return errors.New("models: no UpepRefSeqEntry provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UpepRefSeqEntry record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepRefSeqEntry) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UpepRefSeqEntry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UpepRefSeqEntry) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepRefSeqEntry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), upepRefSeqEntryPrimaryKeyMapping)
	sql := "DELETE FROM \"upep\".\"upep_ref_seq_entries\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from upep_ref_seq_entries")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q upepRefSeqEntryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q upepRefSeqEntryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no upepRefSeqEntryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upep_ref_seq_entries")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UpepRefSeqEntrySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UpepRefSeqEntrySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UpepRefSeqEntry slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UpepRefSeqEntrySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpepRefSeqEntrySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepRefSeqEntry slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(upepRefSeqEntryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepRefSeqEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upep\".\"upep_ref_seq_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepRefSeqEntryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upepRefSeqEntry slice")
	}

	if len(upepRefSeqEntryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UpepRefSeqEntry) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UpepRefSeqEntry) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UpepRefSeqEntry) ReloadG() error {
	if o == nil {
		return errors.New("models: no UpepRefSeqEntry provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UpepRefSeqEntry) Reload(exec boil.Executor) error {
	ret, err := FindUpepRefSeqEntry(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepRefSeqEntrySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepRefSeqEntrySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepRefSeqEntrySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UpepRefSeqEntrySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepRefSeqEntrySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	upepRefSeqEntries := UpepRefSeqEntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepRefSeqEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upep\".\"upep_ref_seq_entries\".* FROM \"upep\".\"upep_ref_seq_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepRefSeqEntryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&upepRefSeqEntries)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UpepRefSeqEntrySlice")
	}

	*o = upepRefSeqEntries

	return nil
}

// UpepRefSeqEntryExists checks if the UpepRefSeqEntry row exists.
func UpepRefSeqEntryExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upep\".\"upep_ref_seq_entries\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upep_ref_seq_entries exists")
	}

	return exists, nil
}

// UpepRefSeqEntryExistsG checks if the UpepRefSeqEntry row exists.
func UpepRefSeqEntryExistsG(id int64) (bool, error) {
	return UpepRefSeqEntryExists(boil.GetDB(), id)
}

// UpepRefSeqEntryExistsGP checks if the UpepRefSeqEntry row exists. Panics on error.
func UpepRefSeqEntryExistsGP(id int64) bool {
	e, err := UpepRefSeqEntryExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UpepRefSeqEntryExistsP checks if the UpepRefSeqEntry row exists. Panics on error.
func UpepRefSeqEntryExistsP(exec boil.Executor, id int64) bool {
	e, err := UpepRefSeqEntryExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
