// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// UpepAccession is an object representing the database table.
type UpepAccession struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Accession string    `boil:"accession" json:"accession" toml:"accession" yaml:"accession"`

	R *upepAccessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L upepAccessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpepAccessionColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Accession string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Accession: "accession",
}

// upepAccessionR is where relationships are stored.
type upepAccessionR struct {
	AccessionUpepRefSeqEntries UpepRefSeqEntrySlice
}

// upepAccessionL is where Load methods for each relationship are stored.
type upepAccessionL struct{}

var (
	upepAccessionColumns               = []string{"id", "created_at", "updated_at", "accession"}
	upepAccessionColumnsWithoutDefault = []string{"created_at", "updated_at", "accession"}
	upepAccessionColumnsWithDefault    = []string{"id"}
	upepAccessionPrimaryKeyColumns     = []string{"id"}
)

type (
	// UpepAccessionSlice is an alias for a slice of pointers to UpepAccession.
	// This should generally be used opposed to []UpepAccession.
	UpepAccessionSlice []*UpepAccession
	// UpepAccessionHook is the signature for custom UpepAccession hook methods
	UpepAccessionHook func(boil.Executor, *UpepAccession) error

	upepAccessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	upepAccessionType                 = reflect.TypeOf(&UpepAccession{})
	upepAccessionMapping              = queries.MakeStructMapping(upepAccessionType)
	upepAccessionPrimaryKeyMapping, _ = queries.BindMapping(upepAccessionType, upepAccessionMapping, upepAccessionPrimaryKeyColumns)
	upepAccessionInsertCacheMut       sync.RWMutex
	upepAccessionInsertCache          = make(map[string]insertCache)
	upepAccessionUpdateCacheMut       sync.RWMutex
	upepAccessionUpdateCache          = make(map[string]updateCache)
	upepAccessionUpsertCacheMut       sync.RWMutex
	upepAccessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var upepAccessionBeforeInsertHooks []UpepAccessionHook
var upepAccessionBeforeUpdateHooks []UpepAccessionHook
var upepAccessionBeforeDeleteHooks []UpepAccessionHook
var upepAccessionBeforeUpsertHooks []UpepAccessionHook

var upepAccessionAfterInsertHooks []UpepAccessionHook
var upepAccessionAfterSelectHooks []UpepAccessionHook
var upepAccessionAfterUpdateHooks []UpepAccessionHook
var upepAccessionAfterDeleteHooks []UpepAccessionHook
var upepAccessionAfterUpsertHooks []UpepAccessionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UpepAccession) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepAccessionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UpepAccession) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepAccessionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UpepAccession) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepAccessionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UpepAccession) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepAccessionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UpepAccession) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepAccessionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UpepAccession) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range upepAccessionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UpepAccession) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepAccessionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UpepAccession) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepAccessionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UpepAccession) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepAccessionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUpepAccessionHook registers your hook function for all future operations.
func AddUpepAccessionHook(hookPoint boil.HookPoint, upepAccessionHook UpepAccessionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		upepAccessionBeforeInsertHooks = append(upepAccessionBeforeInsertHooks, upepAccessionHook)
	case boil.BeforeUpdateHook:
		upepAccessionBeforeUpdateHooks = append(upepAccessionBeforeUpdateHooks, upepAccessionHook)
	case boil.BeforeDeleteHook:
		upepAccessionBeforeDeleteHooks = append(upepAccessionBeforeDeleteHooks, upepAccessionHook)
	case boil.BeforeUpsertHook:
		upepAccessionBeforeUpsertHooks = append(upepAccessionBeforeUpsertHooks, upepAccessionHook)
	case boil.AfterInsertHook:
		upepAccessionAfterInsertHooks = append(upepAccessionAfterInsertHooks, upepAccessionHook)
	case boil.AfterSelectHook:
		upepAccessionAfterSelectHooks = append(upepAccessionAfterSelectHooks, upepAccessionHook)
	case boil.AfterUpdateHook:
		upepAccessionAfterUpdateHooks = append(upepAccessionAfterUpdateHooks, upepAccessionHook)
	case boil.AfterDeleteHook:
		upepAccessionAfterDeleteHooks = append(upepAccessionAfterDeleteHooks, upepAccessionHook)
	case boil.AfterUpsertHook:
		upepAccessionAfterUpsertHooks = append(upepAccessionAfterUpsertHooks, upepAccessionHook)
	}
}

// OneP returns a single upepAccession record from the query, and panics on error.
func (q upepAccessionQuery) OneP() *UpepAccession {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single upepAccession record from the query.
func (q upepAccessionQuery) One() (*UpepAccession, error) {
	o := &UpepAccession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upep_accessions")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UpepAccession records from the query, and panics on error.
func (q upepAccessionQuery) AllP() UpepAccessionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UpepAccession records from the query.
func (q upepAccessionQuery) All() (UpepAccessionSlice, error) {
	var o []*UpepAccession

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UpepAccession slice")
	}

	if len(upepAccessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UpepAccession records in the query, and panics on error.
func (q upepAccessionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UpepAccession records in the query.
func (q upepAccessionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upep_accessions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q upepAccessionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q upepAccessionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upep_accessions exists")
	}

	return count > 0, nil
}

// AccessionUpepRefSeqEntriesG retrieves all the upep_ref_seq_entry's upep ref seq entries via accession_id column.
func (o *UpepAccession) AccessionUpepRefSeqEntriesG(mods ...qm.QueryMod) upepRefSeqEntryQuery {
	return o.AccessionUpepRefSeqEntries(boil.GetDB(), mods...)
}

// AccessionUpepRefSeqEntries retrieves all the upep_ref_seq_entry's upep ref seq entries with an executor via accession_id column.
func (o *UpepAccession) AccessionUpepRefSeqEntries(exec boil.Executor, mods ...qm.QueryMod) upepRefSeqEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upep\".\"upep_ref_seq_entries\".\"accession_id\"=?", o.ID),
	)

	query := UpepRefSeqEntries(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_ref_seq_entries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"upep\".\"upep_ref_seq_entries\".*"})
	}

	return query
}

// LoadAccessionUpepRefSeqEntries allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepAccessionL) LoadAccessionUpepRefSeqEntries(e boil.Executor, singular bool, maybeUpepAccession interface{}) error {
	var slice []*UpepAccession
	var object *UpepAccession

	count := 1
	if singular {
		object = maybeUpepAccession.(*UpepAccession)
	} else {
		slice = *maybeUpepAccession.(*[]*UpepAccession)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepAccessionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepAccessionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_ref_seq_entries\" where \"accession_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upep_ref_seq_entries")
	}
	defer results.Close()

	var resultSlice []*UpepRefSeqEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upep_ref_seq_entries")
	}

	if len(upepRefSeqEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AccessionUpepRefSeqEntries = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AccessionID.Int64 {
				local.R.AccessionUpepRefSeqEntries = append(local.R.AccessionUpepRefSeqEntries, foreign)
				break
			}
		}
	}

	return nil
}

// AddAccessionUpepRefSeqEntriesG adds the given related objects to the existing relationships
// of the upep_accession, optionally inserting them as new records.
// Appends related to o.R.AccessionUpepRefSeqEntries.
// Sets related.R.Accession appropriately.
// Uses the global database handle.
func (o *UpepAccession) AddAccessionUpepRefSeqEntriesG(insert bool, related ...*UpepRefSeqEntry) error {
	return o.AddAccessionUpepRefSeqEntries(boil.GetDB(), insert, related...)
}

// AddAccessionUpepRefSeqEntriesP adds the given related objects to the existing relationships
// of the upep_accession, optionally inserting them as new records.
// Appends related to o.R.AccessionUpepRefSeqEntries.
// Sets related.R.Accession appropriately.
// Panics on error.
func (o *UpepAccession) AddAccessionUpepRefSeqEntriesP(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) {
	if err := o.AddAccessionUpepRefSeqEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAccessionUpepRefSeqEntriesGP adds the given related objects to the existing relationships
// of the upep_accession, optionally inserting them as new records.
// Appends related to o.R.AccessionUpepRefSeqEntries.
// Sets related.R.Accession appropriately.
// Uses the global database handle and panics on error.
func (o *UpepAccession) AddAccessionUpepRefSeqEntriesGP(insert bool, related ...*UpepRefSeqEntry) {
	if err := o.AddAccessionUpepRefSeqEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAccessionUpepRefSeqEntries adds the given related objects to the existing relationships
// of the upep_accession, optionally inserting them as new records.
// Appends related to o.R.AccessionUpepRefSeqEntries.
// Sets related.R.Accession appropriately.
func (o *UpepAccession) AddAccessionUpepRefSeqEntries(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AccessionID.Int64 = o.ID
			rel.AccessionID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"accession_id"}),
				strmangle.WhereClause("\"", "\"", 2, upepRefSeqEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AccessionID.Int64 = o.ID
			rel.AccessionID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &upepAccessionR{
			AccessionUpepRefSeqEntries: related,
		}
	} else {
		o.R.AccessionUpepRefSeqEntries = append(o.R.AccessionUpepRefSeqEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &upepRefSeqEntryR{
				Accession: o,
			}
		} else {
			rel.R.Accession = o
		}
	}
	return nil
}

// SetAccessionUpepRefSeqEntriesG removes all previously related items of the
// upep_accession replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Accession's AccessionUpepRefSeqEntries accordingly.
// Replaces o.R.AccessionUpepRefSeqEntries with related.
// Sets related.R.Accession's AccessionUpepRefSeqEntries accordingly.
// Uses the global database handle.
func (o *UpepAccession) SetAccessionUpepRefSeqEntriesG(insert bool, related ...*UpepRefSeqEntry) error {
	return o.SetAccessionUpepRefSeqEntries(boil.GetDB(), insert, related...)
}

// SetAccessionUpepRefSeqEntriesP removes all previously related items of the
// upep_accession replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Accession's AccessionUpepRefSeqEntries accordingly.
// Replaces o.R.AccessionUpepRefSeqEntries with related.
// Sets related.R.Accession's AccessionUpepRefSeqEntries accordingly.
// Panics on error.
func (o *UpepAccession) SetAccessionUpepRefSeqEntriesP(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) {
	if err := o.SetAccessionUpepRefSeqEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAccessionUpepRefSeqEntriesGP removes all previously related items of the
// upep_accession replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Accession's AccessionUpepRefSeqEntries accordingly.
// Replaces o.R.AccessionUpepRefSeqEntries with related.
// Sets related.R.Accession's AccessionUpepRefSeqEntries accordingly.
// Uses the global database handle and panics on error.
func (o *UpepAccession) SetAccessionUpepRefSeqEntriesGP(insert bool, related ...*UpepRefSeqEntry) {
	if err := o.SetAccessionUpepRefSeqEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAccessionUpepRefSeqEntries removes all previously related items of the
// upep_accession replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Accession's AccessionUpepRefSeqEntries accordingly.
// Replaces o.R.AccessionUpepRefSeqEntries with related.
// Sets related.R.Accession's AccessionUpepRefSeqEntries accordingly.
func (o *UpepAccession) SetAccessionUpepRefSeqEntries(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) error {
	query := "update \"upep\".\"upep_ref_seq_entries\" set \"accession_id\" = null where \"accession_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AccessionUpepRefSeqEntries {
			rel.AccessionID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Accession = nil
		}

		o.R.AccessionUpepRefSeqEntries = nil
	}
	return o.AddAccessionUpepRefSeqEntries(exec, insert, related...)
}

// RemoveAccessionUpepRefSeqEntriesG relationships from objects passed in.
// Removes related items from R.AccessionUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.Accession.
// Uses the global database handle.
func (o *UpepAccession) RemoveAccessionUpepRefSeqEntriesG(related ...*UpepRefSeqEntry) error {
	return o.RemoveAccessionUpepRefSeqEntries(boil.GetDB(), related...)
}

// RemoveAccessionUpepRefSeqEntriesP relationships from objects passed in.
// Removes related items from R.AccessionUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.Accession.
// Panics on error.
func (o *UpepAccession) RemoveAccessionUpepRefSeqEntriesP(exec boil.Executor, related ...*UpepRefSeqEntry) {
	if err := o.RemoveAccessionUpepRefSeqEntries(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAccessionUpepRefSeqEntriesGP relationships from objects passed in.
// Removes related items from R.AccessionUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.Accession.
// Uses the global database handle and panics on error.
func (o *UpepAccession) RemoveAccessionUpepRefSeqEntriesGP(related ...*UpepRefSeqEntry) {
	if err := o.RemoveAccessionUpepRefSeqEntries(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAccessionUpepRefSeqEntries relationships from objects passed in.
// Removes related items from R.AccessionUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.Accession.
func (o *UpepAccession) RemoveAccessionUpepRefSeqEntries(exec boil.Executor, related ...*UpepRefSeqEntry) error {
	var err error
	for _, rel := range related {
		rel.AccessionID.Valid = false
		if rel.R != nil {
			rel.R.Accession = nil
		}
		if err = rel.Update(exec, "accession_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AccessionUpepRefSeqEntries {
			if rel != ri {
				continue
			}

			ln := len(o.R.AccessionUpepRefSeqEntries)
			if ln > 1 && i < ln-1 {
				o.R.AccessionUpepRefSeqEntries[i] = o.R.AccessionUpepRefSeqEntries[ln-1]
			}
			o.R.AccessionUpepRefSeqEntries = o.R.AccessionUpepRefSeqEntries[:ln-1]
			break
		}
	}

	return nil
}

// UpepAccessionsG retrieves all records.
func UpepAccessionsG(mods ...qm.QueryMod) upepAccessionQuery {
	return UpepAccessions(boil.GetDB(), mods...)
}

// UpepAccessions retrieves all the records using an executor.
func UpepAccessions(exec boil.Executor, mods ...qm.QueryMod) upepAccessionQuery {
	mods = append(mods, qm.From("\"upep\".\"upep_accessions\""))
	return upepAccessionQuery{NewQuery(exec, mods...)}
}

// FindUpepAccessionG retrieves a single record by ID.
func FindUpepAccessionG(id int64, selectCols ...string) (*UpepAccession, error) {
	return FindUpepAccession(boil.GetDB(), id, selectCols...)
}

// FindUpepAccessionGP retrieves a single record by ID, and panics on error.
func FindUpepAccessionGP(id int64, selectCols ...string) *UpepAccession {
	retobj, err := FindUpepAccession(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUpepAccession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpepAccession(exec boil.Executor, id int64, selectCols ...string) (*UpepAccession, error) {
	upepAccessionObj := &UpepAccession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upep\".\"upep_accessions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(upepAccessionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upep_accessions")
	}

	return upepAccessionObj, nil
}

// FindUpepAccessionP retrieves a single record by ID with an executor, and panics on error.
func FindUpepAccessionP(exec boil.Executor, id int64, selectCols ...string) *UpepAccession {
	retobj, err := FindUpepAccession(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UpepAccession) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UpepAccession) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UpepAccession) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UpepAccession) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_accessions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepAccessionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	upepAccessionInsertCacheMut.RLock()
	cache, cached := upepAccessionInsertCache[key]
	upepAccessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			upepAccessionColumns,
			upepAccessionColumnsWithDefault,
			upepAccessionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(upepAccessionType, upepAccessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(upepAccessionType, upepAccessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upep\".\"upep_accessions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upep\".\"upep_accessions\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upep_accessions")
	}

	if !cached {
		upepAccessionInsertCacheMut.Lock()
		upepAccessionInsertCache[key] = cache
		upepAccessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UpepAccession record. See Update for
// whitelist behavior description.
func (o *UpepAccession) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UpepAccession record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UpepAccession) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UpepAccession, and panics on error.
// See Update for whitelist behavior description.
func (o *UpepAccession) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UpepAccession.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UpepAccession) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	upepAccessionUpdateCacheMut.RLock()
	cache, cached := upepAccessionUpdateCache[key]
	upepAccessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			upepAccessionColumns,
			upepAccessionPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update upep_accessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upep\".\"upep_accessions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, upepAccessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(upepAccessionType, upepAccessionMapping, append(wl, upepAccessionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update upep_accessions row")
	}

	if !cached {
		upepAccessionUpdateCacheMut.Lock()
		upepAccessionUpdateCache[key] = cache
		upepAccessionUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q upepAccessionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q upepAccessionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for upep_accessions")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UpepAccessionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UpepAccessionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UpepAccessionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpepAccessionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepAccessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upep\".\"upep_accessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, upepAccessionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in upepAccession slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UpepAccession) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UpepAccession) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UpepAccession) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UpepAccession) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_accessions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepAccessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	upepAccessionUpsertCacheMut.RLock()
	cache, cached := upepAccessionUpsertCache[key]
	upepAccessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			upepAccessionColumns,
			upepAccessionColumnsWithDefault,
			upepAccessionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			upepAccessionColumns,
			upepAccessionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert upep_accessions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(upepAccessionPrimaryKeyColumns))
			copy(conflict, upepAccessionPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"upep\".\"upep_accessions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(upepAccessionType, upepAccessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(upepAccessionType, upepAccessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upep_accessions")
	}

	if !cached {
		upepAccessionUpsertCacheMut.Lock()
		upepAccessionUpsertCache[key] = cache
		upepAccessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UpepAccession record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepAccession) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UpepAccession record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UpepAccession) DeleteG() error {
	if o == nil {
		return errors.New("models: no UpepAccession provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UpepAccession record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepAccession) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UpepAccession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UpepAccession) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepAccession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), upepAccessionPrimaryKeyMapping)
	sql := "DELETE FROM \"upep\".\"upep_accessions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from upep_accessions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q upepAccessionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q upepAccessionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no upepAccessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upep_accessions")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UpepAccessionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UpepAccessionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UpepAccession slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UpepAccessionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpepAccessionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepAccession slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(upepAccessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepAccessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upep\".\"upep_accessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepAccessionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upepAccession slice")
	}

	if len(upepAccessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UpepAccession) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UpepAccession) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UpepAccession) ReloadG() error {
	if o == nil {
		return errors.New("models: no UpepAccession provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UpepAccession) Reload(exec boil.Executor) error {
	ret, err := FindUpepAccession(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepAccessionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepAccessionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepAccessionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UpepAccessionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepAccessionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	upepAccessions := UpepAccessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepAccessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upep\".\"upep_accessions\".* FROM \"upep\".\"upep_accessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepAccessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&upepAccessions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UpepAccessionSlice")
	}

	*o = upepAccessions

	return nil
}

// UpepAccessionExists checks if the UpepAccession row exists.
func UpepAccessionExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upep\".\"upep_accessions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upep_accessions exists")
	}

	return exists, nil
}

// UpepAccessionExistsG checks if the UpepAccession row exists.
func UpepAccessionExistsG(id int64) (bool, error) {
	return UpepAccessionExists(boil.GetDB(), id)
}

// UpepAccessionExistsGP checks if the UpepAccession row exists. Panics on error.
func UpepAccessionExistsGP(id int64) bool {
	e, err := UpepAccessionExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UpepAccessionExistsP checks if the UpepAccession row exists. Panics on error.
func UpepAccessionExistsP(exec boil.Executor, id int64) bool {
	e, err := UpepAccessionExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
