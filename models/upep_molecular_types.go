// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// UpepMolecularType is an object representing the database table.
type UpepMolecularType struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *upepMolecularTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L upepMolecularTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpepMolecularTypeColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Name      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Name:      "name",
}

// upepMolecularTypeR is where relationships are stored.
type upepMolecularTypeR struct {
	MolecularTypeUpepRefSeqEntries UpepRefSeqEntrySlice
}

// upepMolecularTypeL is where Load methods for each relationship are stored.
type upepMolecularTypeL struct{}

var (
	upepMolecularTypeColumns               = []string{"id", "created_at", "updated_at", "name"}
	upepMolecularTypeColumnsWithoutDefault = []string{"created_at", "updated_at", "name"}
	upepMolecularTypeColumnsWithDefault    = []string{"id"}
	upepMolecularTypePrimaryKeyColumns     = []string{"id"}
)

type (
	// UpepMolecularTypeSlice is an alias for a slice of pointers to UpepMolecularType.
	// This should generally be used opposed to []UpepMolecularType.
	UpepMolecularTypeSlice []*UpepMolecularType
	// UpepMolecularTypeHook is the signature for custom UpepMolecularType hook methods
	UpepMolecularTypeHook func(boil.Executor, *UpepMolecularType) error

	upepMolecularTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	upepMolecularTypeType                 = reflect.TypeOf(&UpepMolecularType{})
	upepMolecularTypeMapping              = queries.MakeStructMapping(upepMolecularTypeType)
	upepMolecularTypePrimaryKeyMapping, _ = queries.BindMapping(upepMolecularTypeType, upepMolecularTypeMapping, upepMolecularTypePrimaryKeyColumns)
	upepMolecularTypeInsertCacheMut       sync.RWMutex
	upepMolecularTypeInsertCache          = make(map[string]insertCache)
	upepMolecularTypeUpdateCacheMut       sync.RWMutex
	upepMolecularTypeUpdateCache          = make(map[string]updateCache)
	upepMolecularTypeUpsertCacheMut       sync.RWMutex
	upepMolecularTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var upepMolecularTypeBeforeInsertHooks []UpepMolecularTypeHook
var upepMolecularTypeBeforeUpdateHooks []UpepMolecularTypeHook
var upepMolecularTypeBeforeDeleteHooks []UpepMolecularTypeHook
var upepMolecularTypeBeforeUpsertHooks []UpepMolecularTypeHook

var upepMolecularTypeAfterInsertHooks []UpepMolecularTypeHook
var upepMolecularTypeAfterSelectHooks []UpepMolecularTypeHook
var upepMolecularTypeAfterUpdateHooks []UpepMolecularTypeHook
var upepMolecularTypeAfterDeleteHooks []UpepMolecularTypeHook
var upepMolecularTypeAfterUpsertHooks []UpepMolecularTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UpepMolecularType) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepMolecularTypeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UpepMolecularType) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepMolecularTypeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UpepMolecularType) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepMolecularTypeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UpepMolecularType) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepMolecularTypeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UpepMolecularType) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepMolecularTypeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UpepMolecularType) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range upepMolecularTypeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UpepMolecularType) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepMolecularTypeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UpepMolecularType) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepMolecularTypeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UpepMolecularType) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepMolecularTypeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUpepMolecularTypeHook registers your hook function for all future operations.
func AddUpepMolecularTypeHook(hookPoint boil.HookPoint, upepMolecularTypeHook UpepMolecularTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		upepMolecularTypeBeforeInsertHooks = append(upepMolecularTypeBeforeInsertHooks, upepMolecularTypeHook)
	case boil.BeforeUpdateHook:
		upepMolecularTypeBeforeUpdateHooks = append(upepMolecularTypeBeforeUpdateHooks, upepMolecularTypeHook)
	case boil.BeforeDeleteHook:
		upepMolecularTypeBeforeDeleteHooks = append(upepMolecularTypeBeforeDeleteHooks, upepMolecularTypeHook)
	case boil.BeforeUpsertHook:
		upepMolecularTypeBeforeUpsertHooks = append(upepMolecularTypeBeforeUpsertHooks, upepMolecularTypeHook)
	case boil.AfterInsertHook:
		upepMolecularTypeAfterInsertHooks = append(upepMolecularTypeAfterInsertHooks, upepMolecularTypeHook)
	case boil.AfterSelectHook:
		upepMolecularTypeAfterSelectHooks = append(upepMolecularTypeAfterSelectHooks, upepMolecularTypeHook)
	case boil.AfterUpdateHook:
		upepMolecularTypeAfterUpdateHooks = append(upepMolecularTypeAfterUpdateHooks, upepMolecularTypeHook)
	case boil.AfterDeleteHook:
		upepMolecularTypeAfterDeleteHooks = append(upepMolecularTypeAfterDeleteHooks, upepMolecularTypeHook)
	case boil.AfterUpsertHook:
		upepMolecularTypeAfterUpsertHooks = append(upepMolecularTypeAfterUpsertHooks, upepMolecularTypeHook)
	}
}

// OneP returns a single upepMolecularType record from the query, and panics on error.
func (q upepMolecularTypeQuery) OneP() *UpepMolecularType {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single upepMolecularType record from the query.
func (q upepMolecularTypeQuery) One() (*UpepMolecularType, error) {
	o := &UpepMolecularType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upep_molecular_types")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UpepMolecularType records from the query, and panics on error.
func (q upepMolecularTypeQuery) AllP() UpepMolecularTypeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UpepMolecularType records from the query.
func (q upepMolecularTypeQuery) All() (UpepMolecularTypeSlice, error) {
	var o []*UpepMolecularType

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UpepMolecularType slice")
	}

	if len(upepMolecularTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UpepMolecularType records in the query, and panics on error.
func (q upepMolecularTypeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UpepMolecularType records in the query.
func (q upepMolecularTypeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upep_molecular_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q upepMolecularTypeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q upepMolecularTypeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upep_molecular_types exists")
	}

	return count > 0, nil
}

// MolecularTypeUpepRefSeqEntriesG retrieves all the upep_ref_seq_entry's upep ref seq entries via molecular_type_id column.
func (o *UpepMolecularType) MolecularTypeUpepRefSeqEntriesG(mods ...qm.QueryMod) upepRefSeqEntryQuery {
	return o.MolecularTypeUpepRefSeqEntries(boil.GetDB(), mods...)
}

// MolecularTypeUpepRefSeqEntries retrieves all the upep_ref_seq_entry's upep ref seq entries with an executor via molecular_type_id column.
func (o *UpepMolecularType) MolecularTypeUpepRefSeqEntries(exec boil.Executor, mods ...qm.QueryMod) upepRefSeqEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upep\".\"upep_ref_seq_entries\".\"molecular_type_id\"=?", o.ID),
	)

	query := UpepRefSeqEntries(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_ref_seq_entries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"upep\".\"upep_ref_seq_entries\".*"})
	}

	return query
}

// LoadMolecularTypeUpepRefSeqEntries allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepMolecularTypeL) LoadMolecularTypeUpepRefSeqEntries(e boil.Executor, singular bool, maybeUpepMolecularType interface{}) error {
	var slice []*UpepMolecularType
	var object *UpepMolecularType

	count := 1
	if singular {
		object = maybeUpepMolecularType.(*UpepMolecularType)
	} else {
		slice = *maybeUpepMolecularType.(*[]*UpepMolecularType)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepMolecularTypeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepMolecularTypeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_ref_seq_entries\" where \"molecular_type_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upep_ref_seq_entries")
	}
	defer results.Close()

	var resultSlice []*UpepRefSeqEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upep_ref_seq_entries")
	}

	if len(upepRefSeqEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MolecularTypeUpepRefSeqEntries = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MolecularTypeID.Int64 {
				local.R.MolecularTypeUpepRefSeqEntries = append(local.R.MolecularTypeUpepRefSeqEntries, foreign)
				break
			}
		}
	}

	return nil
}

// AddMolecularTypeUpepRefSeqEntriesG adds the given related objects to the existing relationships
// of the upep_molecular_type, optionally inserting them as new records.
// Appends related to o.R.MolecularTypeUpepRefSeqEntries.
// Sets related.R.MolecularType appropriately.
// Uses the global database handle.
func (o *UpepMolecularType) AddMolecularTypeUpepRefSeqEntriesG(insert bool, related ...*UpepRefSeqEntry) error {
	return o.AddMolecularTypeUpepRefSeqEntries(boil.GetDB(), insert, related...)
}

// AddMolecularTypeUpepRefSeqEntriesP adds the given related objects to the existing relationships
// of the upep_molecular_type, optionally inserting them as new records.
// Appends related to o.R.MolecularTypeUpepRefSeqEntries.
// Sets related.R.MolecularType appropriately.
// Panics on error.
func (o *UpepMolecularType) AddMolecularTypeUpepRefSeqEntriesP(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) {
	if err := o.AddMolecularTypeUpepRefSeqEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMolecularTypeUpepRefSeqEntriesGP adds the given related objects to the existing relationships
// of the upep_molecular_type, optionally inserting them as new records.
// Appends related to o.R.MolecularTypeUpepRefSeqEntries.
// Sets related.R.MolecularType appropriately.
// Uses the global database handle and panics on error.
func (o *UpepMolecularType) AddMolecularTypeUpepRefSeqEntriesGP(insert bool, related ...*UpepRefSeqEntry) {
	if err := o.AddMolecularTypeUpepRefSeqEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMolecularTypeUpepRefSeqEntries adds the given related objects to the existing relationships
// of the upep_molecular_type, optionally inserting them as new records.
// Appends related to o.R.MolecularTypeUpepRefSeqEntries.
// Sets related.R.MolecularType appropriately.
func (o *UpepMolecularType) AddMolecularTypeUpepRefSeqEntries(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MolecularTypeID.Int64 = o.ID
			rel.MolecularTypeID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"molecular_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, upepRefSeqEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MolecularTypeID.Int64 = o.ID
			rel.MolecularTypeID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &upepMolecularTypeR{
			MolecularTypeUpepRefSeqEntries: related,
		}
	} else {
		o.R.MolecularTypeUpepRefSeqEntries = append(o.R.MolecularTypeUpepRefSeqEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &upepRefSeqEntryR{
				MolecularType: o,
			}
		} else {
			rel.R.MolecularType = o
		}
	}
	return nil
}

// SetMolecularTypeUpepRefSeqEntriesG removes all previously related items of the
// upep_molecular_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MolecularType's MolecularTypeUpepRefSeqEntries accordingly.
// Replaces o.R.MolecularTypeUpepRefSeqEntries with related.
// Sets related.R.MolecularType's MolecularTypeUpepRefSeqEntries accordingly.
// Uses the global database handle.
func (o *UpepMolecularType) SetMolecularTypeUpepRefSeqEntriesG(insert bool, related ...*UpepRefSeqEntry) error {
	return o.SetMolecularTypeUpepRefSeqEntries(boil.GetDB(), insert, related...)
}

// SetMolecularTypeUpepRefSeqEntriesP removes all previously related items of the
// upep_molecular_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MolecularType's MolecularTypeUpepRefSeqEntries accordingly.
// Replaces o.R.MolecularTypeUpepRefSeqEntries with related.
// Sets related.R.MolecularType's MolecularTypeUpepRefSeqEntries accordingly.
// Panics on error.
func (o *UpepMolecularType) SetMolecularTypeUpepRefSeqEntriesP(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) {
	if err := o.SetMolecularTypeUpepRefSeqEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMolecularTypeUpepRefSeqEntriesGP removes all previously related items of the
// upep_molecular_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MolecularType's MolecularTypeUpepRefSeqEntries accordingly.
// Replaces o.R.MolecularTypeUpepRefSeqEntries with related.
// Sets related.R.MolecularType's MolecularTypeUpepRefSeqEntries accordingly.
// Uses the global database handle and panics on error.
func (o *UpepMolecularType) SetMolecularTypeUpepRefSeqEntriesGP(insert bool, related ...*UpepRefSeqEntry) {
	if err := o.SetMolecularTypeUpepRefSeqEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMolecularTypeUpepRefSeqEntries removes all previously related items of the
// upep_molecular_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MolecularType's MolecularTypeUpepRefSeqEntries accordingly.
// Replaces o.R.MolecularTypeUpepRefSeqEntries with related.
// Sets related.R.MolecularType's MolecularTypeUpepRefSeqEntries accordingly.
func (o *UpepMolecularType) SetMolecularTypeUpepRefSeqEntries(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) error {
	query := "update \"upep\".\"upep_ref_seq_entries\" set \"molecular_type_id\" = null where \"molecular_type_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MolecularTypeUpepRefSeqEntries {
			rel.MolecularTypeID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.MolecularType = nil
		}

		o.R.MolecularTypeUpepRefSeqEntries = nil
	}
	return o.AddMolecularTypeUpepRefSeqEntries(exec, insert, related...)
}

// RemoveMolecularTypeUpepRefSeqEntriesG relationships from objects passed in.
// Removes related items from R.MolecularTypeUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.MolecularType.
// Uses the global database handle.
func (o *UpepMolecularType) RemoveMolecularTypeUpepRefSeqEntriesG(related ...*UpepRefSeqEntry) error {
	return o.RemoveMolecularTypeUpepRefSeqEntries(boil.GetDB(), related...)
}

// RemoveMolecularTypeUpepRefSeqEntriesP relationships from objects passed in.
// Removes related items from R.MolecularTypeUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.MolecularType.
// Panics on error.
func (o *UpepMolecularType) RemoveMolecularTypeUpepRefSeqEntriesP(exec boil.Executor, related ...*UpepRefSeqEntry) {
	if err := o.RemoveMolecularTypeUpepRefSeqEntries(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMolecularTypeUpepRefSeqEntriesGP relationships from objects passed in.
// Removes related items from R.MolecularTypeUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.MolecularType.
// Uses the global database handle and panics on error.
func (o *UpepMolecularType) RemoveMolecularTypeUpepRefSeqEntriesGP(related ...*UpepRefSeqEntry) {
	if err := o.RemoveMolecularTypeUpepRefSeqEntries(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMolecularTypeUpepRefSeqEntries relationships from objects passed in.
// Removes related items from R.MolecularTypeUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.MolecularType.
func (o *UpepMolecularType) RemoveMolecularTypeUpepRefSeqEntries(exec boil.Executor, related ...*UpepRefSeqEntry) error {
	var err error
	for _, rel := range related {
		rel.MolecularTypeID.Valid = false
		if rel.R != nil {
			rel.R.MolecularType = nil
		}
		if err = rel.Update(exec, "molecular_type_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MolecularTypeUpepRefSeqEntries {
			if rel != ri {
				continue
			}

			ln := len(o.R.MolecularTypeUpepRefSeqEntries)
			if ln > 1 && i < ln-1 {
				o.R.MolecularTypeUpepRefSeqEntries[i] = o.R.MolecularTypeUpepRefSeqEntries[ln-1]
			}
			o.R.MolecularTypeUpepRefSeqEntries = o.R.MolecularTypeUpepRefSeqEntries[:ln-1]
			break
		}
	}

	return nil
}

// UpepMolecularTypesG retrieves all records.
func UpepMolecularTypesG(mods ...qm.QueryMod) upepMolecularTypeQuery {
	return UpepMolecularTypes(boil.GetDB(), mods...)
}

// UpepMolecularTypes retrieves all the records using an executor.
func UpepMolecularTypes(exec boil.Executor, mods ...qm.QueryMod) upepMolecularTypeQuery {
	mods = append(mods, qm.From("\"upep\".\"upep_molecular_types\""))
	return upepMolecularTypeQuery{NewQuery(exec, mods...)}
}

// FindUpepMolecularTypeG retrieves a single record by ID.
func FindUpepMolecularTypeG(id int64, selectCols ...string) (*UpepMolecularType, error) {
	return FindUpepMolecularType(boil.GetDB(), id, selectCols...)
}

// FindUpepMolecularTypeGP retrieves a single record by ID, and panics on error.
func FindUpepMolecularTypeGP(id int64, selectCols ...string) *UpepMolecularType {
	retobj, err := FindUpepMolecularType(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUpepMolecularType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpepMolecularType(exec boil.Executor, id int64, selectCols ...string) (*UpepMolecularType, error) {
	upepMolecularTypeObj := &UpepMolecularType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upep\".\"upep_molecular_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(upepMolecularTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upep_molecular_types")
	}

	return upepMolecularTypeObj, nil
}

// FindUpepMolecularTypeP retrieves a single record by ID with an executor, and panics on error.
func FindUpepMolecularTypeP(exec boil.Executor, id int64, selectCols ...string) *UpepMolecularType {
	retobj, err := FindUpepMolecularType(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UpepMolecularType) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UpepMolecularType) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UpepMolecularType) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UpepMolecularType) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_molecular_types provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepMolecularTypeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	upepMolecularTypeInsertCacheMut.RLock()
	cache, cached := upepMolecularTypeInsertCache[key]
	upepMolecularTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			upepMolecularTypeColumns,
			upepMolecularTypeColumnsWithDefault,
			upepMolecularTypeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(upepMolecularTypeType, upepMolecularTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(upepMolecularTypeType, upepMolecularTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upep\".\"upep_molecular_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upep\".\"upep_molecular_types\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upep_molecular_types")
	}

	if !cached {
		upepMolecularTypeInsertCacheMut.Lock()
		upepMolecularTypeInsertCache[key] = cache
		upepMolecularTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UpepMolecularType record. See Update for
// whitelist behavior description.
func (o *UpepMolecularType) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UpepMolecularType record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UpepMolecularType) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UpepMolecularType, and panics on error.
// See Update for whitelist behavior description.
func (o *UpepMolecularType) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UpepMolecularType.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UpepMolecularType) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	upepMolecularTypeUpdateCacheMut.RLock()
	cache, cached := upepMolecularTypeUpdateCache[key]
	upepMolecularTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			upepMolecularTypeColumns,
			upepMolecularTypePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update upep_molecular_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upep\".\"upep_molecular_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, upepMolecularTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(upepMolecularTypeType, upepMolecularTypeMapping, append(wl, upepMolecularTypePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update upep_molecular_types row")
	}

	if !cached {
		upepMolecularTypeUpdateCacheMut.Lock()
		upepMolecularTypeUpdateCache[key] = cache
		upepMolecularTypeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q upepMolecularTypeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q upepMolecularTypeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for upep_molecular_types")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UpepMolecularTypeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UpepMolecularTypeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UpepMolecularTypeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpepMolecularTypeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepMolecularTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upep\".\"upep_molecular_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, upepMolecularTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in upepMolecularType slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UpepMolecularType) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UpepMolecularType) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UpepMolecularType) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UpepMolecularType) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_molecular_types provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepMolecularTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	upepMolecularTypeUpsertCacheMut.RLock()
	cache, cached := upepMolecularTypeUpsertCache[key]
	upepMolecularTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			upepMolecularTypeColumns,
			upepMolecularTypeColumnsWithDefault,
			upepMolecularTypeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			upepMolecularTypeColumns,
			upepMolecularTypePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert upep_molecular_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(upepMolecularTypePrimaryKeyColumns))
			copy(conflict, upepMolecularTypePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"upep\".\"upep_molecular_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(upepMolecularTypeType, upepMolecularTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(upepMolecularTypeType, upepMolecularTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upep_molecular_types")
	}

	if !cached {
		upepMolecularTypeUpsertCacheMut.Lock()
		upepMolecularTypeUpsertCache[key] = cache
		upepMolecularTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UpepMolecularType record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepMolecularType) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UpepMolecularType record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UpepMolecularType) DeleteG() error {
	if o == nil {
		return errors.New("models: no UpepMolecularType provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UpepMolecularType record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepMolecularType) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UpepMolecularType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UpepMolecularType) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepMolecularType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), upepMolecularTypePrimaryKeyMapping)
	sql := "DELETE FROM \"upep\".\"upep_molecular_types\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from upep_molecular_types")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q upepMolecularTypeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q upepMolecularTypeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no upepMolecularTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upep_molecular_types")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UpepMolecularTypeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UpepMolecularTypeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UpepMolecularType slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UpepMolecularTypeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpepMolecularTypeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepMolecularType slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(upepMolecularTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepMolecularTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upep\".\"upep_molecular_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepMolecularTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upepMolecularType slice")
	}

	if len(upepMolecularTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UpepMolecularType) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UpepMolecularType) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UpepMolecularType) ReloadG() error {
	if o == nil {
		return errors.New("models: no UpepMolecularType provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UpepMolecularType) Reload(exec boil.Executor) error {
	ret, err := FindUpepMolecularType(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepMolecularTypeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepMolecularTypeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepMolecularTypeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UpepMolecularTypeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepMolecularTypeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	upepMolecularTypes := UpepMolecularTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepMolecularTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upep\".\"upep_molecular_types\".* FROM \"upep\".\"upep_molecular_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepMolecularTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&upepMolecularTypes)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UpepMolecularTypeSlice")
	}

	*o = upepMolecularTypes

	return nil
}

// UpepMolecularTypeExists checks if the UpepMolecularType row exists.
func UpepMolecularTypeExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upep\".\"upep_molecular_types\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upep_molecular_types exists")
	}

	return exists, nil
}

// UpepMolecularTypeExistsG checks if the UpepMolecularType row exists.
func UpepMolecularTypeExistsG(id int64) (bool, error) {
	return UpepMolecularTypeExists(boil.GetDB(), id)
}

// UpepMolecularTypeExistsGP checks if the UpepMolecularType row exists. Panics on error.
func UpepMolecularTypeExistsGP(id int64) bool {
	e, err := UpepMolecularTypeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UpepMolecularTypeExistsP checks if the UpepMolecularType row exists. Panics on error.
func UpepMolecularTypeExistsP(exec boil.Executor, id int64) bool {
	e, err := UpepMolecularTypeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
