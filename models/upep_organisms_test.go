// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUpepOrganisms(t *testing.T) {
	t.Parallel()

	query := UpepOrganisms(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUpepOrganismsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepOrganism.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepOrganismsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepOrganisms(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepOrganismsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepOrganismSlice{upepOrganism}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUpepOrganismsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UpepOrganismExists(tx, upepOrganism.ID)
	if err != nil {
		t.Errorf("Unable to check if UpepOrganism exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpepOrganismExistsG to return true, but got false.")
	}
}
func testUpepOrganismsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	upepOrganismFound, err := FindUpepOrganism(tx, upepOrganism.ID)
	if err != nil {
		t.Error(err)
	}

	if upepOrganismFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUpepOrganismsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepOrganisms(tx).Bind(upepOrganism); err != nil {
		t.Error(err)
	}
}

func testUpepOrganismsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UpepOrganisms(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpepOrganismsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganismOne := &UpepOrganism{}
	upepOrganismTwo := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganismOne, upepOrganismDBTypes, false, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}
	if err = randomize.Struct(seed, upepOrganismTwo, upepOrganismDBTypes, false, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganismOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepOrganismTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepOrganisms(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpepOrganismsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	upepOrganismOne := &UpepOrganism{}
	upepOrganismTwo := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganismOne, upepOrganismDBTypes, false, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}
	if err = randomize.Struct(seed, upepOrganismTwo, upepOrganismDBTypes, false, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganismOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepOrganismTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func upepOrganismBeforeInsertHook(e boil.Executor, o *UpepOrganism) error {
	*o = UpepOrganism{}
	return nil
}

func upepOrganismAfterInsertHook(e boil.Executor, o *UpepOrganism) error {
	*o = UpepOrganism{}
	return nil
}

func upepOrganismAfterSelectHook(e boil.Executor, o *UpepOrganism) error {
	*o = UpepOrganism{}
	return nil
}

func upepOrganismBeforeUpdateHook(e boil.Executor, o *UpepOrganism) error {
	*o = UpepOrganism{}
	return nil
}

func upepOrganismAfterUpdateHook(e boil.Executor, o *UpepOrganism) error {
	*o = UpepOrganism{}
	return nil
}

func upepOrganismBeforeDeleteHook(e boil.Executor, o *UpepOrganism) error {
	*o = UpepOrganism{}
	return nil
}

func upepOrganismAfterDeleteHook(e boil.Executor, o *UpepOrganism) error {
	*o = UpepOrganism{}
	return nil
}

func upepOrganismBeforeUpsertHook(e boil.Executor, o *UpepOrganism) error {
	*o = UpepOrganism{}
	return nil
}

func upepOrganismAfterUpsertHook(e boil.Executor, o *UpepOrganism) error {
	*o = UpepOrganism{}
	return nil
}

func testUpepOrganismsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UpepOrganism{}
	o := &UpepOrganism{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, upepOrganismDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UpepOrganism object: %s", err)
	}

	AddUpepOrganismHook(boil.BeforeInsertHook, upepOrganismBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	upepOrganismBeforeInsertHooks = []UpepOrganismHook{}

	AddUpepOrganismHook(boil.AfterInsertHook, upepOrganismAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	upepOrganismAfterInsertHooks = []UpepOrganismHook{}

	AddUpepOrganismHook(boil.AfterSelectHook, upepOrganismAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	upepOrganismAfterSelectHooks = []UpepOrganismHook{}

	AddUpepOrganismHook(boil.BeforeUpdateHook, upepOrganismBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	upepOrganismBeforeUpdateHooks = []UpepOrganismHook{}

	AddUpepOrganismHook(boil.AfterUpdateHook, upepOrganismAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	upepOrganismAfterUpdateHooks = []UpepOrganismHook{}

	AddUpepOrganismHook(boil.BeforeDeleteHook, upepOrganismBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	upepOrganismBeforeDeleteHooks = []UpepOrganismHook{}

	AddUpepOrganismHook(boil.AfterDeleteHook, upepOrganismAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	upepOrganismAfterDeleteHooks = []UpepOrganismHook{}

	AddUpepOrganismHook(boil.BeforeUpsertHook, upepOrganismBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	upepOrganismBeforeUpsertHooks = []UpepOrganismHook{}

	AddUpepOrganismHook(boil.AfterUpsertHook, upepOrganismAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	upepOrganismAfterUpsertHooks = []UpepOrganismHook{}
}
func testUpepOrganismsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepOrganismsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx, upepOrganismColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepOrganismToManyOrganismUpepRefSeqEntries(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepOrganism
	var b, c UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)
	randomize.Struct(seed, &c, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)

	b.OrganismID.Valid = true
	c.OrganismID.Valid = true
	b.OrganismID.Int64 = a.ID
	c.OrganismID.Int64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepRefSeqEntry, err := a.OrganismUpepRefSeqEntries(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepRefSeqEntry {
		if v.OrganismID.Int64 == b.OrganismID.Int64 {
			bFound = true
		}
		if v.OrganismID.Int64 == c.OrganismID.Int64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepOrganismSlice{&a}
	if err = a.L.LoadOrganismUpepRefSeqEntries(tx, false, (*[]*UpepOrganism)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganismUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrganismUpepRefSeqEntries = nil
	if err = a.L.LoadOrganismUpepRefSeqEntries(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrganismUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepRefSeqEntry)
	}
}

func testUpepOrganismToManyAddOpOrganismUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepOrganism
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepOrganismDBTypes, false, strmangle.SetComplement(upepOrganismPrimaryKeyColumns, upepOrganismColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepRefSeqEntry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrganismUpepRefSeqEntries(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrganismID.Int64 {
			t.Error("foreign key was wrong value", a.ID, first.OrganismID.Int64)
		}
		if a.ID != second.OrganismID.Int64 {
			t.Error("foreign key was wrong value", a.ID, second.OrganismID.Int64)
		}

		if first.R.Organism != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Organism != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrganismUpepRefSeqEntries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrganismUpepRefSeqEntries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrganismUpepRefSeqEntries(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUpepOrganismToManySetOpOrganismUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepOrganism
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepOrganismDBTypes, false, strmangle.SetComplement(upepOrganismPrimaryKeyColumns, upepOrganismColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrganismUpepRefSeqEntries(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrganismUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrganismUpepRefSeqEntries(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrganismUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.OrganismID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.OrganismID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.OrganismID.Int64 {
		t.Error("foreign key was wrong value", a.ID, d.OrganismID.Int64)
	}
	if a.ID != e.OrganismID.Int64 {
		t.Error("foreign key was wrong value", a.ID, e.OrganismID.Int64)
	}

	if b.R.Organism != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Organism != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Organism != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Organism != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrganismUpepRefSeqEntries[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrganismUpepRefSeqEntries[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUpepOrganismToManyRemoveOpOrganismUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepOrganism
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepOrganismDBTypes, false, strmangle.SetComplement(upepOrganismPrimaryKeyColumns, upepOrganismColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrganismUpepRefSeqEntries(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrganismUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrganismUpepRefSeqEntries(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrganismUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.OrganismID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.OrganismID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Organism != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Organism != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Organism != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Organism != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrganismUpepRefSeqEntries) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrganismUpepRefSeqEntries[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrganismUpepRefSeqEntries[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUpepOrganismToOneUpepRefSeqDBUsingUpepRefSeqDB(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UpepOrganism
	var foreign UpepRefSeqDB

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, upepOrganismDBTypes, false, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, upepRefSeqDBDBTypes, false, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UpepRefSeqDBID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.UpepRefSeqDB(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UpepOrganismSlice{&local}
	if err = local.L.LoadUpepRefSeqDB(tx, false, (*[]*UpepOrganism)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.UpepRefSeqDB == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UpepRefSeqDB = nil
	if err = local.L.LoadUpepRefSeqDB(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.UpepRefSeqDB == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUpepOrganismToOneSetOpUpepRefSeqDBUsingUpepRefSeqDB(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepOrganism
	var b, c UpepRefSeqDB

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepOrganismDBTypes, false, strmangle.SetComplement(upepOrganismPrimaryKeyColumns, upepOrganismColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UpepRefSeqDB{&b, &c} {
		err = a.SetUpepRefSeqDB(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UpepRefSeqDB != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UpepOrganisms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UpepRefSeqDBID != x.ID {
			t.Error("foreign key was wrong value", a.UpepRefSeqDBID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UpepRefSeqDBID))
		reflect.Indirect(reflect.ValueOf(&a.UpepRefSeqDBID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UpepRefSeqDBID != x.ID {
			t.Error("foreign key was wrong value", a.UpepRefSeqDBID, x.ID)
		}
	}
}
func testUpepOrganismsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepOrganism.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUpepOrganismsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepOrganismSlice{upepOrganism}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUpepOrganismsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepOrganisms(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	upepOrganismDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `ID`: `bigint`, `Name`: `text`, `UpdatedAt`: `timestamp with time zone`, `UpepRefSeqDBID`: `bigint`}
	_                   = bytes.MinRead
)

func testUpepOrganismsUpdate(t *testing.T) {
	t.Parallel()

	if len(upepOrganismColumns) == len(upepOrganismPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	if err = upepOrganism.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUpepOrganismsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(upepOrganismColumns) == len(upepOrganismPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepOrganism := &UpepOrganism{}
	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepOrganism, upepOrganismDBTypes, true, upepOrganismPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(upepOrganismColumns, upepOrganismPrimaryKeyColumns) {
		fields = upepOrganismColumns
	} else {
		fields = strmangle.SetComplement(
			upepOrganismColumns,
			upepOrganismPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(upepOrganism))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UpepOrganismSlice{upepOrganism}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUpepOrganismsUpsert(t *testing.T) {
	t.Parallel()

	if len(upepOrganismColumns) == len(upepOrganismPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	upepOrganism := UpepOrganism{}
	if err = randomize.Struct(seed, &upepOrganism, upepOrganismDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepOrganism.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepOrganism: %s", err)
	}

	count, err := UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &upepOrganism, upepOrganismDBTypes, false, upepOrganismPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	if err = upepOrganism.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepOrganism: %s", err)
	}

	count, err = UpepOrganisms(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
