// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUpepRefSeqDBS(t *testing.T) {
	t.Parallel()

	query := UpepRefSeqDBS(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUpepRefSeqDBSDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepRefSeqDB.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepRefSeqDBSQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepRefSeqDBS(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepRefSeqDBSSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepRefSeqDBSlice{upepRefSeqDB}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUpepRefSeqDBSExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UpepRefSeqDBExists(tx, upepRefSeqDB.ID)
	if err != nil {
		t.Errorf("Unable to check if UpepRefSeqDB exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpepRefSeqDBExistsG to return true, but got false.")
	}
}
func testUpepRefSeqDBSFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	upepRefSeqDBFound, err := FindUpepRefSeqDB(tx, upepRefSeqDB.ID)
	if err != nil {
		t.Error(err)
	}

	if upepRefSeqDBFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUpepRefSeqDBSBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepRefSeqDBS(tx).Bind(upepRefSeqDB); err != nil {
		t.Error(err)
	}
}

func testUpepRefSeqDBSOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UpepRefSeqDBS(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpepRefSeqDBSAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDBOne := &UpepRefSeqDB{}
	upepRefSeqDBTwo := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDBOne, upepRefSeqDBDBTypes, false, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}
	if err = randomize.Struct(seed, upepRefSeqDBTwo, upepRefSeqDBDBTypes, false, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDBOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepRefSeqDBTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepRefSeqDBS(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpepRefSeqDBSCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	upepRefSeqDBOne := &UpepRefSeqDB{}
	upepRefSeqDBTwo := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDBOne, upepRefSeqDBDBTypes, false, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}
	if err = randomize.Struct(seed, upepRefSeqDBTwo, upepRefSeqDBDBTypes, false, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDBOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepRefSeqDBTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func upepRefSeqDBBeforeInsertHook(e boil.Executor, o *UpepRefSeqDB) error {
	*o = UpepRefSeqDB{}
	return nil
}

func upepRefSeqDBAfterInsertHook(e boil.Executor, o *UpepRefSeqDB) error {
	*o = UpepRefSeqDB{}
	return nil
}

func upepRefSeqDBAfterSelectHook(e boil.Executor, o *UpepRefSeqDB) error {
	*o = UpepRefSeqDB{}
	return nil
}

func upepRefSeqDBBeforeUpdateHook(e boil.Executor, o *UpepRefSeqDB) error {
	*o = UpepRefSeqDB{}
	return nil
}

func upepRefSeqDBAfterUpdateHook(e boil.Executor, o *UpepRefSeqDB) error {
	*o = UpepRefSeqDB{}
	return nil
}

func upepRefSeqDBBeforeDeleteHook(e boil.Executor, o *UpepRefSeqDB) error {
	*o = UpepRefSeqDB{}
	return nil
}

func upepRefSeqDBAfterDeleteHook(e boil.Executor, o *UpepRefSeqDB) error {
	*o = UpepRefSeqDB{}
	return nil
}

func upepRefSeqDBBeforeUpsertHook(e boil.Executor, o *UpepRefSeqDB) error {
	*o = UpepRefSeqDB{}
	return nil
}

func upepRefSeqDBAfterUpsertHook(e boil.Executor, o *UpepRefSeqDB) error {
	*o = UpepRefSeqDB{}
	return nil
}

func testUpepRefSeqDBSHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UpepRefSeqDB{}
	o := &UpepRefSeqDB{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, upepRefSeqDBDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB object: %s", err)
	}

	AddUpepRefSeqDBHook(boil.BeforeInsertHook, upepRefSeqDBBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	upepRefSeqDBBeforeInsertHooks = []UpepRefSeqDBHook{}

	AddUpepRefSeqDBHook(boil.AfterInsertHook, upepRefSeqDBAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	upepRefSeqDBAfterInsertHooks = []UpepRefSeqDBHook{}

	AddUpepRefSeqDBHook(boil.AfterSelectHook, upepRefSeqDBAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	upepRefSeqDBAfterSelectHooks = []UpepRefSeqDBHook{}

	AddUpepRefSeqDBHook(boil.BeforeUpdateHook, upepRefSeqDBBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	upepRefSeqDBBeforeUpdateHooks = []UpepRefSeqDBHook{}

	AddUpepRefSeqDBHook(boil.AfterUpdateHook, upepRefSeqDBAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	upepRefSeqDBAfterUpdateHooks = []UpepRefSeqDBHook{}

	AddUpepRefSeqDBHook(boil.BeforeDeleteHook, upepRefSeqDBBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	upepRefSeqDBBeforeDeleteHooks = []UpepRefSeqDBHook{}

	AddUpepRefSeqDBHook(boil.AfterDeleteHook, upepRefSeqDBAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	upepRefSeqDBAfterDeleteHooks = []UpepRefSeqDBHook{}

	AddUpepRefSeqDBHook(boil.BeforeUpsertHook, upepRefSeqDBBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	upepRefSeqDBBeforeUpsertHooks = []UpepRefSeqDBHook{}

	AddUpepRefSeqDBHook(boil.AfterUpsertHook, upepRefSeqDBAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	upepRefSeqDBAfterUpsertHooks = []UpepRefSeqDBHook{}
}
func testUpepRefSeqDBSInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepRefSeqDBSInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx, upepRefSeqDBColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepRefSeqDBToManyUpepAccessions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c UpepAccession

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepAccessionDBTypes, false, upepAccessionColumnsWithDefault...)
	randomize.Struct(seed, &c, upepAccessionDBTypes, false, upepAccessionColumnsWithDefault...)

	b.UpepRefSeqDBID = a.ID
	c.UpepRefSeqDBID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepAccession, err := a.UpepAccessions(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepAccession {
		if v.UpepRefSeqDBID == b.UpepRefSeqDBID {
			bFound = true
		}
		if v.UpepRefSeqDBID == c.UpepRefSeqDBID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepRefSeqDBSlice{&a}
	if err = a.L.LoadUpepAccessions(tx, false, (*[]*UpepRefSeqDB)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpepAccessions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UpepAccessions = nil
	if err = a.L.LoadUpepAccessions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpepAccessions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepAccession)
	}
}

func testUpepRefSeqDBToManyUpepBlastDBS(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c UpepBlastDB

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepBlastDBDBTypes, false, upepBlastDBColumnsWithDefault...)
	randomize.Struct(seed, &c, upepBlastDBDBTypes, false, upepBlastDBColumnsWithDefault...)

	b.UpepRefSeqDBID = a.ID
	c.UpepRefSeqDBID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepBlastDB, err := a.UpepBlastDBS(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepBlastDB {
		if v.UpepRefSeqDBID == b.UpepRefSeqDBID {
			bFound = true
		}
		if v.UpepRefSeqDBID == c.UpepRefSeqDBID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepRefSeqDBSlice{&a}
	if err = a.L.LoadUpepBlastDBS(tx, false, (*[]*UpepRefSeqDB)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpepBlastDBS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UpepBlastDBS = nil
	if err = a.L.LoadUpepBlastDBS(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpepBlastDBS); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepBlastDB)
	}
}

func testUpepRefSeqDBToManyUpepGeneIdentifiers(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c UpepGeneIdentifier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepGeneIdentifierDBTypes, false, upepGeneIdentifierColumnsWithDefault...)
	randomize.Struct(seed, &c, upepGeneIdentifierDBTypes, false, upepGeneIdentifierColumnsWithDefault...)

	b.UpepRefSeqDBID = a.ID
	c.UpepRefSeqDBID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepGeneIdentifier, err := a.UpepGeneIdentifiers(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepGeneIdentifier {
		if v.UpepRefSeqDBID == b.UpepRefSeqDBID {
			bFound = true
		}
		if v.UpepRefSeqDBID == c.UpepRefSeqDBID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepRefSeqDBSlice{&a}
	if err = a.L.LoadUpepGeneIdentifiers(tx, false, (*[]*UpepRefSeqDB)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpepGeneIdentifiers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UpepGeneIdentifiers = nil
	if err = a.L.LoadUpepGeneIdentifiers(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpepGeneIdentifiers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepGeneIdentifier)
	}
}

func testUpepRefSeqDBToManyUpepOrganisms(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c UpepOrganism

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepOrganismDBTypes, false, upepOrganismColumnsWithDefault...)
	randomize.Struct(seed, &c, upepOrganismDBTypes, false, upepOrganismColumnsWithDefault...)

	b.UpepRefSeqDBID = a.ID
	c.UpepRefSeqDBID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepOrganism, err := a.UpepOrganisms(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepOrganism {
		if v.UpepRefSeqDBID == b.UpepRefSeqDBID {
			bFound = true
		}
		if v.UpepRefSeqDBID == c.UpepRefSeqDBID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepRefSeqDBSlice{&a}
	if err = a.L.LoadUpepOrganisms(tx, false, (*[]*UpepRefSeqDB)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpepOrganisms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UpepOrganisms = nil
	if err = a.L.LoadUpepOrganisms(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UpepOrganisms); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepOrganism)
	}
}

func testUpepRefSeqDBToManyRefSeqDBUpepRefSeqEntries(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)
	randomize.Struct(seed, &c, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)

	b.RefSeqDBID.Valid = true
	c.RefSeqDBID.Valid = true
	b.RefSeqDBID.Int64 = a.ID
	c.RefSeqDBID.Int64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepRefSeqEntry, err := a.RefSeqDBUpepRefSeqEntries(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepRefSeqEntry {
		if v.RefSeqDBID.Int64 == b.RefSeqDBID.Int64 {
			bFound = true
		}
		if v.RefSeqDBID.Int64 == c.RefSeqDBID.Int64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepRefSeqDBSlice{&a}
	if err = a.L.LoadRefSeqDBUpepRefSeqEntries(tx, false, (*[]*UpepRefSeqDB)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RefSeqDBUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RefSeqDBUpepRefSeqEntries = nil
	if err = a.L.LoadRefSeqDBUpepRefSeqEntries(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RefSeqDBUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepRefSeqEntry)
	}
}

func testUpepRefSeqDBToManyAddOpUpepAccessions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c, d, e UpepAccession

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepAccession{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepAccessionDBTypes, false, strmangle.SetComplement(upepAccessionPrimaryKeyColumns, upepAccessionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepAccession{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUpepAccessions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UpepRefSeqDBID {
			t.Error("foreign key was wrong value", a.ID, first.UpepRefSeqDBID)
		}
		if a.ID != second.UpepRefSeqDBID {
			t.Error("foreign key was wrong value", a.ID, second.UpepRefSeqDBID)
		}

		if first.R.UpepRefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UpepRefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UpepAccessions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UpepAccessions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UpepAccessions(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUpepRefSeqDBToManyAddOpUpepBlastDBS(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c, d, e UpepBlastDB

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepBlastDB{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepBlastDBDBTypes, false, strmangle.SetComplement(upepBlastDBPrimaryKeyColumns, upepBlastDBColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepBlastDB{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUpepBlastDBS(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UpepRefSeqDBID {
			t.Error("foreign key was wrong value", a.ID, first.UpepRefSeqDBID)
		}
		if a.ID != second.UpepRefSeqDBID {
			t.Error("foreign key was wrong value", a.ID, second.UpepRefSeqDBID)
		}

		if first.R.UpepRefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UpepRefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UpepBlastDBS[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UpepBlastDBS[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UpepBlastDBS(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUpepRefSeqDBToManyAddOpUpepGeneIdentifiers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c, d, e UpepGeneIdentifier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepGeneIdentifier{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepGeneIdentifierDBTypes, false, strmangle.SetComplement(upepGeneIdentifierPrimaryKeyColumns, upepGeneIdentifierColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepGeneIdentifier{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUpepGeneIdentifiers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UpepRefSeqDBID {
			t.Error("foreign key was wrong value", a.ID, first.UpepRefSeqDBID)
		}
		if a.ID != second.UpepRefSeqDBID {
			t.Error("foreign key was wrong value", a.ID, second.UpepRefSeqDBID)
		}

		if first.R.UpepRefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UpepRefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UpepGeneIdentifiers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UpepGeneIdentifiers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UpepGeneIdentifiers(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUpepRefSeqDBToManyAddOpUpepOrganisms(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c, d, e UpepOrganism

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepOrganism{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepOrganismDBTypes, false, strmangle.SetComplement(upepOrganismPrimaryKeyColumns, upepOrganismColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepOrganism{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUpepOrganisms(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UpepRefSeqDBID {
			t.Error("foreign key was wrong value", a.ID, first.UpepRefSeqDBID)
		}
		if a.ID != second.UpepRefSeqDBID {
			t.Error("foreign key was wrong value", a.ID, second.UpepRefSeqDBID)
		}

		if first.R.UpepRefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.UpepRefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UpepOrganisms[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UpepOrganisms[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UpepOrganisms(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUpepRefSeqDBToManyAddOpRefSeqDBUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepRefSeqEntry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRefSeqDBUpepRefSeqEntries(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RefSeqDBID.Int64 {
			t.Error("foreign key was wrong value", a.ID, first.RefSeqDBID.Int64)
		}
		if a.ID != second.RefSeqDBID.Int64 {
			t.Error("foreign key was wrong value", a.ID, second.RefSeqDBID.Int64)
		}

		if first.R.RefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RefSeqDB != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RefSeqDBUpepRefSeqEntries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RefSeqDBUpepRefSeqEntries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RefSeqDBUpepRefSeqEntries(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUpepRefSeqDBToManySetOpRefSeqDBUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetRefSeqDBUpepRefSeqEntries(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RefSeqDBUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRefSeqDBUpepRefSeqEntries(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RefSeqDBUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RefSeqDBID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RefSeqDBID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.RefSeqDBID.Int64 {
		t.Error("foreign key was wrong value", a.ID, d.RefSeqDBID.Int64)
	}
	if a.ID != e.RefSeqDBID.Int64 {
		t.Error("foreign key was wrong value", a.ID, e.RefSeqDBID.Int64)
	}

	if b.R.RefSeqDB != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RefSeqDB != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RefSeqDB != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.RefSeqDB != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RefSeqDBUpepRefSeqEntries[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RefSeqDBUpepRefSeqEntries[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUpepRefSeqDBToManyRemoveOpRefSeqDBUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqDB
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddRefSeqDBUpepRefSeqEntries(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RefSeqDBUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRefSeqDBUpepRefSeqEntries(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RefSeqDBUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RefSeqDBID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RefSeqDBID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.RefSeqDB != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.RefSeqDB != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.RefSeqDB != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.RefSeqDB != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RefSeqDBUpepRefSeqEntries) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RefSeqDBUpepRefSeqEntries[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RefSeqDBUpepRefSeqEntries[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUpepRefSeqDBSReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepRefSeqDB.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUpepRefSeqDBSReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepRefSeqDBSlice{upepRefSeqDB}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUpepRefSeqDBSSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepRefSeqDBS(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	upepRefSeqDBDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `ID`: `bigint`, `Name`: `text`, `UpdatedAt`: `timestamp with time zone`, `Version`: `integer`}
	_                   = bytes.MinRead
)

func testUpepRefSeqDBSUpdate(t *testing.T) {
	t.Parallel()

	if len(upepRefSeqDBColumns) == len(upepRefSeqDBPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	if err = upepRefSeqDB.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUpepRefSeqDBSSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(upepRefSeqDBColumns) == len(upepRefSeqDBPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepRefSeqDB := &UpepRefSeqDB{}
	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepRefSeqDB, upepRefSeqDBDBTypes, true, upepRefSeqDBPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(upepRefSeqDBColumns, upepRefSeqDBPrimaryKeyColumns) {
		fields = upepRefSeqDBColumns
	} else {
		fields = strmangle.SetComplement(
			upepRefSeqDBColumns,
			upepRefSeqDBPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(upepRefSeqDB))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UpepRefSeqDBSlice{upepRefSeqDB}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUpepRefSeqDBSUpsert(t *testing.T) {
	t.Parallel()

	if len(upepRefSeqDBColumns) == len(upepRefSeqDBPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	upepRefSeqDB := UpepRefSeqDB{}
	if err = randomize.Struct(seed, &upepRefSeqDB, upepRefSeqDBDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqDB.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepRefSeqDB: %s", err)
	}

	count, err := UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &upepRefSeqDB, upepRefSeqDBDBTypes, false, upepRefSeqDBPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	if err = upepRefSeqDB.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepRefSeqDB: %s", err)
	}

	count, err = UpepRefSeqDBS(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
