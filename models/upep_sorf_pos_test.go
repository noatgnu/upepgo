// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUpepSorfPos(t *testing.T) {
	t.Parallel()

	query := UpepSorfPos(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUpepSorfPosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepSorfPo.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepSorfPosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepSorfPos(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepSorfPosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepSorfPoSlice{upepSorfPo}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUpepSorfPosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UpepSorfPoExists(tx, upepSorfPo.ID)
	if err != nil {
		t.Errorf("Unable to check if UpepSorfPo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpepSorfPoExistsG to return true, but got false.")
	}
}
func testUpepSorfPosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	upepSorfPoFound, err := FindUpepSorfPo(tx, upepSorfPo.ID)
	if err != nil {
		t.Error(err)
	}

	if upepSorfPoFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUpepSorfPosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepSorfPos(tx).Bind(upepSorfPo); err != nil {
		t.Error(err)
	}
}

func testUpepSorfPosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UpepSorfPos(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpepSorfPosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPoOne := &UpepSorfPo{}
	upepSorfPoTwo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPoOne, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}
	if err = randomize.Struct(seed, upepSorfPoTwo, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPoOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepSorfPoTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepSorfPos(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpepSorfPosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	upepSorfPoOne := &UpepSorfPo{}
	upepSorfPoTwo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPoOne, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}
	if err = randomize.Struct(seed, upepSorfPoTwo, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPoOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepSorfPoTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func upepSorfPoBeforeInsertHook(e boil.Executor, o *UpepSorfPo) error {
	*o = UpepSorfPo{}
	return nil
}

func upepSorfPoAfterInsertHook(e boil.Executor, o *UpepSorfPo) error {
	*o = UpepSorfPo{}
	return nil
}

func upepSorfPoAfterSelectHook(e boil.Executor, o *UpepSorfPo) error {
	*o = UpepSorfPo{}
	return nil
}

func upepSorfPoBeforeUpdateHook(e boil.Executor, o *UpepSorfPo) error {
	*o = UpepSorfPo{}
	return nil
}

func upepSorfPoAfterUpdateHook(e boil.Executor, o *UpepSorfPo) error {
	*o = UpepSorfPo{}
	return nil
}

func upepSorfPoBeforeDeleteHook(e boil.Executor, o *UpepSorfPo) error {
	*o = UpepSorfPo{}
	return nil
}

func upepSorfPoAfterDeleteHook(e boil.Executor, o *UpepSorfPo) error {
	*o = UpepSorfPo{}
	return nil
}

func upepSorfPoBeforeUpsertHook(e boil.Executor, o *UpepSorfPo) error {
	*o = UpepSorfPo{}
	return nil
}

func upepSorfPoAfterUpsertHook(e boil.Executor, o *UpepSorfPo) error {
	*o = UpepSorfPo{}
	return nil
}

func testUpepSorfPosHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UpepSorfPo{}
	o := &UpepSorfPo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, upepSorfPoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo object: %s", err)
	}

	AddUpepSorfPoHook(boil.BeforeInsertHook, upepSorfPoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	upepSorfPoBeforeInsertHooks = []UpepSorfPoHook{}

	AddUpepSorfPoHook(boil.AfterInsertHook, upepSorfPoAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	upepSorfPoAfterInsertHooks = []UpepSorfPoHook{}

	AddUpepSorfPoHook(boil.AfterSelectHook, upepSorfPoAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	upepSorfPoAfterSelectHooks = []UpepSorfPoHook{}

	AddUpepSorfPoHook(boil.BeforeUpdateHook, upepSorfPoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	upepSorfPoBeforeUpdateHooks = []UpepSorfPoHook{}

	AddUpepSorfPoHook(boil.AfterUpdateHook, upepSorfPoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	upepSorfPoAfterUpdateHooks = []UpepSorfPoHook{}

	AddUpepSorfPoHook(boil.BeforeDeleteHook, upepSorfPoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	upepSorfPoBeforeDeleteHooks = []UpepSorfPoHook{}

	AddUpepSorfPoHook(boil.AfterDeleteHook, upepSorfPoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	upepSorfPoAfterDeleteHooks = []UpepSorfPoHook{}

	AddUpepSorfPoHook(boil.BeforeUpsertHook, upepSorfPoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	upepSorfPoBeforeUpsertHooks = []UpepSorfPoHook{}

	AddUpepSorfPoHook(boil.AfterUpsertHook, upepSorfPoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	upepSorfPoAfterUpsertHooks = []UpepSorfPoHook{}
}
func testUpepSorfPosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepSorfPosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx, upepSorfPoColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepSorfPoToOneUpepRefSeqEntryUsingRefSeqEntry(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UpepSorfPo
	var foreign UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RefSeqEntryID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.RefSeqEntry(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UpepSorfPoSlice{&local}
	if err = local.L.LoadRefSeqEntry(tx, false, (*[]*UpepSorfPo)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.RefSeqEntry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RefSeqEntry = nil
	if err = local.L.LoadRefSeqEntry(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.RefSeqEntry == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUpepSorfPoToOneUpepCodonUsingStartingCodon(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UpepSorfPo
	var foreign UpepCodon

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, upepCodonDBTypes, false, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.StartingCodonID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.StartingCodon(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UpepSorfPoSlice{&local}
	if err = local.L.LoadStartingCodon(tx, false, (*[]*UpepSorfPo)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.StartingCodon == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StartingCodon = nil
	if err = local.L.LoadStartingCodon(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.StartingCodon == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUpepSorfPoToOneUpepCodonUsingEndingCodon(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UpepSorfPo
	var foreign UpepCodon

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, upepCodonDBTypes, false, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.EndingCodonID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.EndingCodon(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UpepSorfPoSlice{&local}
	if err = local.L.LoadEndingCodon(tx, false, (*[]*UpepSorfPo)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.EndingCodon == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.EndingCodon = nil
	if err = local.L.LoadEndingCodon(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.EndingCodon == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUpepSorfPoToOneSetOpUpepRefSeqEntryUsingRefSeqEntry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepSorfPo
	var b, c UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepSorfPoDBTypes, false, strmangle.SetComplement(upepSorfPoPrimaryKeyColumns, upepSorfPoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UpepRefSeqEntry{&b, &c} {
		err = a.SetRefSeqEntry(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RefSeqEntry != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RefSeqEntryUpepSorfPos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RefSeqEntryID != x.ID {
			t.Error("foreign key was wrong value", a.RefSeqEntryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RefSeqEntryID))
		reflect.Indirect(reflect.ValueOf(&a.RefSeqEntryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RefSeqEntryID != x.ID {
			t.Error("foreign key was wrong value", a.RefSeqEntryID, x.ID)
		}
	}
}
func testUpepSorfPoToOneSetOpUpepCodonUsingStartingCodon(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepSorfPo
	var b, c UpepCodon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepSorfPoDBTypes, false, strmangle.SetComplement(upepSorfPoPrimaryKeyColumns, upepSorfPoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepCodonDBTypes, false, strmangle.SetComplement(upepCodonPrimaryKeyColumns, upepCodonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, upepCodonDBTypes, false, strmangle.SetComplement(upepCodonPrimaryKeyColumns, upepCodonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UpepCodon{&b, &c} {
		err = a.SetStartingCodon(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StartingCodon != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StartingCodonUpepSorfPos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StartingCodonID != x.ID {
			t.Error("foreign key was wrong value", a.StartingCodonID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StartingCodonID))
		reflect.Indirect(reflect.ValueOf(&a.StartingCodonID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StartingCodonID != x.ID {
			t.Error("foreign key was wrong value", a.StartingCodonID, x.ID)
		}
	}
}
func testUpepSorfPoToOneSetOpUpepCodonUsingEndingCodon(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepSorfPo
	var b, c UpepCodon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepSorfPoDBTypes, false, strmangle.SetComplement(upepSorfPoPrimaryKeyColumns, upepSorfPoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepCodonDBTypes, false, strmangle.SetComplement(upepCodonPrimaryKeyColumns, upepCodonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, upepCodonDBTypes, false, strmangle.SetComplement(upepCodonPrimaryKeyColumns, upepCodonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UpepCodon{&b, &c} {
		err = a.SetEndingCodon(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.EndingCodon != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EndingCodonUpepSorfPos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EndingCodonID != x.ID {
			t.Error("foreign key was wrong value", a.EndingCodonID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EndingCodonID))
		reflect.Indirect(reflect.ValueOf(&a.EndingCodonID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EndingCodonID != x.ID {
			t.Error("foreign key was wrong value", a.EndingCodonID, x.ID)
		}
	}
}
func testUpepSorfPosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepSorfPo.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUpepSorfPosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepSorfPoSlice{upepSorfPo}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUpepSorfPosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepSorfPos(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	upepSorfPoDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `EndingCodonID`: `bigint`, `EndingPosition`: `integer`, `ID`: `bigint`, `RefSeqEntryID`: `bigint`, `StartingCodonID`: `bigint`, `StartingPosition`: `integer`, `UpdatedAt`: `timestamp with time zone`}
	_                 = bytes.MinRead
)

func testUpepSorfPosUpdate(t *testing.T) {
	t.Parallel()

	if len(upepSorfPoColumns) == len(upepSorfPoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	if err = upepSorfPo.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUpepSorfPosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(upepSorfPoColumns) == len(upepSorfPoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepSorfPo := &UpepSorfPo{}
	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepSorfPo, upepSorfPoDBTypes, true, upepSorfPoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(upepSorfPoColumns, upepSorfPoPrimaryKeyColumns) {
		fields = upepSorfPoColumns
	} else {
		fields = strmangle.SetComplement(
			upepSorfPoColumns,
			upepSorfPoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(upepSorfPo))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UpepSorfPoSlice{upepSorfPo}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUpepSorfPosUpsert(t *testing.T) {
	t.Parallel()

	if len(upepSorfPoColumns) == len(upepSorfPoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	upepSorfPo := UpepSorfPo{}
	if err = randomize.Struct(seed, &upepSorfPo, upepSorfPoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepSorfPo.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepSorfPo: %s", err)
	}

	count, err := UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &upepSorfPo, upepSorfPoDBTypes, false, upepSorfPoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepSorfPo struct: %s", err)
	}

	if err = upepSorfPo.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepSorfPo: %s", err)
	}

	count, err = UpepSorfPos(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
