// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// UpepSorfPosition is an object representing the database table.
type UpepSorfPosition struct {
	ID               int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	StartingPosition int       `boil:"starting_position" json:"starting_position" toml:"starting_position" yaml:"starting_position"`
	EndingPosition   int       `boil:"ending_position" json:"ending_position" toml:"ending_position" yaml:"ending_position"`
	RefSeqEntryID    int64     `boil:"ref_seq_entry_id" json:"ref_seq_entry_id" toml:"ref_seq_entry_id" yaml:"ref_seq_entry_id"`
	StartingCodonID  int64     `boil:"starting_codon_id" json:"starting_codon_id" toml:"starting_codon_id" yaml:"starting_codon_id"`
	EndingCodonID    int64     `boil:"ending_codon_id" json:"ending_codon_id" toml:"ending_codon_id" yaml:"ending_codon_id"`

	R *upepSorfPositionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L upepSorfPositionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpepSorfPositionColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	StartingPosition string
	EndingPosition   string
	RefSeqEntryID    string
	StartingCodonID  string
	EndingCodonID    string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	StartingPosition: "starting_position",
	EndingPosition:   "ending_position",
	RefSeqEntryID:    "ref_seq_entry_id",
	StartingCodonID:  "starting_codon_id",
	EndingCodonID:    "ending_codon_id",
}

// upepSorfPositionR is where relationships are stored.
type upepSorfPositionR struct {
	RefSeqEntry   *UpepRefSeqEntry
	StartingCodon *UpepCodon
	EndingCodon   *UpepCodon
}

// upepSorfPositionL is where Load methods for each relationship are stored.
type upepSorfPositionL struct{}

var (
	upepSorfPositionColumns               = []string{"id", "created_at", "updated_at", "starting_position", "ending_position", "ref_seq_entry_id", "starting_codon_id", "ending_codon_id"}
	upepSorfPositionColumnsWithoutDefault = []string{"created_at", "updated_at", "starting_position", "ending_position", "ref_seq_entry_id", "starting_codon_id", "ending_codon_id"}
	upepSorfPositionColumnsWithDefault    = []string{"id"}
	upepSorfPositionPrimaryKeyColumns     = []string{"id"}
)

type (
	// UpepSorfPositionSlice is an alias for a slice of pointers to UpepSorfPosition.
	// This should generally be used opposed to []UpepSorfPosition.
	UpepSorfPositionSlice []*UpepSorfPosition
	// UpepSorfPositionHook is the signature for custom UpepSorfPosition hook methods
	UpepSorfPositionHook func(boil.Executor, *UpepSorfPosition) error

	upepSorfPositionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	upepSorfPositionType                 = reflect.TypeOf(&UpepSorfPosition{})
	upepSorfPositionMapping              = queries.MakeStructMapping(upepSorfPositionType)
	upepSorfPositionPrimaryKeyMapping, _ = queries.BindMapping(upepSorfPositionType, upepSorfPositionMapping, upepSorfPositionPrimaryKeyColumns)
	upepSorfPositionInsertCacheMut       sync.RWMutex
	upepSorfPositionInsertCache          = make(map[string]insertCache)
	upepSorfPositionUpdateCacheMut       sync.RWMutex
	upepSorfPositionUpdateCache          = make(map[string]updateCache)
	upepSorfPositionUpsertCacheMut       sync.RWMutex
	upepSorfPositionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var upepSorfPositionBeforeInsertHooks []UpepSorfPositionHook
var upepSorfPositionBeforeUpdateHooks []UpepSorfPositionHook
var upepSorfPositionBeforeDeleteHooks []UpepSorfPositionHook
var upepSorfPositionBeforeUpsertHooks []UpepSorfPositionHook

var upepSorfPositionAfterInsertHooks []UpepSorfPositionHook
var upepSorfPositionAfterSelectHooks []UpepSorfPositionHook
var upepSorfPositionAfterUpdateHooks []UpepSorfPositionHook
var upepSorfPositionAfterDeleteHooks []UpepSorfPositionHook
var upepSorfPositionAfterUpsertHooks []UpepSorfPositionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UpepSorfPosition) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepSorfPositionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UpepSorfPosition) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepSorfPositionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UpepSorfPosition) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepSorfPositionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UpepSorfPosition) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepSorfPositionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UpepSorfPosition) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepSorfPositionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UpepSorfPosition) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range upepSorfPositionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UpepSorfPosition) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepSorfPositionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UpepSorfPosition) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepSorfPositionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UpepSorfPosition) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepSorfPositionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUpepSorfPositionHook registers your hook function for all future operations.
func AddUpepSorfPositionHook(hookPoint boil.HookPoint, upepSorfPositionHook UpepSorfPositionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		upepSorfPositionBeforeInsertHooks = append(upepSorfPositionBeforeInsertHooks, upepSorfPositionHook)
	case boil.BeforeUpdateHook:
		upepSorfPositionBeforeUpdateHooks = append(upepSorfPositionBeforeUpdateHooks, upepSorfPositionHook)
	case boil.BeforeDeleteHook:
		upepSorfPositionBeforeDeleteHooks = append(upepSorfPositionBeforeDeleteHooks, upepSorfPositionHook)
	case boil.BeforeUpsertHook:
		upepSorfPositionBeforeUpsertHooks = append(upepSorfPositionBeforeUpsertHooks, upepSorfPositionHook)
	case boil.AfterInsertHook:
		upepSorfPositionAfterInsertHooks = append(upepSorfPositionAfterInsertHooks, upepSorfPositionHook)
	case boil.AfterSelectHook:
		upepSorfPositionAfterSelectHooks = append(upepSorfPositionAfterSelectHooks, upepSorfPositionHook)
	case boil.AfterUpdateHook:
		upepSorfPositionAfterUpdateHooks = append(upepSorfPositionAfterUpdateHooks, upepSorfPositionHook)
	case boil.AfterDeleteHook:
		upepSorfPositionAfterDeleteHooks = append(upepSorfPositionAfterDeleteHooks, upepSorfPositionHook)
	case boil.AfterUpsertHook:
		upepSorfPositionAfterUpsertHooks = append(upepSorfPositionAfterUpsertHooks, upepSorfPositionHook)
	}
}

// OneP returns a single upepSorfPosition record from the query, and panics on error.
func (q upepSorfPositionQuery) OneP() *UpepSorfPosition {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single upepSorfPosition record from the query.
func (q upepSorfPositionQuery) One() (*UpepSorfPosition, error) {
	o := &UpepSorfPosition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upep_sorf_positions")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UpepSorfPosition records from the query, and panics on error.
func (q upepSorfPositionQuery) AllP() UpepSorfPositionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UpepSorfPosition records from the query.
func (q upepSorfPositionQuery) All() (UpepSorfPositionSlice, error) {
	var o []*UpepSorfPosition

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UpepSorfPosition slice")
	}

	if len(upepSorfPositionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UpepSorfPosition records in the query, and panics on error.
func (q upepSorfPositionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UpepSorfPosition records in the query.
func (q upepSorfPositionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upep_sorf_positions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q upepSorfPositionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q upepSorfPositionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upep_sorf_positions exists")
	}

	return count > 0, nil
}

// RefSeqEntryG pointed to by the foreign key.
func (o *UpepSorfPosition) RefSeqEntryG(mods ...qm.QueryMod) upepRefSeqEntryQuery {
	return o.RefSeqEntry(boil.GetDB(), mods...)
}

// RefSeqEntry pointed to by the foreign key.
func (o *UpepSorfPosition) RefSeqEntry(exec boil.Executor, mods ...qm.QueryMod) upepRefSeqEntryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RefSeqEntryID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepRefSeqEntries(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_ref_seq_entries\"")

	return query
}

// StartingCodonG pointed to by the foreign key.
func (o *UpepSorfPosition) StartingCodonG(mods ...qm.QueryMod) upepCodonQuery {
	return o.StartingCodon(boil.GetDB(), mods...)
}

// StartingCodon pointed to by the foreign key.
func (o *UpepSorfPosition) StartingCodon(exec boil.Executor, mods ...qm.QueryMod) upepCodonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.StartingCodonID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepCodons(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_codon\"")

	return query
}

// EndingCodonG pointed to by the foreign key.
func (o *UpepSorfPosition) EndingCodonG(mods ...qm.QueryMod) upepCodonQuery {
	return o.EndingCodon(boil.GetDB(), mods...)
}

// EndingCodon pointed to by the foreign key.
func (o *UpepSorfPosition) EndingCodon(exec boil.Executor, mods ...qm.QueryMod) upepCodonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EndingCodonID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepCodons(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_codon\"")

	return query
} // LoadRefSeqEntry allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepSorfPositionL) LoadRefSeqEntry(e boil.Executor, singular bool, maybeUpepSorfPosition interface{}) error {
	var slice []*UpepSorfPosition
	var object *UpepSorfPosition

	count := 1
	if singular {
		object = maybeUpepSorfPosition.(*UpepSorfPosition)
	} else {
		slice = *maybeUpepSorfPosition.(*[]*UpepSorfPosition)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepSorfPositionR{}
		}
		args[0] = object.RefSeqEntryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepSorfPositionR{}
			}
			args[i] = obj.RefSeqEntryID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_ref_seq_entries\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepRefSeqEntry")
	}
	defer results.Close()

	var resultSlice []*UpepRefSeqEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepRefSeqEntry")
	}

	if len(upepSorfPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.RefSeqEntry = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RefSeqEntryID == foreign.ID {
				local.R.RefSeqEntry = foreign
				break
			}
		}
	}

	return nil
}

// LoadStartingCodon allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepSorfPositionL) LoadStartingCodon(e boil.Executor, singular bool, maybeUpepSorfPosition interface{}) error {
	var slice []*UpepSorfPosition
	var object *UpepSorfPosition

	count := 1
	if singular {
		object = maybeUpepSorfPosition.(*UpepSorfPosition)
	} else {
		slice = *maybeUpepSorfPosition.(*[]*UpepSorfPosition)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepSorfPositionR{}
		}
		args[0] = object.StartingCodonID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepSorfPositionR{}
			}
			args[i] = obj.StartingCodonID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_codon\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepCodon")
	}
	defer results.Close()

	var resultSlice []*UpepCodon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepCodon")
	}

	if len(upepSorfPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.StartingCodon = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StartingCodonID == foreign.ID {
				local.R.StartingCodon = foreign
				break
			}
		}
	}

	return nil
}

// LoadEndingCodon allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepSorfPositionL) LoadEndingCodon(e boil.Executor, singular bool, maybeUpepSorfPosition interface{}) error {
	var slice []*UpepSorfPosition
	var object *UpepSorfPosition

	count := 1
	if singular {
		object = maybeUpepSorfPosition.(*UpepSorfPosition)
	} else {
		slice = *maybeUpepSorfPosition.(*[]*UpepSorfPosition)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepSorfPositionR{}
		}
		args[0] = object.EndingCodonID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepSorfPositionR{}
			}
			args[i] = obj.EndingCodonID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_codon\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepCodon")
	}
	defer results.Close()

	var resultSlice []*UpepCodon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepCodon")
	}

	if len(upepSorfPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.EndingCodon = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EndingCodonID == foreign.ID {
				local.R.EndingCodon = foreign
				break
			}
		}
	}

	return nil
}

// SetRefSeqEntryG of the upep_sorf_position to the related item.
// Sets o.R.RefSeqEntry to related.
// Adds o to related.R.RefSeqEntryUpepSorfPositions.
// Uses the global database handle.
func (o *UpepSorfPosition) SetRefSeqEntryG(insert bool, related *UpepRefSeqEntry) error {
	return o.SetRefSeqEntry(boil.GetDB(), insert, related)
}

// SetRefSeqEntryP of the upep_sorf_position to the related item.
// Sets o.R.RefSeqEntry to related.
// Adds o to related.R.RefSeqEntryUpepSorfPositions.
// Panics on error.
func (o *UpepSorfPosition) SetRefSeqEntryP(exec boil.Executor, insert bool, related *UpepRefSeqEntry) {
	if err := o.SetRefSeqEntry(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRefSeqEntryGP of the upep_sorf_position to the related item.
// Sets o.R.RefSeqEntry to related.
// Adds o to related.R.RefSeqEntryUpepSorfPositions.
// Uses the global database handle and panics on error.
func (o *UpepSorfPosition) SetRefSeqEntryGP(insert bool, related *UpepRefSeqEntry) {
	if err := o.SetRefSeqEntry(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRefSeqEntry of the upep_sorf_position to the related item.
// Sets o.R.RefSeqEntry to related.
// Adds o to related.R.RefSeqEntryUpepSorfPositions.
func (o *UpepSorfPosition) SetRefSeqEntry(exec boil.Executor, insert bool, related *UpepRefSeqEntry) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_sorf_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ref_seq_entry_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepSorfPositionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RefSeqEntryID = related.ID

	if o.R == nil {
		o.R = &upepSorfPositionR{
			RefSeqEntry: related,
		}
	} else {
		o.R.RefSeqEntry = related
	}

	if related.R == nil {
		related.R = &upepRefSeqEntryR{
			RefSeqEntryUpepSorfPositions: UpepSorfPositionSlice{o},
		}
	} else {
		related.R.RefSeqEntryUpepSorfPositions = append(related.R.RefSeqEntryUpepSorfPositions, o)
	}

	return nil
}

// SetStartingCodonG of the upep_sorf_position to the related item.
// Sets o.R.StartingCodon to related.
// Adds o to related.R.StartingCodonUpepSorfPositions.
// Uses the global database handle.
func (o *UpepSorfPosition) SetStartingCodonG(insert bool, related *UpepCodon) error {
	return o.SetStartingCodon(boil.GetDB(), insert, related)
}

// SetStartingCodonP of the upep_sorf_position to the related item.
// Sets o.R.StartingCodon to related.
// Adds o to related.R.StartingCodonUpepSorfPositions.
// Panics on error.
func (o *UpepSorfPosition) SetStartingCodonP(exec boil.Executor, insert bool, related *UpepCodon) {
	if err := o.SetStartingCodon(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStartingCodonGP of the upep_sorf_position to the related item.
// Sets o.R.StartingCodon to related.
// Adds o to related.R.StartingCodonUpepSorfPositions.
// Uses the global database handle and panics on error.
func (o *UpepSorfPosition) SetStartingCodonGP(insert bool, related *UpepCodon) {
	if err := o.SetStartingCodon(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStartingCodon of the upep_sorf_position to the related item.
// Sets o.R.StartingCodon to related.
// Adds o to related.R.StartingCodonUpepSorfPositions.
func (o *UpepSorfPosition) SetStartingCodon(exec boil.Executor, insert bool, related *UpepCodon) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_sorf_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"starting_codon_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepSorfPositionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StartingCodonID = related.ID

	if o.R == nil {
		o.R = &upepSorfPositionR{
			StartingCodon: related,
		}
	} else {
		o.R.StartingCodon = related
	}

	if related.R == nil {
		related.R = &upepCodonR{
			StartingCodonUpepSorfPositions: UpepSorfPositionSlice{o},
		}
	} else {
		related.R.StartingCodonUpepSorfPositions = append(related.R.StartingCodonUpepSorfPositions, o)
	}

	return nil
}

// SetEndingCodonG of the upep_sorf_position to the related item.
// Sets o.R.EndingCodon to related.
// Adds o to related.R.EndingCodonUpepSorfPositions.
// Uses the global database handle.
func (o *UpepSorfPosition) SetEndingCodonG(insert bool, related *UpepCodon) error {
	return o.SetEndingCodon(boil.GetDB(), insert, related)
}

// SetEndingCodonP of the upep_sorf_position to the related item.
// Sets o.R.EndingCodon to related.
// Adds o to related.R.EndingCodonUpepSorfPositions.
// Panics on error.
func (o *UpepSorfPosition) SetEndingCodonP(exec boil.Executor, insert bool, related *UpepCodon) {
	if err := o.SetEndingCodon(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEndingCodonGP of the upep_sorf_position to the related item.
// Sets o.R.EndingCodon to related.
// Adds o to related.R.EndingCodonUpepSorfPositions.
// Uses the global database handle and panics on error.
func (o *UpepSorfPosition) SetEndingCodonGP(insert bool, related *UpepCodon) {
	if err := o.SetEndingCodon(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEndingCodon of the upep_sorf_position to the related item.
// Sets o.R.EndingCodon to related.
// Adds o to related.R.EndingCodonUpepSorfPositions.
func (o *UpepSorfPosition) SetEndingCodon(exec boil.Executor, insert bool, related *UpepCodon) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_sorf_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ending_codon_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepSorfPositionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EndingCodonID = related.ID

	if o.R == nil {
		o.R = &upepSorfPositionR{
			EndingCodon: related,
		}
	} else {
		o.R.EndingCodon = related
	}

	if related.R == nil {
		related.R = &upepCodonR{
			EndingCodonUpepSorfPositions: UpepSorfPositionSlice{o},
		}
	} else {
		related.R.EndingCodonUpepSorfPositions = append(related.R.EndingCodonUpepSorfPositions, o)
	}

	return nil
}

// UpepSorfPositionsG retrieves all records.
func UpepSorfPositionsG(mods ...qm.QueryMod) upepSorfPositionQuery {
	return UpepSorfPositions(boil.GetDB(), mods...)
}

// UpepSorfPositions retrieves all the records using an executor.
func UpepSorfPositions(exec boil.Executor, mods ...qm.QueryMod) upepSorfPositionQuery {
	mods = append(mods, qm.From("\"upep\".\"upep_sorf_positions\""))
	return upepSorfPositionQuery{NewQuery(exec, mods...)}
}

// FindUpepSorfPositionG retrieves a single record by ID.
func FindUpepSorfPositionG(id int64, selectCols ...string) (*UpepSorfPosition, error) {
	return FindUpepSorfPosition(boil.GetDB(), id, selectCols...)
}

// FindUpepSorfPositionGP retrieves a single record by ID, and panics on error.
func FindUpepSorfPositionGP(id int64, selectCols ...string) *UpepSorfPosition {
	retobj, err := FindUpepSorfPosition(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUpepSorfPosition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpepSorfPosition(exec boil.Executor, id int64, selectCols ...string) (*UpepSorfPosition, error) {
	upepSorfPositionObj := &UpepSorfPosition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upep\".\"upep_sorf_positions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(upepSorfPositionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upep_sorf_positions")
	}

	return upepSorfPositionObj, nil
}

// FindUpepSorfPositionP retrieves a single record by ID with an executor, and panics on error.
func FindUpepSorfPositionP(exec boil.Executor, id int64, selectCols ...string) *UpepSorfPosition {
	retobj, err := FindUpepSorfPosition(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UpepSorfPosition) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UpepSorfPosition) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UpepSorfPosition) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UpepSorfPosition) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_sorf_positions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepSorfPositionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	upepSorfPositionInsertCacheMut.RLock()
	cache, cached := upepSorfPositionInsertCache[key]
	upepSorfPositionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			upepSorfPositionColumns,
			upepSorfPositionColumnsWithDefault,
			upepSorfPositionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(upepSorfPositionType, upepSorfPositionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(upepSorfPositionType, upepSorfPositionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upep\".\"upep_sorf_positions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upep\".\"upep_sorf_positions\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upep_sorf_positions")
	}

	if !cached {
		upepSorfPositionInsertCacheMut.Lock()
		upepSorfPositionInsertCache[key] = cache
		upepSorfPositionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UpepSorfPosition record. See Update for
// whitelist behavior description.
func (o *UpepSorfPosition) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UpepSorfPosition record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UpepSorfPosition) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UpepSorfPosition, and panics on error.
// See Update for whitelist behavior description.
func (o *UpepSorfPosition) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UpepSorfPosition.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UpepSorfPosition) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	upepSorfPositionUpdateCacheMut.RLock()
	cache, cached := upepSorfPositionUpdateCache[key]
	upepSorfPositionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			upepSorfPositionColumns,
			upepSorfPositionPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update upep_sorf_positions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upep\".\"upep_sorf_positions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, upepSorfPositionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(upepSorfPositionType, upepSorfPositionMapping, append(wl, upepSorfPositionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update upep_sorf_positions row")
	}

	if !cached {
		upepSorfPositionUpdateCacheMut.Lock()
		upepSorfPositionUpdateCache[key] = cache
		upepSorfPositionUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q upepSorfPositionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q upepSorfPositionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for upep_sorf_positions")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UpepSorfPositionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UpepSorfPositionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UpepSorfPositionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpepSorfPositionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepSorfPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upep\".\"upep_sorf_positions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, upepSorfPositionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in upepSorfPosition slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UpepSorfPosition) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UpepSorfPosition) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UpepSorfPosition) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UpepSorfPosition) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_sorf_positions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepSorfPositionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	upepSorfPositionUpsertCacheMut.RLock()
	cache, cached := upepSorfPositionUpsertCache[key]
	upepSorfPositionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			upepSorfPositionColumns,
			upepSorfPositionColumnsWithDefault,
			upepSorfPositionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			upepSorfPositionColumns,
			upepSorfPositionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert upep_sorf_positions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(upepSorfPositionPrimaryKeyColumns))
			copy(conflict, upepSorfPositionPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"upep\".\"upep_sorf_positions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(upepSorfPositionType, upepSorfPositionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(upepSorfPositionType, upepSorfPositionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upep_sorf_positions")
	}

	if !cached {
		upepSorfPositionUpsertCacheMut.Lock()
		upepSorfPositionUpsertCache[key] = cache
		upepSorfPositionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UpepSorfPosition record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepSorfPosition) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UpepSorfPosition record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UpepSorfPosition) DeleteG() error {
	if o == nil {
		return errors.New("models: no UpepSorfPosition provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UpepSorfPosition record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepSorfPosition) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UpepSorfPosition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UpepSorfPosition) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepSorfPosition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), upepSorfPositionPrimaryKeyMapping)
	sql := "DELETE FROM \"upep\".\"upep_sorf_positions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from upep_sorf_positions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q upepSorfPositionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q upepSorfPositionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no upepSorfPositionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upep_sorf_positions")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UpepSorfPositionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UpepSorfPositionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UpepSorfPosition slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UpepSorfPositionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpepSorfPositionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepSorfPosition slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(upepSorfPositionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepSorfPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upep\".\"upep_sorf_positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepSorfPositionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upepSorfPosition slice")
	}

	if len(upepSorfPositionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UpepSorfPosition) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UpepSorfPosition) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UpepSorfPosition) ReloadG() error {
	if o == nil {
		return errors.New("models: no UpepSorfPosition provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UpepSorfPosition) Reload(exec boil.Executor) error {
	ret, err := FindUpepSorfPosition(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepSorfPositionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepSorfPositionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepSorfPositionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UpepSorfPositionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepSorfPositionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	upepSorfPositions := UpepSorfPositionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepSorfPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upep\".\"upep_sorf_positions\".* FROM \"upep\".\"upep_sorf_positions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepSorfPositionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&upepSorfPositions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UpepSorfPositionSlice")
	}

	*o = upepSorfPositions

	return nil
}

// UpepSorfPositionExists checks if the UpepSorfPosition row exists.
func UpepSorfPositionExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upep\".\"upep_sorf_positions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upep_sorf_positions exists")
	}

	return exists, nil
}

// UpepSorfPositionExistsG checks if the UpepSorfPosition row exists.
func UpepSorfPositionExistsG(id int64) (bool, error) {
	return UpepSorfPositionExists(boil.GetDB(), id)
}

// UpepSorfPositionExistsGP checks if the UpepSorfPosition row exists. Panics on error.
func UpepSorfPositionExistsGP(id int64) bool {
	e, err := UpepSorfPositionExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UpepSorfPositionExistsP checks if the UpepSorfPosition row exists. Panics on error.
func UpepSorfPositionExistsP(exec boil.Executor, id int64) bool {
	e, err := UpepSorfPositionExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
