// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUpepAccessions(t *testing.T) {
	t.Parallel()

	query := UpepAccessions(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUpepAccessionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepAccession.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepAccessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepAccessions(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepAccessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepAccessionSlice{upepAccession}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUpepAccessionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UpepAccessionExists(tx, upepAccession.ID)
	if err != nil {
		t.Errorf("Unable to check if UpepAccession exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpepAccessionExistsG to return true, but got false.")
	}
}
func testUpepAccessionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	upepAccessionFound, err := FindUpepAccession(tx, upepAccession.ID)
	if err != nil {
		t.Error(err)
	}

	if upepAccessionFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUpepAccessionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepAccessions(tx).Bind(upepAccession); err != nil {
		t.Error(err)
	}
}

func testUpepAccessionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UpepAccessions(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpepAccessionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccessionOne := &UpepAccession{}
	upepAccessionTwo := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccessionOne, upepAccessionDBTypes, false, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}
	if err = randomize.Struct(seed, upepAccessionTwo, upepAccessionDBTypes, false, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccessionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepAccessionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepAccessions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpepAccessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	upepAccessionOne := &UpepAccession{}
	upepAccessionTwo := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccessionOne, upepAccessionDBTypes, false, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}
	if err = randomize.Struct(seed, upepAccessionTwo, upepAccessionDBTypes, false, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccessionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepAccessionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func upepAccessionBeforeInsertHook(e boil.Executor, o *UpepAccession) error {
	*o = UpepAccession{}
	return nil
}

func upepAccessionAfterInsertHook(e boil.Executor, o *UpepAccession) error {
	*o = UpepAccession{}
	return nil
}

func upepAccessionAfterSelectHook(e boil.Executor, o *UpepAccession) error {
	*o = UpepAccession{}
	return nil
}

func upepAccessionBeforeUpdateHook(e boil.Executor, o *UpepAccession) error {
	*o = UpepAccession{}
	return nil
}

func upepAccessionAfterUpdateHook(e boil.Executor, o *UpepAccession) error {
	*o = UpepAccession{}
	return nil
}

func upepAccessionBeforeDeleteHook(e boil.Executor, o *UpepAccession) error {
	*o = UpepAccession{}
	return nil
}

func upepAccessionAfterDeleteHook(e boil.Executor, o *UpepAccession) error {
	*o = UpepAccession{}
	return nil
}

func upepAccessionBeforeUpsertHook(e boil.Executor, o *UpepAccession) error {
	*o = UpepAccession{}
	return nil
}

func upepAccessionAfterUpsertHook(e boil.Executor, o *UpepAccession) error {
	*o = UpepAccession{}
	return nil
}

func testUpepAccessionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UpepAccession{}
	o := &UpepAccession{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, upepAccessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UpepAccession object: %s", err)
	}

	AddUpepAccessionHook(boil.BeforeInsertHook, upepAccessionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	upepAccessionBeforeInsertHooks = []UpepAccessionHook{}

	AddUpepAccessionHook(boil.AfterInsertHook, upepAccessionAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	upepAccessionAfterInsertHooks = []UpepAccessionHook{}

	AddUpepAccessionHook(boil.AfterSelectHook, upepAccessionAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	upepAccessionAfterSelectHooks = []UpepAccessionHook{}

	AddUpepAccessionHook(boil.BeforeUpdateHook, upepAccessionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	upepAccessionBeforeUpdateHooks = []UpepAccessionHook{}

	AddUpepAccessionHook(boil.AfterUpdateHook, upepAccessionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	upepAccessionAfterUpdateHooks = []UpepAccessionHook{}

	AddUpepAccessionHook(boil.BeforeDeleteHook, upepAccessionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	upepAccessionBeforeDeleteHooks = []UpepAccessionHook{}

	AddUpepAccessionHook(boil.AfterDeleteHook, upepAccessionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	upepAccessionAfterDeleteHooks = []UpepAccessionHook{}

	AddUpepAccessionHook(boil.BeforeUpsertHook, upepAccessionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	upepAccessionBeforeUpsertHooks = []UpepAccessionHook{}

	AddUpepAccessionHook(boil.AfterUpsertHook, upepAccessionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	upepAccessionAfterUpsertHooks = []UpepAccessionHook{}
}
func testUpepAccessionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepAccessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx, upepAccessionColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepAccessionToManyAccessionUpepRefSeqEntries(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepAccession
	var b, c UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)
	randomize.Struct(seed, &c, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)

	b.AccessionID.Valid = true
	c.AccessionID.Valid = true
	b.AccessionID.Int64 = a.ID
	c.AccessionID.Int64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepRefSeqEntry, err := a.AccessionUpepRefSeqEntries(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepRefSeqEntry {
		if v.AccessionID.Int64 == b.AccessionID.Int64 {
			bFound = true
		}
		if v.AccessionID.Int64 == c.AccessionID.Int64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepAccessionSlice{&a}
	if err = a.L.LoadAccessionUpepRefSeqEntries(tx, false, (*[]*UpepAccession)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AccessionUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AccessionUpepRefSeqEntries = nil
	if err = a.L.LoadAccessionUpepRefSeqEntries(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AccessionUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepRefSeqEntry)
	}
}

func testUpepAccessionToManyAddOpAccessionUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepAccession
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepAccessionDBTypes, false, strmangle.SetComplement(upepAccessionPrimaryKeyColumns, upepAccessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepRefSeqEntry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAccessionUpepRefSeqEntries(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AccessionID.Int64 {
			t.Error("foreign key was wrong value", a.ID, first.AccessionID.Int64)
		}
		if a.ID != second.AccessionID.Int64 {
			t.Error("foreign key was wrong value", a.ID, second.AccessionID.Int64)
		}

		if first.R.Accession != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Accession != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AccessionUpepRefSeqEntries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AccessionUpepRefSeqEntries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AccessionUpepRefSeqEntries(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUpepAccessionToManySetOpAccessionUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepAccession
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepAccessionDBTypes, false, strmangle.SetComplement(upepAccessionPrimaryKeyColumns, upepAccessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetAccessionUpepRefSeqEntries(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AccessionUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAccessionUpepRefSeqEntries(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AccessionUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.AccessionID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.AccessionID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.AccessionID.Int64 {
		t.Error("foreign key was wrong value", a.ID, d.AccessionID.Int64)
	}
	if a.ID != e.AccessionID.Int64 {
		t.Error("foreign key was wrong value", a.ID, e.AccessionID.Int64)
	}

	if b.R.Accession != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Accession != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Accession != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Accession != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AccessionUpepRefSeqEntries[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AccessionUpepRefSeqEntries[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUpepAccessionToManyRemoveOpAccessionUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepAccession
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepAccessionDBTypes, false, strmangle.SetComplement(upepAccessionPrimaryKeyColumns, upepAccessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddAccessionUpepRefSeqEntries(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AccessionUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAccessionUpepRefSeqEntries(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AccessionUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.AccessionID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.AccessionID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Accession != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Accession != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Accession != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Accession != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AccessionUpepRefSeqEntries) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AccessionUpepRefSeqEntries[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AccessionUpepRefSeqEntries[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUpepAccessionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepAccession.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUpepAccessionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepAccessionSlice{upepAccession}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUpepAccessionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepAccessions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	upepAccessionDBTypes = map[string]string{`Accession`: `text`, `CreatedAt`: `timestamp with time zone`, `ID`: `bigint`, `UpdatedAt`: `timestamp with time zone`}
	_                    = bytes.MinRead
)

func testUpepAccessionsUpdate(t *testing.T) {
	t.Parallel()

	if len(upepAccessionColumns) == len(upepAccessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	if err = upepAccession.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUpepAccessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(upepAccessionColumns) == len(upepAccessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepAccession := &UpepAccession{}
	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepAccession, upepAccessionDBTypes, true, upepAccessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(upepAccessionColumns, upepAccessionPrimaryKeyColumns) {
		fields = upepAccessionColumns
	} else {
		fields = strmangle.SetComplement(
			upepAccessionColumns,
			upepAccessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(upepAccession))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UpepAccessionSlice{upepAccession}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUpepAccessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(upepAccessionColumns) == len(upepAccessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	upepAccession := UpepAccession{}
	if err = randomize.Struct(seed, &upepAccession, upepAccessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepAccession.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepAccession: %s", err)
	}

	count, err := UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &upepAccession, upepAccessionDBTypes, false, upepAccessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	if err = upepAccession.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepAccession: %s", err)
	}

	count, err = UpepAccessions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
