// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUpepRefSeqEntries(t *testing.T) {
	t.Parallel()

	query := UpepRefSeqEntries(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUpepRefSeqEntriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepRefSeqEntry.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepRefSeqEntriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepRefSeqEntries(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepRefSeqEntriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepRefSeqEntrySlice{upepRefSeqEntry}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUpepRefSeqEntriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UpepRefSeqEntryExists(tx, upepRefSeqEntry.ID)
	if err != nil {
		t.Errorf("Unable to check if UpepRefSeqEntry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpepRefSeqEntryExistsG to return true, but got false.")
	}
}
func testUpepRefSeqEntriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	upepRefSeqEntryFound, err := FindUpepRefSeqEntry(tx, upepRefSeqEntry.ID)
	if err != nil {
		t.Error(err)
	}

	if upepRefSeqEntryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUpepRefSeqEntriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepRefSeqEntries(tx).Bind(upepRefSeqEntry); err != nil {
		t.Error(err)
	}
}

func testUpepRefSeqEntriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UpepRefSeqEntries(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpepRefSeqEntriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntryOne := &UpepRefSeqEntry{}
	upepRefSeqEntryTwo := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntryOne, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, upepRefSeqEntryTwo, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepRefSeqEntryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepRefSeqEntries(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpepRefSeqEntriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	upepRefSeqEntryOne := &UpepRefSeqEntry{}
	upepRefSeqEntryTwo := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntryOne, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, upepRefSeqEntryTwo, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepRefSeqEntryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func upepRefSeqEntryBeforeInsertHook(e boil.Executor, o *UpepRefSeqEntry) error {
	*o = UpepRefSeqEntry{}
	return nil
}

func upepRefSeqEntryAfterInsertHook(e boil.Executor, o *UpepRefSeqEntry) error {
	*o = UpepRefSeqEntry{}
	return nil
}

func upepRefSeqEntryAfterSelectHook(e boil.Executor, o *UpepRefSeqEntry) error {
	*o = UpepRefSeqEntry{}
	return nil
}

func upepRefSeqEntryBeforeUpdateHook(e boil.Executor, o *UpepRefSeqEntry) error {
	*o = UpepRefSeqEntry{}
	return nil
}

func upepRefSeqEntryAfterUpdateHook(e boil.Executor, o *UpepRefSeqEntry) error {
	*o = UpepRefSeqEntry{}
	return nil
}

func upepRefSeqEntryBeforeDeleteHook(e boil.Executor, o *UpepRefSeqEntry) error {
	*o = UpepRefSeqEntry{}
	return nil
}

func upepRefSeqEntryAfterDeleteHook(e boil.Executor, o *UpepRefSeqEntry) error {
	*o = UpepRefSeqEntry{}
	return nil
}

func upepRefSeqEntryBeforeUpsertHook(e boil.Executor, o *UpepRefSeqEntry) error {
	*o = UpepRefSeqEntry{}
	return nil
}

func upepRefSeqEntryAfterUpsertHook(e boil.Executor, o *UpepRefSeqEntry) error {
	*o = UpepRefSeqEntry{}
	return nil
}

func testUpepRefSeqEntriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UpepRefSeqEntry{}
	o := &UpepRefSeqEntry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, upepRefSeqEntryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry object: %s", err)
	}

	AddUpepRefSeqEntryHook(boil.BeforeInsertHook, upepRefSeqEntryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	upepRefSeqEntryBeforeInsertHooks = []UpepRefSeqEntryHook{}

	AddUpepRefSeqEntryHook(boil.AfterInsertHook, upepRefSeqEntryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	upepRefSeqEntryAfterInsertHooks = []UpepRefSeqEntryHook{}

	AddUpepRefSeqEntryHook(boil.AfterSelectHook, upepRefSeqEntryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	upepRefSeqEntryAfterSelectHooks = []UpepRefSeqEntryHook{}

	AddUpepRefSeqEntryHook(boil.BeforeUpdateHook, upepRefSeqEntryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	upepRefSeqEntryBeforeUpdateHooks = []UpepRefSeqEntryHook{}

	AddUpepRefSeqEntryHook(boil.AfterUpdateHook, upepRefSeqEntryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	upepRefSeqEntryAfterUpdateHooks = []UpepRefSeqEntryHook{}

	AddUpepRefSeqEntryHook(boil.BeforeDeleteHook, upepRefSeqEntryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	upepRefSeqEntryBeforeDeleteHooks = []UpepRefSeqEntryHook{}

	AddUpepRefSeqEntryHook(boil.AfterDeleteHook, upepRefSeqEntryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	upepRefSeqEntryAfterDeleteHooks = []UpepRefSeqEntryHook{}

	AddUpepRefSeqEntryHook(boil.BeforeUpsertHook, upepRefSeqEntryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	upepRefSeqEntryBeforeUpsertHooks = []UpepRefSeqEntryHook{}

	AddUpepRefSeqEntryHook(boil.AfterUpsertHook, upepRefSeqEntryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	upepRefSeqEntryAfterUpsertHooks = []UpepRefSeqEntryHook{}
}
func testUpepRefSeqEntriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepRefSeqEntriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx, upepRefSeqEntryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepRefSeqEntryToManyRefSeqEntryUpepFeatures(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b, c UpepFeature

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepFeatureDBTypes, false, upepFeatureColumnsWithDefault...)
	randomize.Struct(seed, &c, upepFeatureDBTypes, false, upepFeatureColumnsWithDefault...)

	b.RefSeqEntryID = a.ID
	c.RefSeqEntryID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepFeature, err := a.RefSeqEntryUpepFeatures(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepFeature {
		if v.RefSeqEntryID == b.RefSeqEntryID {
			bFound = true
		}
		if v.RefSeqEntryID == c.RefSeqEntryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepRefSeqEntrySlice{&a}
	if err = a.L.LoadRefSeqEntryUpepFeatures(tx, false, (*[]*UpepRefSeqEntry)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RefSeqEntryUpepFeatures); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RefSeqEntryUpepFeatures = nil
	if err = a.L.LoadRefSeqEntryUpepFeatures(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RefSeqEntryUpepFeatures); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepFeature)
	}
}

func testUpepRefSeqEntryToManyRefSeqEntryUpepSorfPos(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b, c UpepSorfPo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...)
	randomize.Struct(seed, &c, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...)

	b.RefSeqEntryID = a.ID
	c.RefSeqEntryID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepSorfPo, err := a.RefSeqEntryUpepSorfPos(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepSorfPo {
		if v.RefSeqEntryID == b.RefSeqEntryID {
			bFound = true
		}
		if v.RefSeqEntryID == c.RefSeqEntryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepRefSeqEntrySlice{&a}
	if err = a.L.LoadRefSeqEntryUpepSorfPos(tx, false, (*[]*UpepRefSeqEntry)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RefSeqEntryUpepSorfPos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RefSeqEntryUpepSorfPos = nil
	if err = a.L.LoadRefSeqEntryUpepSorfPos(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RefSeqEntryUpepSorfPos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepSorfPo)
	}
}

func testUpepRefSeqEntryToManyAddOpRefSeqEntryUpepFeatures(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b, c, d, e UpepFeature

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepFeature{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepFeatureDBTypes, false, strmangle.SetComplement(upepFeaturePrimaryKeyColumns, upepFeatureColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepFeature{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRefSeqEntryUpepFeatures(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RefSeqEntryID {
			t.Error("foreign key was wrong value", a.ID, first.RefSeqEntryID)
		}
		if a.ID != second.RefSeqEntryID {
			t.Error("foreign key was wrong value", a.ID, second.RefSeqEntryID)
		}

		if first.R.RefSeqEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RefSeqEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RefSeqEntryUpepFeatures[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RefSeqEntryUpepFeatures[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RefSeqEntryUpepFeatures(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUpepRefSeqEntryToManyAddOpRefSeqEntryUpepSorfPos(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b, c, d, e UpepSorfPo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepSorfPo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepSorfPoDBTypes, false, strmangle.SetComplement(upepSorfPoPrimaryKeyColumns, upepSorfPoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepSorfPo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRefSeqEntryUpepSorfPos(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RefSeqEntryID {
			t.Error("foreign key was wrong value", a.ID, first.RefSeqEntryID)
		}
		if a.ID != second.RefSeqEntryID {
			t.Error("foreign key was wrong value", a.ID, second.RefSeqEntryID)
		}

		if first.R.RefSeqEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.RefSeqEntry != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RefSeqEntryUpepSorfPos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RefSeqEntryUpepSorfPos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RefSeqEntryUpepSorfPos(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUpepRefSeqEntryToOneUpepOrganismUsingOrganism(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UpepRefSeqEntry
	var foreign UpepOrganism

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, upepOrganismDBTypes, false, upepOrganismColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepOrganism struct: %s", err)
	}

	local.OrganismID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.OrganismID.Int64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Organism(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UpepRefSeqEntrySlice{&local}
	if err = local.L.LoadOrganism(tx, false, (*[]*UpepRefSeqEntry)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Organism == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Organism = nil
	if err = local.L.LoadOrganism(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Organism == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUpepRefSeqEntryToOneUpepMolecularTypeUsingMolecularType(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UpepRefSeqEntry
	var foreign UpepMolecularType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, upepMolecularTypeDBTypes, false, upepMolecularTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepMolecularType struct: %s", err)
	}

	local.MolecularTypeID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.MolecularTypeID.Int64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.MolecularType(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UpepRefSeqEntrySlice{&local}
	if err = local.L.LoadMolecularType(tx, false, (*[]*UpepRefSeqEntry)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.MolecularType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MolecularType = nil
	if err = local.L.LoadMolecularType(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.MolecularType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUpepRefSeqEntryToOneUpepAccessionUsingAccession(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UpepRefSeqEntry
	var foreign UpepAccession

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, upepAccessionDBTypes, false, upepAccessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepAccession struct: %s", err)
	}

	local.AccessionID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.AccessionID.Int64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Accession(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UpepRefSeqEntrySlice{&local}
	if err = local.L.LoadAccession(tx, false, (*[]*UpepRefSeqEntry)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Accession == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Accession = nil
	if err = local.L.LoadAccession(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Accession == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUpepRefSeqEntryToOneUpepGeneIdentifierUsingGi(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UpepRefSeqEntry
	var foreign UpepGeneIdentifier

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, upepGeneIdentifierDBTypes, false, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	local.GiID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.GiID.Int64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Gi(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UpepRefSeqEntrySlice{&local}
	if err = local.L.LoadGi(tx, false, (*[]*UpepRefSeqEntry)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Gi == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Gi = nil
	if err = local.L.LoadGi(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Gi == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUpepRefSeqEntryToOneUpepRefSeqDBUsingRefSeqDB(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UpepRefSeqEntry
	var foreign UpepRefSeqDB

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, upepRefSeqDBDBTypes, false, upepRefSeqDBColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqDB struct: %s", err)
	}

	local.RefSeqDBID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RefSeqDBID.Int64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.RefSeqDB(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UpepRefSeqEntrySlice{&local}
	if err = local.L.LoadRefSeqDB(tx, false, (*[]*UpepRefSeqEntry)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.RefSeqDB == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RefSeqDB = nil
	if err = local.L.LoadRefSeqDB(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.RefSeqDB == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUpepRefSeqEntryToOneSetOpUpepOrganismUsingOrganism(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b, c UpepOrganism

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepOrganismDBTypes, false, strmangle.SetComplement(upepOrganismPrimaryKeyColumns, upepOrganismColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, upepOrganismDBTypes, false, strmangle.SetComplement(upepOrganismPrimaryKeyColumns, upepOrganismColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UpepOrganism{&b, &c} {
		err = a.SetOrganism(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Organism != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrganismUpepRefSeqEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrganismID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.OrganismID.Int64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrganismID.Int64))
		reflect.Indirect(reflect.ValueOf(&a.OrganismID.Int64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrganismID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.OrganismID.Int64, x.ID)
		}
	}
}

func testUpepRefSeqEntryToOneRemoveOpUpepOrganismUsingOrganism(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b UpepOrganism

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepOrganismDBTypes, false, strmangle.SetComplement(upepOrganismPrimaryKeyColumns, upepOrganismColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrganism(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrganism(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Organism(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Organism != nil {
		t.Error("R struct entry should be nil")
	}

	if a.OrganismID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OrganismUpepRefSeqEntries) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUpepRefSeqEntryToOneSetOpUpepMolecularTypeUsingMolecularType(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b, c UpepMolecularType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepMolecularTypeDBTypes, false, strmangle.SetComplement(upepMolecularTypePrimaryKeyColumns, upepMolecularTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, upepMolecularTypeDBTypes, false, strmangle.SetComplement(upepMolecularTypePrimaryKeyColumns, upepMolecularTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UpepMolecularType{&b, &c} {
		err = a.SetMolecularType(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MolecularType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MolecularTypeUpepRefSeqEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MolecularTypeID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.MolecularTypeID.Int64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MolecularTypeID.Int64))
		reflect.Indirect(reflect.ValueOf(&a.MolecularTypeID.Int64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MolecularTypeID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.MolecularTypeID.Int64, x.ID)
		}
	}
}

func testUpepRefSeqEntryToOneRemoveOpUpepMolecularTypeUsingMolecularType(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b UpepMolecularType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepMolecularTypeDBTypes, false, strmangle.SetComplement(upepMolecularTypePrimaryKeyColumns, upepMolecularTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMolecularType(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMolecularType(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MolecularType(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MolecularType != nil {
		t.Error("R struct entry should be nil")
	}

	if a.MolecularTypeID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MolecularTypeUpepRefSeqEntries) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUpepRefSeqEntryToOneSetOpUpepAccessionUsingAccession(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b, c UpepAccession

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepAccessionDBTypes, false, strmangle.SetComplement(upepAccessionPrimaryKeyColumns, upepAccessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, upepAccessionDBTypes, false, strmangle.SetComplement(upepAccessionPrimaryKeyColumns, upepAccessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UpepAccession{&b, &c} {
		err = a.SetAccession(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Accession != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccessionUpepRefSeqEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AccessionID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.AccessionID.Int64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccessionID.Int64))
		reflect.Indirect(reflect.ValueOf(&a.AccessionID.Int64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AccessionID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.AccessionID.Int64, x.ID)
		}
	}
}

func testUpepRefSeqEntryToOneRemoveOpUpepAccessionUsingAccession(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b UpepAccession

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepAccessionDBTypes, false, strmangle.SetComplement(upepAccessionPrimaryKeyColumns, upepAccessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAccession(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAccession(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Accession(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Accession != nil {
		t.Error("R struct entry should be nil")
	}

	if a.AccessionID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AccessionUpepRefSeqEntries) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUpepRefSeqEntryToOneSetOpUpepGeneIdentifierUsingGi(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b, c UpepGeneIdentifier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepGeneIdentifierDBTypes, false, strmangle.SetComplement(upepGeneIdentifierPrimaryKeyColumns, upepGeneIdentifierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, upepGeneIdentifierDBTypes, false, strmangle.SetComplement(upepGeneIdentifierPrimaryKeyColumns, upepGeneIdentifierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UpepGeneIdentifier{&b, &c} {
		err = a.SetGi(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Gi != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GiUpepRefSeqEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GiID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.GiID.Int64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GiID.Int64))
		reflect.Indirect(reflect.ValueOf(&a.GiID.Int64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GiID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.GiID.Int64, x.ID)
		}
	}
}

func testUpepRefSeqEntryToOneRemoveOpUpepGeneIdentifierUsingGi(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b UpepGeneIdentifier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepGeneIdentifierDBTypes, false, strmangle.SetComplement(upepGeneIdentifierPrimaryKeyColumns, upepGeneIdentifierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGi(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGi(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Gi(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Gi != nil {
		t.Error("R struct entry should be nil")
	}

	if a.GiID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GiUpepRefSeqEntries) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUpepRefSeqEntryToOneSetOpUpepRefSeqDBUsingRefSeqDB(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b, c UpepRefSeqDB

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UpepRefSeqDB{&b, &c} {
		err = a.SetRefSeqDB(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RefSeqDB != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RefSeqDBUpepRefSeqEntries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RefSeqDBID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.RefSeqDBID.Int64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RefSeqDBID.Int64))
		reflect.Indirect(reflect.ValueOf(&a.RefSeqDBID.Int64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RefSeqDBID.Int64 != x.ID {
			t.Error("foreign key was wrong value", a.RefSeqDBID.Int64, x.ID)
		}
	}
}

func testUpepRefSeqEntryToOneRemoveOpUpepRefSeqDBUsingRefSeqDB(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepRefSeqEntry
	var b UpepRefSeqDB

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, upepRefSeqDBDBTypes, false, strmangle.SetComplement(upepRefSeqDBPrimaryKeyColumns, upepRefSeqDBColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRefSeqDB(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRefSeqDB(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.RefSeqDB(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.RefSeqDB != nil {
		t.Error("R struct entry should be nil")
	}

	if a.RefSeqDBID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RefSeqDBUpepRefSeqEntries) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUpepRefSeqEntriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepRefSeqEntry.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUpepRefSeqEntriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepRefSeqEntrySlice{upepRefSeqEntry}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUpepRefSeqEntriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepRefSeqEntries(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	upepRefSeqEntryDBTypes = map[string]string{`AccessionID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `GiID`: `bigint`, `ID`: `bigint`, `MolecularTypeID`: `bigint`, `Name`: `character varying`, `OrganismID`: `bigint`, `RefSeqDBID`: `bigint`, `RefSeqSequence`: `text`, `UpdatedAt`: `timestamp with time zone`}
	_                      = bytes.MinRead
)

func testUpepRefSeqEntriesUpdate(t *testing.T) {
	t.Parallel()

	if len(upepRefSeqEntryColumns) == len(upepRefSeqEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	if err = upepRefSeqEntry.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUpepRefSeqEntriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(upepRefSeqEntryColumns) == len(upepRefSeqEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepRefSeqEntry := &UpepRefSeqEntry{}
	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepRefSeqEntry, upepRefSeqEntryDBTypes, true, upepRefSeqEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(upepRefSeqEntryColumns, upepRefSeqEntryPrimaryKeyColumns) {
		fields = upepRefSeqEntryColumns
	} else {
		fields = strmangle.SetComplement(
			upepRefSeqEntryColumns,
			upepRefSeqEntryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(upepRefSeqEntry))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UpepRefSeqEntrySlice{upepRefSeqEntry}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUpepRefSeqEntriesUpsert(t *testing.T) {
	t.Parallel()

	if len(upepRefSeqEntryColumns) == len(upepRefSeqEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	upepRefSeqEntry := UpepRefSeqEntry{}
	if err = randomize.Struct(seed, &upepRefSeqEntry, upepRefSeqEntryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepRefSeqEntry.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepRefSeqEntry: %s", err)
	}

	count, err := UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &upepRefSeqEntry, upepRefSeqEntryDBTypes, false, upepRefSeqEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepRefSeqEntry struct: %s", err)
	}

	if err = upepRefSeqEntry.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepRefSeqEntry: %s", err)
	}

	count, err = UpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
