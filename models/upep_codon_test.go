// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUpepCodons(t *testing.T) {
	t.Parallel()

	query := UpepCodons(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUpepCodonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepCodon.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepCodonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepCodons(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepCodonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepCodonSlice{upepCodon}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUpepCodonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UpepCodonExists(tx, upepCodon.ID)
	if err != nil {
		t.Errorf("Unable to check if UpepCodon exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpepCodonExistsG to return true, but got false.")
	}
}
func testUpepCodonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	upepCodonFound, err := FindUpepCodon(tx, upepCodon.ID)
	if err != nil {
		t.Error(err)
	}

	if upepCodonFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUpepCodonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepCodons(tx).Bind(upepCodon); err != nil {
		t.Error(err)
	}
}

func testUpepCodonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UpepCodons(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpepCodonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodonOne := &UpepCodon{}
	upepCodonTwo := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodonOne, upepCodonDBTypes, false, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}
	if err = randomize.Struct(seed, upepCodonTwo, upepCodonDBTypes, false, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodonOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepCodonTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepCodons(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpepCodonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	upepCodonOne := &UpepCodon{}
	upepCodonTwo := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodonOne, upepCodonDBTypes, false, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}
	if err = randomize.Struct(seed, upepCodonTwo, upepCodonDBTypes, false, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodonOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepCodonTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func upepCodonBeforeInsertHook(e boil.Executor, o *UpepCodon) error {
	*o = UpepCodon{}
	return nil
}

func upepCodonAfterInsertHook(e boil.Executor, o *UpepCodon) error {
	*o = UpepCodon{}
	return nil
}

func upepCodonAfterSelectHook(e boil.Executor, o *UpepCodon) error {
	*o = UpepCodon{}
	return nil
}

func upepCodonBeforeUpdateHook(e boil.Executor, o *UpepCodon) error {
	*o = UpepCodon{}
	return nil
}

func upepCodonAfterUpdateHook(e boil.Executor, o *UpepCodon) error {
	*o = UpepCodon{}
	return nil
}

func upepCodonBeforeDeleteHook(e boil.Executor, o *UpepCodon) error {
	*o = UpepCodon{}
	return nil
}

func upepCodonAfterDeleteHook(e boil.Executor, o *UpepCodon) error {
	*o = UpepCodon{}
	return nil
}

func upepCodonBeforeUpsertHook(e boil.Executor, o *UpepCodon) error {
	*o = UpepCodon{}
	return nil
}

func upepCodonAfterUpsertHook(e boil.Executor, o *UpepCodon) error {
	*o = UpepCodon{}
	return nil
}

func testUpepCodonsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UpepCodon{}
	o := &UpepCodon{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, upepCodonDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UpepCodon object: %s", err)
	}

	AddUpepCodonHook(boil.BeforeInsertHook, upepCodonBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	upepCodonBeforeInsertHooks = []UpepCodonHook{}

	AddUpepCodonHook(boil.AfterInsertHook, upepCodonAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	upepCodonAfterInsertHooks = []UpepCodonHook{}

	AddUpepCodonHook(boil.AfterSelectHook, upepCodonAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	upepCodonAfterSelectHooks = []UpepCodonHook{}

	AddUpepCodonHook(boil.BeforeUpdateHook, upepCodonBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	upepCodonBeforeUpdateHooks = []UpepCodonHook{}

	AddUpepCodonHook(boil.AfterUpdateHook, upepCodonAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	upepCodonAfterUpdateHooks = []UpepCodonHook{}

	AddUpepCodonHook(boil.BeforeDeleteHook, upepCodonBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	upepCodonBeforeDeleteHooks = []UpepCodonHook{}

	AddUpepCodonHook(boil.AfterDeleteHook, upepCodonAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	upepCodonAfterDeleteHooks = []UpepCodonHook{}

	AddUpepCodonHook(boil.BeforeUpsertHook, upepCodonBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	upepCodonBeforeUpsertHooks = []UpepCodonHook{}

	AddUpepCodonHook(boil.AfterUpsertHook, upepCodonAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	upepCodonAfterUpsertHooks = []UpepCodonHook{}
}
func testUpepCodonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepCodonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx, upepCodonColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepCodonToManyStartingCodonUpepSorfPos(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepCodon
	var b, c UpepSorfPo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...)
	randomize.Struct(seed, &c, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...)

	b.StartingCodonID = a.ID
	c.StartingCodonID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepSorfPo, err := a.StartingCodonUpepSorfPos(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepSorfPo {
		if v.StartingCodonID == b.StartingCodonID {
			bFound = true
		}
		if v.StartingCodonID == c.StartingCodonID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepCodonSlice{&a}
	if err = a.L.LoadStartingCodonUpepSorfPos(tx, false, (*[]*UpepCodon)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StartingCodonUpepSorfPos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StartingCodonUpepSorfPos = nil
	if err = a.L.LoadStartingCodonUpepSorfPos(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StartingCodonUpepSorfPos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepSorfPo)
	}
}

func testUpepCodonToManyEndingCodonUpepSorfPos(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepCodon
	var b, c UpepSorfPo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...)
	randomize.Struct(seed, &c, upepSorfPoDBTypes, false, upepSorfPoColumnsWithDefault...)

	b.EndingCodonID = a.ID
	c.EndingCodonID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepSorfPo, err := a.EndingCodonUpepSorfPos(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepSorfPo {
		if v.EndingCodonID == b.EndingCodonID {
			bFound = true
		}
		if v.EndingCodonID == c.EndingCodonID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepCodonSlice{&a}
	if err = a.L.LoadEndingCodonUpepSorfPos(tx, false, (*[]*UpepCodon)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EndingCodonUpepSorfPos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EndingCodonUpepSorfPos = nil
	if err = a.L.LoadEndingCodonUpepSorfPos(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EndingCodonUpepSorfPos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepSorfPo)
	}
}

func testUpepCodonToManyAddOpStartingCodonUpepSorfPos(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepCodon
	var b, c, d, e UpepSorfPo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepCodonDBTypes, false, strmangle.SetComplement(upepCodonPrimaryKeyColumns, upepCodonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepSorfPo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepSorfPoDBTypes, false, strmangle.SetComplement(upepSorfPoPrimaryKeyColumns, upepSorfPoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepSorfPo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStartingCodonUpepSorfPos(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.StartingCodonID {
			t.Error("foreign key was wrong value", a.ID, first.StartingCodonID)
		}
		if a.ID != second.StartingCodonID {
			t.Error("foreign key was wrong value", a.ID, second.StartingCodonID)
		}

		if first.R.StartingCodon != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.StartingCodon != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.StartingCodonUpepSorfPos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StartingCodonUpepSorfPos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StartingCodonUpepSorfPos(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUpepCodonToManyAddOpEndingCodonUpepSorfPos(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepCodon
	var b, c, d, e UpepSorfPo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepCodonDBTypes, false, strmangle.SetComplement(upepCodonPrimaryKeyColumns, upepCodonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepSorfPo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepSorfPoDBTypes, false, strmangle.SetComplement(upepSorfPoPrimaryKeyColumns, upepSorfPoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepSorfPo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEndingCodonUpepSorfPos(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EndingCodonID {
			t.Error("foreign key was wrong value", a.ID, first.EndingCodonID)
		}
		if a.ID != second.EndingCodonID {
			t.Error("foreign key was wrong value", a.ID, second.EndingCodonID)
		}

		if first.R.EndingCodon != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.EndingCodon != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EndingCodonUpepSorfPos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EndingCodonUpepSorfPos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EndingCodonUpepSorfPos(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUpepCodonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepCodon.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUpepCodonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepCodonSlice{upepCodon}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUpepCodonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepCodons(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	upepCodonDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `EndingCodon`: `boolean`, `ID`: `bigint`, `Sequence`: `character`, `StartingCodon`: `boolean`, `UpdatedAt`: `timestamp with time zone`}
	_                = bytes.MinRead
)

func testUpepCodonsUpdate(t *testing.T) {
	t.Parallel()

	if len(upepCodonColumns) == len(upepCodonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	if err = upepCodon.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUpepCodonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(upepCodonColumns) == len(upepCodonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepCodon := &UpepCodon{}
	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepCodon, upepCodonDBTypes, true, upepCodonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(upepCodonColumns, upepCodonPrimaryKeyColumns) {
		fields = upepCodonColumns
	} else {
		fields = strmangle.SetComplement(
			upepCodonColumns,
			upepCodonPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(upepCodon))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UpepCodonSlice{upepCodon}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUpepCodonsUpsert(t *testing.T) {
	t.Parallel()

	if len(upepCodonColumns) == len(upepCodonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	upepCodon := UpepCodon{}
	if err = randomize.Struct(seed, &upepCodon, upepCodonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepCodon.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepCodon: %s", err)
	}

	count, err := UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &upepCodon, upepCodonDBTypes, false, upepCodonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepCodon struct: %s", err)
	}

	if err = upepCodon.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepCodon: %s", err)
	}

	count, err = UpepCodons(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
