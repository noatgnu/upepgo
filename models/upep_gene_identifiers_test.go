// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUpepGeneIdentifiers(t *testing.T) {
	t.Parallel()

	query := UpepGeneIdentifiers(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUpepGeneIdentifiersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepGeneIdentifier.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepGeneIdentifiersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepGeneIdentifiers(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpepGeneIdentifiersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepGeneIdentifierSlice{upepGeneIdentifier}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUpepGeneIdentifiersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UpepGeneIdentifierExists(tx, upepGeneIdentifier.ID)
	if err != nil {
		t.Errorf("Unable to check if UpepGeneIdentifier exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpepGeneIdentifierExistsG to return true, but got false.")
	}
}
func testUpepGeneIdentifiersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	upepGeneIdentifierFound, err := FindUpepGeneIdentifier(tx, upepGeneIdentifier.ID)
	if err != nil {
		t.Error(err)
	}

	if upepGeneIdentifierFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUpepGeneIdentifiersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UpepGeneIdentifiers(tx).Bind(upepGeneIdentifier); err != nil {
		t.Error(err)
	}
}

func testUpepGeneIdentifiersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UpepGeneIdentifiers(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpepGeneIdentifiersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifierOne := &UpepGeneIdentifier{}
	upepGeneIdentifierTwo := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifierOne, upepGeneIdentifierDBTypes, false, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}
	if err = randomize.Struct(seed, upepGeneIdentifierTwo, upepGeneIdentifierDBTypes, false, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifierOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepGeneIdentifierTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepGeneIdentifiers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpepGeneIdentifiersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	upepGeneIdentifierOne := &UpepGeneIdentifier{}
	upepGeneIdentifierTwo := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifierOne, upepGeneIdentifierDBTypes, false, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}
	if err = randomize.Struct(seed, upepGeneIdentifierTwo, upepGeneIdentifierDBTypes, false, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifierOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = upepGeneIdentifierTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func upepGeneIdentifierBeforeInsertHook(e boil.Executor, o *UpepGeneIdentifier) error {
	*o = UpepGeneIdentifier{}
	return nil
}

func upepGeneIdentifierAfterInsertHook(e boil.Executor, o *UpepGeneIdentifier) error {
	*o = UpepGeneIdentifier{}
	return nil
}

func upepGeneIdentifierAfterSelectHook(e boil.Executor, o *UpepGeneIdentifier) error {
	*o = UpepGeneIdentifier{}
	return nil
}

func upepGeneIdentifierBeforeUpdateHook(e boil.Executor, o *UpepGeneIdentifier) error {
	*o = UpepGeneIdentifier{}
	return nil
}

func upepGeneIdentifierAfterUpdateHook(e boil.Executor, o *UpepGeneIdentifier) error {
	*o = UpepGeneIdentifier{}
	return nil
}

func upepGeneIdentifierBeforeDeleteHook(e boil.Executor, o *UpepGeneIdentifier) error {
	*o = UpepGeneIdentifier{}
	return nil
}

func upepGeneIdentifierAfterDeleteHook(e boil.Executor, o *UpepGeneIdentifier) error {
	*o = UpepGeneIdentifier{}
	return nil
}

func upepGeneIdentifierBeforeUpsertHook(e boil.Executor, o *UpepGeneIdentifier) error {
	*o = UpepGeneIdentifier{}
	return nil
}

func upepGeneIdentifierAfterUpsertHook(e boil.Executor, o *UpepGeneIdentifier) error {
	*o = UpepGeneIdentifier{}
	return nil
}

func testUpepGeneIdentifiersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UpepGeneIdentifier{}
	o := &UpepGeneIdentifier{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, upepGeneIdentifierDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier object: %s", err)
	}

	AddUpepGeneIdentifierHook(boil.BeforeInsertHook, upepGeneIdentifierBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	upepGeneIdentifierBeforeInsertHooks = []UpepGeneIdentifierHook{}

	AddUpepGeneIdentifierHook(boil.AfterInsertHook, upepGeneIdentifierAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	upepGeneIdentifierAfterInsertHooks = []UpepGeneIdentifierHook{}

	AddUpepGeneIdentifierHook(boil.AfterSelectHook, upepGeneIdentifierAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	upepGeneIdentifierAfterSelectHooks = []UpepGeneIdentifierHook{}

	AddUpepGeneIdentifierHook(boil.BeforeUpdateHook, upepGeneIdentifierBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	upepGeneIdentifierBeforeUpdateHooks = []UpepGeneIdentifierHook{}

	AddUpepGeneIdentifierHook(boil.AfterUpdateHook, upepGeneIdentifierAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	upepGeneIdentifierAfterUpdateHooks = []UpepGeneIdentifierHook{}

	AddUpepGeneIdentifierHook(boil.BeforeDeleteHook, upepGeneIdentifierBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	upepGeneIdentifierBeforeDeleteHooks = []UpepGeneIdentifierHook{}

	AddUpepGeneIdentifierHook(boil.AfterDeleteHook, upepGeneIdentifierAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	upepGeneIdentifierAfterDeleteHooks = []UpepGeneIdentifierHook{}

	AddUpepGeneIdentifierHook(boil.BeforeUpsertHook, upepGeneIdentifierBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	upepGeneIdentifierBeforeUpsertHooks = []UpepGeneIdentifierHook{}

	AddUpepGeneIdentifierHook(boil.AfterUpsertHook, upepGeneIdentifierAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	upepGeneIdentifierAfterUpsertHooks = []UpepGeneIdentifierHook{}
}
func testUpepGeneIdentifiersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepGeneIdentifiersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx, upepGeneIdentifierColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpepGeneIdentifierToManyGiUpepRefSeqEntries(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepGeneIdentifier
	var b, c UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)
	randomize.Struct(seed, &c, upepRefSeqEntryDBTypes, false, upepRefSeqEntryColumnsWithDefault...)

	b.GiID.Valid = true
	c.GiID.Valid = true
	b.GiID.Int64 = a.ID
	c.GiID.Int64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upepRefSeqEntry, err := a.GiUpepRefSeqEntries(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upepRefSeqEntry {
		if v.GiID.Int64 == b.GiID.Int64 {
			bFound = true
		}
		if v.GiID.Int64 == c.GiID.Int64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UpepGeneIdentifierSlice{&a}
	if err = a.L.LoadGiUpepRefSeqEntries(tx, false, (*[]*UpepGeneIdentifier)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GiUpepRefSeqEntries = nil
	if err = a.L.LoadGiUpepRefSeqEntries(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiUpepRefSeqEntries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upepRefSeqEntry)
	}
}

func testUpepGeneIdentifierToManyAddOpGiUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepGeneIdentifier
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepGeneIdentifierDBTypes, false, strmangle.SetComplement(upepGeneIdentifierPrimaryKeyColumns, upepGeneIdentifierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UpepRefSeqEntry{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGiUpepRefSeqEntries(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GiID.Int64 {
			t.Error("foreign key was wrong value", a.ID, first.GiID.Int64)
		}
		if a.ID != second.GiID.Int64 {
			t.Error("foreign key was wrong value", a.ID, second.GiID.Int64)
		}

		if first.R.Gi != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Gi != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GiUpepRefSeqEntries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GiUpepRefSeqEntries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GiUpepRefSeqEntries(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUpepGeneIdentifierToManySetOpGiUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepGeneIdentifier
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepGeneIdentifierDBTypes, false, strmangle.SetComplement(upepGeneIdentifierPrimaryKeyColumns, upepGeneIdentifierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetGiUpepRefSeqEntries(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GiUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGiUpepRefSeqEntries(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GiUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.GiID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.GiID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.GiID.Int64 {
		t.Error("foreign key was wrong value", a.ID, d.GiID.Int64)
	}
	if a.ID != e.GiID.Int64 {
		t.Error("foreign key was wrong value", a.ID, e.GiID.Int64)
	}

	if b.R.Gi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Gi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Gi != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Gi != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.GiUpepRefSeqEntries[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GiUpepRefSeqEntries[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUpepGeneIdentifierToManyRemoveOpGiUpepRefSeqEntries(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UpepGeneIdentifier
	var b, c, d, e UpepRefSeqEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, upepGeneIdentifierDBTypes, false, strmangle.SetComplement(upepGeneIdentifierPrimaryKeyColumns, upepGeneIdentifierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UpepRefSeqEntry{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, upepRefSeqEntryDBTypes, false, strmangle.SetComplement(upepRefSeqEntryPrimaryKeyColumns, upepRefSeqEntryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddGiUpepRefSeqEntries(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GiUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGiUpepRefSeqEntries(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GiUpepRefSeqEntries(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.GiID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.GiID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Gi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Gi != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Gi != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Gi != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.GiUpepRefSeqEntries) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GiUpepRefSeqEntries[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GiUpepRefSeqEntries[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUpepGeneIdentifiersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = upepGeneIdentifier.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUpepGeneIdentifiersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UpepGeneIdentifierSlice{upepGeneIdentifier}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUpepGeneIdentifiersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UpepGeneIdentifiers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	upepGeneIdentifierDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `Gi`: `bigint`, `ID`: `bigint`, `UpdatedAt`: `timestamp without time zone`}
	_                         = bytes.MinRead
)

func testUpepGeneIdentifiersUpdate(t *testing.T) {
	t.Parallel()

	if len(upepGeneIdentifierColumns) == len(upepGeneIdentifierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	if err = upepGeneIdentifier.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUpepGeneIdentifiersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(upepGeneIdentifierColumns) == len(upepGeneIdentifierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	upepGeneIdentifier := &UpepGeneIdentifier{}
	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, upepGeneIdentifier, upepGeneIdentifierDBTypes, true, upepGeneIdentifierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(upepGeneIdentifierColumns, upepGeneIdentifierPrimaryKeyColumns) {
		fields = upepGeneIdentifierColumns
	} else {
		fields = strmangle.SetComplement(
			upepGeneIdentifierColumns,
			upepGeneIdentifierPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(upepGeneIdentifier))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UpepGeneIdentifierSlice{upepGeneIdentifier}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUpepGeneIdentifiersUpsert(t *testing.T) {
	t.Parallel()

	if len(upepGeneIdentifierColumns) == len(upepGeneIdentifierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	upepGeneIdentifier := UpepGeneIdentifier{}
	if err = randomize.Struct(seed, &upepGeneIdentifier, upepGeneIdentifierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = upepGeneIdentifier.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepGeneIdentifier: %s", err)
	}

	count, err := UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &upepGeneIdentifier, upepGeneIdentifierDBTypes, false, upepGeneIdentifierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UpepGeneIdentifier struct: %s", err)
	}

	if err = upepGeneIdentifier.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UpepGeneIdentifier: %s", err)
	}

	count, err = UpepGeneIdentifiers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
