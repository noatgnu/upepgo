// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// UpepOrganism is an object representing the database table.
type UpepOrganism struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name           string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	UpepRefSeqDBID int64     `boil:"upep_ref_seq_db_id" json:"upep_ref_seq_db_id" toml:"upep_ref_seq_db_id" yaml:"upep_ref_seq_db_id"`

	R *upepOrganismR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L upepOrganismL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpepOrganismColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	Name           string
	UpepRefSeqDBID string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	Name:           "name",
	UpepRefSeqDBID: "upep_ref_seq_db_id",
}

// upepOrganismR is where relationships are stored.
type upepOrganismR struct {
	UpepRefSeqDB              *UpepRefSeqDB
	OrganismUpepRefSeqEntries UpepRefSeqEntrySlice
}

// upepOrganismL is where Load methods for each relationship are stored.
type upepOrganismL struct{}

var (
	upepOrganismColumns               = []string{"id", "created_at", "updated_at", "name", "upep_ref_seq_db_id"}
	upepOrganismColumnsWithoutDefault = []string{"created_at", "updated_at", "name", "upep_ref_seq_db_id"}
	upepOrganismColumnsWithDefault    = []string{"id"}
	upepOrganismPrimaryKeyColumns     = []string{"id"}
)

type (
	// UpepOrganismSlice is an alias for a slice of pointers to UpepOrganism.
	// This should generally be used opposed to []UpepOrganism.
	UpepOrganismSlice []*UpepOrganism
	// UpepOrganismHook is the signature for custom UpepOrganism hook methods
	UpepOrganismHook func(boil.Executor, *UpepOrganism) error

	upepOrganismQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	upepOrganismType                 = reflect.TypeOf(&UpepOrganism{})
	upepOrganismMapping              = queries.MakeStructMapping(upepOrganismType)
	upepOrganismPrimaryKeyMapping, _ = queries.BindMapping(upepOrganismType, upepOrganismMapping, upepOrganismPrimaryKeyColumns)
	upepOrganismInsertCacheMut       sync.RWMutex
	upepOrganismInsertCache          = make(map[string]insertCache)
	upepOrganismUpdateCacheMut       sync.RWMutex
	upepOrganismUpdateCache          = make(map[string]updateCache)
	upepOrganismUpsertCacheMut       sync.RWMutex
	upepOrganismUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var upepOrganismBeforeInsertHooks []UpepOrganismHook
var upepOrganismBeforeUpdateHooks []UpepOrganismHook
var upepOrganismBeforeDeleteHooks []UpepOrganismHook
var upepOrganismBeforeUpsertHooks []UpepOrganismHook

var upepOrganismAfterInsertHooks []UpepOrganismHook
var upepOrganismAfterSelectHooks []UpepOrganismHook
var upepOrganismAfterUpdateHooks []UpepOrganismHook
var upepOrganismAfterDeleteHooks []UpepOrganismHook
var upepOrganismAfterUpsertHooks []UpepOrganismHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UpepOrganism) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepOrganismBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UpepOrganism) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepOrganismBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UpepOrganism) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepOrganismBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UpepOrganism) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepOrganismBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UpepOrganism) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepOrganismAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UpepOrganism) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range upepOrganismAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UpepOrganism) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepOrganismAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UpepOrganism) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepOrganismAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UpepOrganism) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepOrganismAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUpepOrganismHook registers your hook function for all future operations.
func AddUpepOrganismHook(hookPoint boil.HookPoint, upepOrganismHook UpepOrganismHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		upepOrganismBeforeInsertHooks = append(upepOrganismBeforeInsertHooks, upepOrganismHook)
	case boil.BeforeUpdateHook:
		upepOrganismBeforeUpdateHooks = append(upepOrganismBeforeUpdateHooks, upepOrganismHook)
	case boil.BeforeDeleteHook:
		upepOrganismBeforeDeleteHooks = append(upepOrganismBeforeDeleteHooks, upepOrganismHook)
	case boil.BeforeUpsertHook:
		upepOrganismBeforeUpsertHooks = append(upepOrganismBeforeUpsertHooks, upepOrganismHook)
	case boil.AfterInsertHook:
		upepOrganismAfterInsertHooks = append(upepOrganismAfterInsertHooks, upepOrganismHook)
	case boil.AfterSelectHook:
		upepOrganismAfterSelectHooks = append(upepOrganismAfterSelectHooks, upepOrganismHook)
	case boil.AfterUpdateHook:
		upepOrganismAfterUpdateHooks = append(upepOrganismAfterUpdateHooks, upepOrganismHook)
	case boil.AfterDeleteHook:
		upepOrganismAfterDeleteHooks = append(upepOrganismAfterDeleteHooks, upepOrganismHook)
	case boil.AfterUpsertHook:
		upepOrganismAfterUpsertHooks = append(upepOrganismAfterUpsertHooks, upepOrganismHook)
	}
}

// OneP returns a single upepOrganism record from the query, and panics on error.
func (q upepOrganismQuery) OneP() *UpepOrganism {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single upepOrganism record from the query.
func (q upepOrganismQuery) One() (*UpepOrganism, error) {
	o := &UpepOrganism{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upep_organisms")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UpepOrganism records from the query, and panics on error.
func (q upepOrganismQuery) AllP() UpepOrganismSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UpepOrganism records from the query.
func (q upepOrganismQuery) All() (UpepOrganismSlice, error) {
	var o []*UpepOrganism

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UpepOrganism slice")
	}

	if len(upepOrganismAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UpepOrganism records in the query, and panics on error.
func (q upepOrganismQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UpepOrganism records in the query.
func (q upepOrganismQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upep_organisms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q upepOrganismQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q upepOrganismQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upep_organisms exists")
	}

	return count > 0, nil
}

// UpepRefSeqDBG pointed to by the foreign key.
func (o *UpepOrganism) UpepRefSeqDBG(mods ...qm.QueryMod) upepRefSeqDBQuery {
	return o.UpepRefSeqDB(boil.GetDB(), mods...)
}

// UpepRefSeqDB pointed to by the foreign key.
func (o *UpepOrganism) UpepRefSeqDB(exec boil.Executor, mods ...qm.QueryMod) upepRefSeqDBQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UpepRefSeqDBID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepRefSeqDBS(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_ref_seq_db\"")

	return query
}

// OrganismUpepRefSeqEntriesG retrieves all the upep_ref_seq_entry's upep ref seq entries via organism_id column.
func (o *UpepOrganism) OrganismUpepRefSeqEntriesG(mods ...qm.QueryMod) upepRefSeqEntryQuery {
	return o.OrganismUpepRefSeqEntries(boil.GetDB(), mods...)
}

// OrganismUpepRefSeqEntries retrieves all the upep_ref_seq_entry's upep ref seq entries with an executor via organism_id column.
func (o *UpepOrganism) OrganismUpepRefSeqEntries(exec boil.Executor, mods ...qm.QueryMod) upepRefSeqEntryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upep\".\"upep_ref_seq_entries\".\"organism_id\"=?", o.ID),
	)

	query := UpepRefSeqEntries(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_ref_seq_entries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"upep\".\"upep_ref_seq_entries\".*"})
	}

	return query
}

// LoadUpepRefSeqDB allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepOrganismL) LoadUpepRefSeqDB(e boil.Executor, singular bool, maybeUpepOrganism interface{}) error {
	var slice []*UpepOrganism
	var object *UpepOrganism

	count := 1
	if singular {
		object = maybeUpepOrganism.(*UpepOrganism)
	} else {
		slice = *maybeUpepOrganism.(*[]*UpepOrganism)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepOrganismR{}
		}
		args[0] = object.UpepRefSeqDBID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepOrganismR{}
			}
			args[i] = obj.UpepRefSeqDBID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_ref_seq_db\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepRefSeqDB")
	}
	defer results.Close()

	var resultSlice []*UpepRefSeqDB
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepRefSeqDB")
	}

	if len(upepOrganismAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.UpepRefSeqDB = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpepRefSeqDBID == foreign.ID {
				local.R.UpepRefSeqDB = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrganismUpepRefSeqEntries allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepOrganismL) LoadOrganismUpepRefSeqEntries(e boil.Executor, singular bool, maybeUpepOrganism interface{}) error {
	var slice []*UpepOrganism
	var object *UpepOrganism

	count := 1
	if singular {
		object = maybeUpepOrganism.(*UpepOrganism)
	} else {
		slice = *maybeUpepOrganism.(*[]*UpepOrganism)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepOrganismR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepOrganismR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_ref_seq_entries\" where \"organism_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upep_ref_seq_entries")
	}
	defer results.Close()

	var resultSlice []*UpepRefSeqEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upep_ref_seq_entries")
	}

	if len(upepRefSeqEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganismUpepRefSeqEntries = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganismID.Int64 {
				local.R.OrganismUpepRefSeqEntries = append(local.R.OrganismUpepRefSeqEntries, foreign)
				break
			}
		}
	}

	return nil
}

// SetUpepRefSeqDBG of the upep_organism to the related item.
// Sets o.R.UpepRefSeqDB to related.
// Adds o to related.R.UpepOrganisms.
// Uses the global database handle.
func (o *UpepOrganism) SetUpepRefSeqDBG(insert bool, related *UpepRefSeqDB) error {
	return o.SetUpepRefSeqDB(boil.GetDB(), insert, related)
}

// SetUpepRefSeqDBP of the upep_organism to the related item.
// Sets o.R.UpepRefSeqDB to related.
// Adds o to related.R.UpepOrganisms.
// Panics on error.
func (o *UpepOrganism) SetUpepRefSeqDBP(exec boil.Executor, insert bool, related *UpepRefSeqDB) {
	if err := o.SetUpepRefSeqDB(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUpepRefSeqDBGP of the upep_organism to the related item.
// Sets o.R.UpepRefSeqDB to related.
// Adds o to related.R.UpepOrganisms.
// Uses the global database handle and panics on error.
func (o *UpepOrganism) SetUpepRefSeqDBGP(insert bool, related *UpepRefSeqDB) {
	if err := o.SetUpepRefSeqDB(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUpepRefSeqDB of the upep_organism to the related item.
// Sets o.R.UpepRefSeqDB to related.
// Adds o to related.R.UpepOrganisms.
func (o *UpepOrganism) SetUpepRefSeqDB(exec boil.Executor, insert bool, related *UpepRefSeqDB) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_organisms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"upep_ref_seq_db_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepOrganismPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpepRefSeqDBID = related.ID

	if o.R == nil {
		o.R = &upepOrganismR{
			UpepRefSeqDB: related,
		}
	} else {
		o.R.UpepRefSeqDB = related
	}

	if related.R == nil {
		related.R = &upepRefSeqDBR{
			UpepOrganisms: UpepOrganismSlice{o},
		}
	} else {
		related.R.UpepOrganisms = append(related.R.UpepOrganisms, o)
	}

	return nil
}

// AddOrganismUpepRefSeqEntriesG adds the given related objects to the existing relationships
// of the upep_organism, optionally inserting them as new records.
// Appends related to o.R.OrganismUpepRefSeqEntries.
// Sets related.R.Organism appropriately.
// Uses the global database handle.
func (o *UpepOrganism) AddOrganismUpepRefSeqEntriesG(insert bool, related ...*UpepRefSeqEntry) error {
	return o.AddOrganismUpepRefSeqEntries(boil.GetDB(), insert, related...)
}

// AddOrganismUpepRefSeqEntriesP adds the given related objects to the existing relationships
// of the upep_organism, optionally inserting them as new records.
// Appends related to o.R.OrganismUpepRefSeqEntries.
// Sets related.R.Organism appropriately.
// Panics on error.
func (o *UpepOrganism) AddOrganismUpepRefSeqEntriesP(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) {
	if err := o.AddOrganismUpepRefSeqEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOrganismUpepRefSeqEntriesGP adds the given related objects to the existing relationships
// of the upep_organism, optionally inserting them as new records.
// Appends related to o.R.OrganismUpepRefSeqEntries.
// Sets related.R.Organism appropriately.
// Uses the global database handle and panics on error.
func (o *UpepOrganism) AddOrganismUpepRefSeqEntriesGP(insert bool, related ...*UpepRefSeqEntry) {
	if err := o.AddOrganismUpepRefSeqEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOrganismUpepRefSeqEntries adds the given related objects to the existing relationships
// of the upep_organism, optionally inserting them as new records.
// Appends related to o.R.OrganismUpepRefSeqEntries.
// Sets related.R.Organism appropriately.
func (o *UpepOrganism) AddOrganismUpepRefSeqEntries(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganismID.Int64 = o.ID
			rel.OrganismID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upep\".\"upep_ref_seq_entries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organism_id"}),
				strmangle.WhereClause("\"", "\"", 2, upepRefSeqEntryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganismID.Int64 = o.ID
			rel.OrganismID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &upepOrganismR{
			OrganismUpepRefSeqEntries: related,
		}
	} else {
		o.R.OrganismUpepRefSeqEntries = append(o.R.OrganismUpepRefSeqEntries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &upepRefSeqEntryR{
				Organism: o,
			}
		} else {
			rel.R.Organism = o
		}
	}
	return nil
}

// SetOrganismUpepRefSeqEntriesG removes all previously related items of the
// upep_organism replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Organism's OrganismUpepRefSeqEntries accordingly.
// Replaces o.R.OrganismUpepRefSeqEntries with related.
// Sets related.R.Organism's OrganismUpepRefSeqEntries accordingly.
// Uses the global database handle.
func (o *UpepOrganism) SetOrganismUpepRefSeqEntriesG(insert bool, related ...*UpepRefSeqEntry) error {
	return o.SetOrganismUpepRefSeqEntries(boil.GetDB(), insert, related...)
}

// SetOrganismUpepRefSeqEntriesP removes all previously related items of the
// upep_organism replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Organism's OrganismUpepRefSeqEntries accordingly.
// Replaces o.R.OrganismUpepRefSeqEntries with related.
// Sets related.R.Organism's OrganismUpepRefSeqEntries accordingly.
// Panics on error.
func (o *UpepOrganism) SetOrganismUpepRefSeqEntriesP(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) {
	if err := o.SetOrganismUpepRefSeqEntries(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrganismUpepRefSeqEntriesGP removes all previously related items of the
// upep_organism replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Organism's OrganismUpepRefSeqEntries accordingly.
// Replaces o.R.OrganismUpepRefSeqEntries with related.
// Sets related.R.Organism's OrganismUpepRefSeqEntries accordingly.
// Uses the global database handle and panics on error.
func (o *UpepOrganism) SetOrganismUpepRefSeqEntriesGP(insert bool, related ...*UpepRefSeqEntry) {
	if err := o.SetOrganismUpepRefSeqEntries(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrganismUpepRefSeqEntries removes all previously related items of the
// upep_organism replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Organism's OrganismUpepRefSeqEntries accordingly.
// Replaces o.R.OrganismUpepRefSeqEntries with related.
// Sets related.R.Organism's OrganismUpepRefSeqEntries accordingly.
func (o *UpepOrganism) SetOrganismUpepRefSeqEntries(exec boil.Executor, insert bool, related ...*UpepRefSeqEntry) error {
	query := "update \"upep\".\"upep_ref_seq_entries\" set \"organism_id\" = null where \"organism_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrganismUpepRefSeqEntries {
			rel.OrganismID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Organism = nil
		}

		o.R.OrganismUpepRefSeqEntries = nil
	}
	return o.AddOrganismUpepRefSeqEntries(exec, insert, related...)
}

// RemoveOrganismUpepRefSeqEntriesG relationships from objects passed in.
// Removes related items from R.OrganismUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.Organism.
// Uses the global database handle.
func (o *UpepOrganism) RemoveOrganismUpepRefSeqEntriesG(related ...*UpepRefSeqEntry) error {
	return o.RemoveOrganismUpepRefSeqEntries(boil.GetDB(), related...)
}

// RemoveOrganismUpepRefSeqEntriesP relationships from objects passed in.
// Removes related items from R.OrganismUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.Organism.
// Panics on error.
func (o *UpepOrganism) RemoveOrganismUpepRefSeqEntriesP(exec boil.Executor, related ...*UpepRefSeqEntry) {
	if err := o.RemoveOrganismUpepRefSeqEntries(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOrganismUpepRefSeqEntriesGP relationships from objects passed in.
// Removes related items from R.OrganismUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.Organism.
// Uses the global database handle and panics on error.
func (o *UpepOrganism) RemoveOrganismUpepRefSeqEntriesGP(related ...*UpepRefSeqEntry) {
	if err := o.RemoveOrganismUpepRefSeqEntries(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveOrganismUpepRefSeqEntries relationships from objects passed in.
// Removes related items from R.OrganismUpepRefSeqEntries (uses pointer comparison, removal does not keep order)
// Sets related.R.Organism.
func (o *UpepOrganism) RemoveOrganismUpepRefSeqEntries(exec boil.Executor, related ...*UpepRefSeqEntry) error {
	var err error
	for _, rel := range related {
		rel.OrganismID.Valid = false
		if rel.R != nil {
			rel.R.Organism = nil
		}
		if err = rel.Update(exec, "organism_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrganismUpepRefSeqEntries {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrganismUpepRefSeqEntries)
			if ln > 1 && i < ln-1 {
				o.R.OrganismUpepRefSeqEntries[i] = o.R.OrganismUpepRefSeqEntries[ln-1]
			}
			o.R.OrganismUpepRefSeqEntries = o.R.OrganismUpepRefSeqEntries[:ln-1]
			break
		}
	}

	return nil
}

// UpepOrganismsG retrieves all records.
func UpepOrganismsG(mods ...qm.QueryMod) upepOrganismQuery {
	return UpepOrganisms(boil.GetDB(), mods...)
}

// UpepOrganisms retrieves all the records using an executor.
func UpepOrganisms(exec boil.Executor, mods ...qm.QueryMod) upepOrganismQuery {
	mods = append(mods, qm.From("\"upep\".\"upep_organisms\""))
	return upepOrganismQuery{NewQuery(exec, mods...)}
}

// FindUpepOrganismG retrieves a single record by ID.
func FindUpepOrganismG(id int64, selectCols ...string) (*UpepOrganism, error) {
	return FindUpepOrganism(boil.GetDB(), id, selectCols...)
}

// FindUpepOrganismGP retrieves a single record by ID, and panics on error.
func FindUpepOrganismGP(id int64, selectCols ...string) *UpepOrganism {
	retobj, err := FindUpepOrganism(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUpepOrganism retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpepOrganism(exec boil.Executor, id int64, selectCols ...string) (*UpepOrganism, error) {
	upepOrganismObj := &UpepOrganism{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upep\".\"upep_organisms\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(upepOrganismObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upep_organisms")
	}

	return upepOrganismObj, nil
}

// FindUpepOrganismP retrieves a single record by ID with an executor, and panics on error.
func FindUpepOrganismP(exec boil.Executor, id int64, selectCols ...string) *UpepOrganism {
	retobj, err := FindUpepOrganism(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UpepOrganism) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UpepOrganism) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UpepOrganism) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UpepOrganism) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_organisms provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepOrganismColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	upepOrganismInsertCacheMut.RLock()
	cache, cached := upepOrganismInsertCache[key]
	upepOrganismInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			upepOrganismColumns,
			upepOrganismColumnsWithDefault,
			upepOrganismColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(upepOrganismType, upepOrganismMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(upepOrganismType, upepOrganismMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upep\".\"upep_organisms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upep\".\"upep_organisms\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upep_organisms")
	}

	if !cached {
		upepOrganismInsertCacheMut.Lock()
		upepOrganismInsertCache[key] = cache
		upepOrganismInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UpepOrganism record. See Update for
// whitelist behavior description.
func (o *UpepOrganism) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UpepOrganism record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UpepOrganism) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UpepOrganism, and panics on error.
// See Update for whitelist behavior description.
func (o *UpepOrganism) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UpepOrganism.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UpepOrganism) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	upepOrganismUpdateCacheMut.RLock()
	cache, cached := upepOrganismUpdateCache[key]
	upepOrganismUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			upepOrganismColumns,
			upepOrganismPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update upep_organisms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upep\".\"upep_organisms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, upepOrganismPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(upepOrganismType, upepOrganismMapping, append(wl, upepOrganismPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update upep_organisms row")
	}

	if !cached {
		upepOrganismUpdateCacheMut.Lock()
		upepOrganismUpdateCache[key] = cache
		upepOrganismUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q upepOrganismQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q upepOrganismQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for upep_organisms")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UpepOrganismSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UpepOrganismSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UpepOrganismSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpepOrganismSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepOrganismPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upep\".\"upep_organisms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, upepOrganismPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in upepOrganism slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UpepOrganism) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UpepOrganism) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UpepOrganism) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UpepOrganism) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_organisms provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepOrganismColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	upepOrganismUpsertCacheMut.RLock()
	cache, cached := upepOrganismUpsertCache[key]
	upepOrganismUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			upepOrganismColumns,
			upepOrganismColumnsWithDefault,
			upepOrganismColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			upepOrganismColumns,
			upepOrganismPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert upep_organisms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(upepOrganismPrimaryKeyColumns))
			copy(conflict, upepOrganismPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"upep\".\"upep_organisms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(upepOrganismType, upepOrganismMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(upepOrganismType, upepOrganismMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upep_organisms")
	}

	if !cached {
		upepOrganismUpsertCacheMut.Lock()
		upepOrganismUpsertCache[key] = cache
		upepOrganismUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UpepOrganism record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepOrganism) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UpepOrganism record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UpepOrganism) DeleteG() error {
	if o == nil {
		return errors.New("models: no UpepOrganism provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UpepOrganism record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepOrganism) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UpepOrganism record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UpepOrganism) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepOrganism provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), upepOrganismPrimaryKeyMapping)
	sql := "DELETE FROM \"upep\".\"upep_organisms\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from upep_organisms")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q upepOrganismQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q upepOrganismQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no upepOrganismQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upep_organisms")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UpepOrganismSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UpepOrganismSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UpepOrganism slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UpepOrganismSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpepOrganismSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepOrganism slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(upepOrganismBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepOrganismPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upep\".\"upep_organisms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepOrganismPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upepOrganism slice")
	}

	if len(upepOrganismAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UpepOrganism) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UpepOrganism) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UpepOrganism) ReloadG() error {
	if o == nil {
		return errors.New("models: no UpepOrganism provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UpepOrganism) Reload(exec boil.Executor) error {
	ret, err := FindUpepOrganism(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepOrganismSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepOrganismSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepOrganismSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UpepOrganismSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepOrganismSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	upepOrganisms := UpepOrganismSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepOrganismPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upep\".\"upep_organisms\".* FROM \"upep\".\"upep_organisms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepOrganismPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&upepOrganisms)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UpepOrganismSlice")
	}

	*o = upepOrganisms

	return nil
}

// UpepOrganismExists checks if the UpepOrganism row exists.
func UpepOrganismExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upep\".\"upep_organisms\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upep_organisms exists")
	}

	return exists, nil
}

// UpepOrganismExistsG checks if the UpepOrganism row exists.
func UpepOrganismExistsG(id int64) (bool, error) {
	return UpepOrganismExists(boil.GetDB(), id)
}

// UpepOrganismExistsGP checks if the UpepOrganism row exists. Panics on error.
func UpepOrganismExistsGP(id int64) bool {
	e, err := UpepOrganismExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UpepOrganismExistsP checks if the UpepOrganism row exists. Panics on error.
func UpepOrganismExistsP(exec boil.Executor, id int64) bool {
	e, err := UpepOrganismExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
