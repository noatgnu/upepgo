// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// UpepBlastDB is an object representing the database table.
type UpepBlastDB struct {
	ID              int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Title           string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Path            string    `boil:"path" json:"path" toml:"path" yaml:"path"`
	Description     string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	UpepRefSeqDBID  int64     `boil:"upep_ref_seq_db_id" json:"upep_ref_seq_db_id" toml:"upep_ref_seq_db_id" yaml:"upep_ref_seq_db_id"`
	StartingCodonID int64     `boil:"starting_codon_id" json:"starting_codon_id" toml:"starting_codon_id" yaml:"starting_codon_id"`
	EndingCodonID   int64     `boil:"ending_codon_id" json:"ending_codon_id" toml:"ending_codon_id" yaml:"ending_codon_id"`

	R *upepBlastDBR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L upepBlastDBL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpepBlastDBColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	Title           string
	Path            string
	Description     string
	UpepRefSeqDBID  string
	StartingCodonID string
	EndingCodonID   string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	Title:           "title",
	Path:            "path",
	Description:     "description",
	UpepRefSeqDBID:  "upep_ref_seq_db_id",
	StartingCodonID: "starting_codon_id",
	EndingCodonID:   "ending_codon_id",
}

// upepBlastDBR is where relationships are stored.
type upepBlastDBR struct {
	UpepRefSeqDB  *UpepRefSeqDB
	StartingCodon *UpepCodon
	EndingCodon   *UpepCodon
}

// upepBlastDBL is where Load methods for each relationship are stored.
type upepBlastDBL struct{}

var (
	upepBlastDBColumns               = []string{"id", "created_at", "updated_at", "title", "path", "description", "upep_ref_seq_db_id", "starting_codon_id", "ending_codon_id"}
	upepBlastDBColumnsWithoutDefault = []string{"created_at", "updated_at", "title", "path", "description", "upep_ref_seq_db_id", "starting_codon_id", "ending_codon_id"}
	upepBlastDBColumnsWithDefault    = []string{"id"}
	upepBlastDBPrimaryKeyColumns     = []string{"id"}
)

type (
	// UpepBlastDBSlice is an alias for a slice of pointers to UpepBlastDB.
	// This should generally be used opposed to []UpepBlastDB.
	UpepBlastDBSlice []*UpepBlastDB
	// UpepBlastDBHook is the signature for custom UpepBlastDB hook methods
	UpepBlastDBHook func(boil.Executor, *UpepBlastDB) error

	upepBlastDBQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	upepBlastDBType                 = reflect.TypeOf(&UpepBlastDB{})
	upepBlastDBMapping              = queries.MakeStructMapping(upepBlastDBType)
	upepBlastDBPrimaryKeyMapping, _ = queries.BindMapping(upepBlastDBType, upepBlastDBMapping, upepBlastDBPrimaryKeyColumns)
	upepBlastDBInsertCacheMut       sync.RWMutex
	upepBlastDBInsertCache          = make(map[string]insertCache)
	upepBlastDBUpdateCacheMut       sync.RWMutex
	upepBlastDBUpdateCache          = make(map[string]updateCache)
	upepBlastDBUpsertCacheMut       sync.RWMutex
	upepBlastDBUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var upepBlastDBBeforeInsertHooks []UpepBlastDBHook
var upepBlastDBBeforeUpdateHooks []UpepBlastDBHook
var upepBlastDBBeforeDeleteHooks []UpepBlastDBHook
var upepBlastDBBeforeUpsertHooks []UpepBlastDBHook

var upepBlastDBAfterInsertHooks []UpepBlastDBHook
var upepBlastDBAfterSelectHooks []UpepBlastDBHook
var upepBlastDBAfterUpdateHooks []UpepBlastDBHook
var upepBlastDBAfterDeleteHooks []UpepBlastDBHook
var upepBlastDBAfterUpsertHooks []UpepBlastDBHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UpepBlastDB) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepBlastDBBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UpepBlastDB) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepBlastDBBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UpepBlastDB) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepBlastDBBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UpepBlastDB) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepBlastDBBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UpepBlastDB) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepBlastDBAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UpepBlastDB) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range upepBlastDBAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UpepBlastDB) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepBlastDBAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UpepBlastDB) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepBlastDBAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UpepBlastDB) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepBlastDBAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUpepBlastDBHook registers your hook function for all future operations.
func AddUpepBlastDBHook(hookPoint boil.HookPoint, upepBlastDBHook UpepBlastDBHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		upepBlastDBBeforeInsertHooks = append(upepBlastDBBeforeInsertHooks, upepBlastDBHook)
	case boil.BeforeUpdateHook:
		upepBlastDBBeforeUpdateHooks = append(upepBlastDBBeforeUpdateHooks, upepBlastDBHook)
	case boil.BeforeDeleteHook:
		upepBlastDBBeforeDeleteHooks = append(upepBlastDBBeforeDeleteHooks, upepBlastDBHook)
	case boil.BeforeUpsertHook:
		upepBlastDBBeforeUpsertHooks = append(upepBlastDBBeforeUpsertHooks, upepBlastDBHook)
	case boil.AfterInsertHook:
		upepBlastDBAfterInsertHooks = append(upepBlastDBAfterInsertHooks, upepBlastDBHook)
	case boil.AfterSelectHook:
		upepBlastDBAfterSelectHooks = append(upepBlastDBAfterSelectHooks, upepBlastDBHook)
	case boil.AfterUpdateHook:
		upepBlastDBAfterUpdateHooks = append(upepBlastDBAfterUpdateHooks, upepBlastDBHook)
	case boil.AfterDeleteHook:
		upepBlastDBAfterDeleteHooks = append(upepBlastDBAfterDeleteHooks, upepBlastDBHook)
	case boil.AfterUpsertHook:
		upepBlastDBAfterUpsertHooks = append(upepBlastDBAfterUpsertHooks, upepBlastDBHook)
	}
}

// OneP returns a single upepBlastDB record from the query, and panics on error.
func (q upepBlastDBQuery) OneP() *UpepBlastDB {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single upepBlastDB record from the query.
func (q upepBlastDBQuery) One() (*UpepBlastDB, error) {
	o := &UpepBlastDB{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upep_blast_db")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UpepBlastDB records from the query, and panics on error.
func (q upepBlastDBQuery) AllP() UpepBlastDBSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UpepBlastDB records from the query.
func (q upepBlastDBQuery) All() (UpepBlastDBSlice, error) {
	var o []*UpepBlastDB

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UpepBlastDB slice")
	}

	if len(upepBlastDBAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UpepBlastDB records in the query, and panics on error.
func (q upepBlastDBQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UpepBlastDB records in the query.
func (q upepBlastDBQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upep_blast_db rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q upepBlastDBQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q upepBlastDBQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upep_blast_db exists")
	}

	return count > 0, nil
}

// UpepRefSeqDBG pointed to by the foreign key.
func (o *UpepBlastDB) UpepRefSeqDBG(mods ...qm.QueryMod) upepRefSeqDBQuery {
	return o.UpepRefSeqDB(boil.GetDB(), mods...)
}

// UpepRefSeqDB pointed to by the foreign key.
func (o *UpepBlastDB) UpepRefSeqDB(exec boil.Executor, mods ...qm.QueryMod) upepRefSeqDBQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UpepRefSeqDBID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepRefSeqDBS(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_ref_seq_db\"")

	return query
}

// StartingCodonG pointed to by the foreign key.
func (o *UpepBlastDB) StartingCodonG(mods ...qm.QueryMod) upepCodonQuery {
	return o.StartingCodon(boil.GetDB(), mods...)
}

// StartingCodon pointed to by the foreign key.
func (o *UpepBlastDB) StartingCodon(exec boil.Executor, mods ...qm.QueryMod) upepCodonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.StartingCodonID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepCodons(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_codon\"")

	return query
}

// EndingCodonG pointed to by the foreign key.
func (o *UpepBlastDB) EndingCodonG(mods ...qm.QueryMod) upepCodonQuery {
	return o.EndingCodon(boil.GetDB(), mods...)
}

// EndingCodon pointed to by the foreign key.
func (o *UpepBlastDB) EndingCodon(exec boil.Executor, mods ...qm.QueryMod) upepCodonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EndingCodonID),
	}

	queryMods = append(queryMods, mods...)

	query := UpepCodons(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_codon\"")

	return query
} // LoadUpepRefSeqDB allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepBlastDBL) LoadUpepRefSeqDB(e boil.Executor, singular bool, maybeUpepBlastDB interface{}) error {
	var slice []*UpepBlastDB
	var object *UpepBlastDB

	count := 1
	if singular {
		object = maybeUpepBlastDB.(*UpepBlastDB)
	} else {
		slice = *maybeUpepBlastDB.(*[]*UpepBlastDB)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepBlastDBR{}
		}
		args[0] = object.UpepRefSeqDBID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepBlastDBR{}
			}
			args[i] = obj.UpepRefSeqDBID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_ref_seq_db\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepRefSeqDB")
	}
	defer results.Close()

	var resultSlice []*UpepRefSeqDB
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepRefSeqDB")
	}

	if len(upepBlastDBAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.UpepRefSeqDB = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpepRefSeqDBID == foreign.ID {
				local.R.UpepRefSeqDB = foreign
				break
			}
		}
	}

	return nil
}

// LoadStartingCodon allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepBlastDBL) LoadStartingCodon(e boil.Executor, singular bool, maybeUpepBlastDB interface{}) error {
	var slice []*UpepBlastDB
	var object *UpepBlastDB

	count := 1
	if singular {
		object = maybeUpepBlastDB.(*UpepBlastDB)
	} else {
		slice = *maybeUpepBlastDB.(*[]*UpepBlastDB)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepBlastDBR{}
		}
		args[0] = object.StartingCodonID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepBlastDBR{}
			}
			args[i] = obj.StartingCodonID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_codon\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepCodon")
	}
	defer results.Close()

	var resultSlice []*UpepCodon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepCodon")
	}

	if len(upepBlastDBAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.StartingCodon = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StartingCodonID == foreign.ID {
				local.R.StartingCodon = foreign
				break
			}
		}
	}

	return nil
}

// LoadEndingCodon allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepBlastDBL) LoadEndingCodon(e boil.Executor, singular bool, maybeUpepBlastDB interface{}) error {
	var slice []*UpepBlastDB
	var object *UpepBlastDB

	count := 1
	if singular {
		object = maybeUpepBlastDB.(*UpepBlastDB)
	} else {
		slice = *maybeUpepBlastDB.(*[]*UpepBlastDB)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepBlastDBR{}
		}
		args[0] = object.EndingCodonID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepBlastDBR{}
			}
			args[i] = obj.EndingCodonID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_codon\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UpepCodon")
	}
	defer results.Close()

	var resultSlice []*UpepCodon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UpepCodon")
	}

	if len(upepBlastDBAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.EndingCodon = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EndingCodonID == foreign.ID {
				local.R.EndingCodon = foreign
				break
			}
		}
	}

	return nil
}

// SetUpepRefSeqDBG of the upep_blast_db to the related item.
// Sets o.R.UpepRefSeqDB to related.
// Adds o to related.R.UpepBlastDBS.
// Uses the global database handle.
func (o *UpepBlastDB) SetUpepRefSeqDBG(insert bool, related *UpepRefSeqDB) error {
	return o.SetUpepRefSeqDB(boil.GetDB(), insert, related)
}

// SetUpepRefSeqDBP of the upep_blast_db to the related item.
// Sets o.R.UpepRefSeqDB to related.
// Adds o to related.R.UpepBlastDBS.
// Panics on error.
func (o *UpepBlastDB) SetUpepRefSeqDBP(exec boil.Executor, insert bool, related *UpepRefSeqDB) {
	if err := o.SetUpepRefSeqDB(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUpepRefSeqDBGP of the upep_blast_db to the related item.
// Sets o.R.UpepRefSeqDB to related.
// Adds o to related.R.UpepBlastDBS.
// Uses the global database handle and panics on error.
func (o *UpepBlastDB) SetUpepRefSeqDBGP(insert bool, related *UpepRefSeqDB) {
	if err := o.SetUpepRefSeqDB(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUpepRefSeqDB of the upep_blast_db to the related item.
// Sets o.R.UpepRefSeqDB to related.
// Adds o to related.R.UpepBlastDBS.
func (o *UpepBlastDB) SetUpepRefSeqDB(exec boil.Executor, insert bool, related *UpepRefSeqDB) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_blast_db\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"upep_ref_seq_db_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepBlastDBPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpepRefSeqDBID = related.ID

	if o.R == nil {
		o.R = &upepBlastDBR{
			UpepRefSeqDB: related,
		}
	} else {
		o.R.UpepRefSeqDB = related
	}

	if related.R == nil {
		related.R = &upepRefSeqDBR{
			UpepBlastDBS: UpepBlastDBSlice{o},
		}
	} else {
		related.R.UpepBlastDBS = append(related.R.UpepBlastDBS, o)
	}

	return nil
}

// SetStartingCodonG of the upep_blast_db to the related item.
// Sets o.R.StartingCodon to related.
// Adds o to related.R.StartingCodonUpepBlastDBS.
// Uses the global database handle.
func (o *UpepBlastDB) SetStartingCodonG(insert bool, related *UpepCodon) error {
	return o.SetStartingCodon(boil.GetDB(), insert, related)
}

// SetStartingCodonP of the upep_blast_db to the related item.
// Sets o.R.StartingCodon to related.
// Adds o to related.R.StartingCodonUpepBlastDBS.
// Panics on error.
func (o *UpepBlastDB) SetStartingCodonP(exec boil.Executor, insert bool, related *UpepCodon) {
	if err := o.SetStartingCodon(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStartingCodonGP of the upep_blast_db to the related item.
// Sets o.R.StartingCodon to related.
// Adds o to related.R.StartingCodonUpepBlastDBS.
// Uses the global database handle and panics on error.
func (o *UpepBlastDB) SetStartingCodonGP(insert bool, related *UpepCodon) {
	if err := o.SetStartingCodon(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetStartingCodon of the upep_blast_db to the related item.
// Sets o.R.StartingCodon to related.
// Adds o to related.R.StartingCodonUpepBlastDBS.
func (o *UpepBlastDB) SetStartingCodon(exec boil.Executor, insert bool, related *UpepCodon) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_blast_db\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"starting_codon_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepBlastDBPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StartingCodonID = related.ID

	if o.R == nil {
		o.R = &upepBlastDBR{
			StartingCodon: related,
		}
	} else {
		o.R.StartingCodon = related
	}

	if related.R == nil {
		related.R = &upepCodonR{
			StartingCodonUpepBlastDBS: UpepBlastDBSlice{o},
		}
	} else {
		related.R.StartingCodonUpepBlastDBS = append(related.R.StartingCodonUpepBlastDBS, o)
	}

	return nil
}

// SetEndingCodonG of the upep_blast_db to the related item.
// Sets o.R.EndingCodon to related.
// Adds o to related.R.EndingCodonUpepBlastDBS.
// Uses the global database handle.
func (o *UpepBlastDB) SetEndingCodonG(insert bool, related *UpepCodon) error {
	return o.SetEndingCodon(boil.GetDB(), insert, related)
}

// SetEndingCodonP of the upep_blast_db to the related item.
// Sets o.R.EndingCodon to related.
// Adds o to related.R.EndingCodonUpepBlastDBS.
// Panics on error.
func (o *UpepBlastDB) SetEndingCodonP(exec boil.Executor, insert bool, related *UpepCodon) {
	if err := o.SetEndingCodon(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEndingCodonGP of the upep_blast_db to the related item.
// Sets o.R.EndingCodon to related.
// Adds o to related.R.EndingCodonUpepBlastDBS.
// Uses the global database handle and panics on error.
func (o *UpepBlastDB) SetEndingCodonGP(insert bool, related *UpepCodon) {
	if err := o.SetEndingCodon(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEndingCodon of the upep_blast_db to the related item.
// Sets o.R.EndingCodon to related.
// Adds o to related.R.EndingCodonUpepBlastDBS.
func (o *UpepBlastDB) SetEndingCodon(exec boil.Executor, insert bool, related *UpepCodon) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"upep\".\"upep_blast_db\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ending_codon_id"}),
		strmangle.WhereClause("\"", "\"", 2, upepBlastDBPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EndingCodonID = related.ID

	if o.R == nil {
		o.R = &upepBlastDBR{
			EndingCodon: related,
		}
	} else {
		o.R.EndingCodon = related
	}

	if related.R == nil {
		related.R = &upepCodonR{
			EndingCodonUpepBlastDBS: UpepBlastDBSlice{o},
		}
	} else {
		related.R.EndingCodonUpepBlastDBS = append(related.R.EndingCodonUpepBlastDBS, o)
	}

	return nil
}

// UpepBlastDBSG retrieves all records.
func UpepBlastDBSG(mods ...qm.QueryMod) upepBlastDBQuery {
	return UpepBlastDBS(boil.GetDB(), mods...)
}

// UpepBlastDBS retrieves all the records using an executor.
func UpepBlastDBS(exec boil.Executor, mods ...qm.QueryMod) upepBlastDBQuery {
	mods = append(mods, qm.From("\"upep\".\"upep_blast_db\""))
	return upepBlastDBQuery{NewQuery(exec, mods...)}
}

// FindUpepBlastDBG retrieves a single record by ID.
func FindUpepBlastDBG(id int64, selectCols ...string) (*UpepBlastDB, error) {
	return FindUpepBlastDB(boil.GetDB(), id, selectCols...)
}

// FindUpepBlastDBGP retrieves a single record by ID, and panics on error.
func FindUpepBlastDBGP(id int64, selectCols ...string) *UpepBlastDB {
	retobj, err := FindUpepBlastDB(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUpepBlastDB retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpepBlastDB(exec boil.Executor, id int64, selectCols ...string) (*UpepBlastDB, error) {
	upepBlastDBObj := &UpepBlastDB{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upep\".\"upep_blast_db\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(upepBlastDBObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upep_blast_db")
	}

	return upepBlastDBObj, nil
}

// FindUpepBlastDBP retrieves a single record by ID with an executor, and panics on error.
func FindUpepBlastDBP(exec boil.Executor, id int64, selectCols ...string) *UpepBlastDB {
	retobj, err := FindUpepBlastDB(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UpepBlastDB) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UpepBlastDB) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UpepBlastDB) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UpepBlastDB) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_blast_db provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepBlastDBColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	upepBlastDBInsertCacheMut.RLock()
	cache, cached := upepBlastDBInsertCache[key]
	upepBlastDBInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			upepBlastDBColumns,
			upepBlastDBColumnsWithDefault,
			upepBlastDBColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(upepBlastDBType, upepBlastDBMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(upepBlastDBType, upepBlastDBMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upep\".\"upep_blast_db\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upep\".\"upep_blast_db\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upep_blast_db")
	}

	if !cached {
		upepBlastDBInsertCacheMut.Lock()
		upepBlastDBInsertCache[key] = cache
		upepBlastDBInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UpepBlastDB record. See Update for
// whitelist behavior description.
func (o *UpepBlastDB) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UpepBlastDB record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UpepBlastDB) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UpepBlastDB, and panics on error.
// See Update for whitelist behavior description.
func (o *UpepBlastDB) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UpepBlastDB.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UpepBlastDB) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	upepBlastDBUpdateCacheMut.RLock()
	cache, cached := upepBlastDBUpdateCache[key]
	upepBlastDBUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			upepBlastDBColumns,
			upepBlastDBPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update upep_blast_db, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upep\".\"upep_blast_db\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, upepBlastDBPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(upepBlastDBType, upepBlastDBMapping, append(wl, upepBlastDBPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update upep_blast_db row")
	}

	if !cached {
		upepBlastDBUpdateCacheMut.Lock()
		upepBlastDBUpdateCache[key] = cache
		upepBlastDBUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q upepBlastDBQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q upepBlastDBQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for upep_blast_db")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UpepBlastDBSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UpepBlastDBSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UpepBlastDBSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpepBlastDBSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepBlastDBPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upep\".\"upep_blast_db\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, upepBlastDBPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in upepBlastDB slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UpepBlastDB) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UpepBlastDB) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UpepBlastDB) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UpepBlastDB) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_blast_db provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepBlastDBColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	upepBlastDBUpsertCacheMut.RLock()
	cache, cached := upepBlastDBUpsertCache[key]
	upepBlastDBUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			upepBlastDBColumns,
			upepBlastDBColumnsWithDefault,
			upepBlastDBColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			upepBlastDBColumns,
			upepBlastDBPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert upep_blast_db, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(upepBlastDBPrimaryKeyColumns))
			copy(conflict, upepBlastDBPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"upep\".\"upep_blast_db\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(upepBlastDBType, upepBlastDBMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(upepBlastDBType, upepBlastDBMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upep_blast_db")
	}

	if !cached {
		upepBlastDBUpsertCacheMut.Lock()
		upepBlastDBUpsertCache[key] = cache
		upepBlastDBUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UpepBlastDB record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepBlastDB) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UpepBlastDB record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UpepBlastDB) DeleteG() error {
	if o == nil {
		return errors.New("models: no UpepBlastDB provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UpepBlastDB record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepBlastDB) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UpepBlastDB record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UpepBlastDB) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepBlastDB provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), upepBlastDBPrimaryKeyMapping)
	sql := "DELETE FROM \"upep\".\"upep_blast_db\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from upep_blast_db")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q upepBlastDBQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q upepBlastDBQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no upepBlastDBQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upep_blast_db")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UpepBlastDBSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UpepBlastDBSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UpepBlastDB slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UpepBlastDBSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpepBlastDBSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepBlastDB slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(upepBlastDBBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepBlastDBPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upep\".\"upep_blast_db\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepBlastDBPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upepBlastDB slice")
	}

	if len(upepBlastDBAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UpepBlastDB) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UpepBlastDB) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UpepBlastDB) ReloadG() error {
	if o == nil {
		return errors.New("models: no UpepBlastDB provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UpepBlastDB) Reload(exec boil.Executor) error {
	ret, err := FindUpepBlastDB(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepBlastDBSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepBlastDBSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepBlastDBSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UpepBlastDBSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepBlastDBSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	upepBlastDBS := UpepBlastDBSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepBlastDBPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upep\".\"upep_blast_db\".* FROM \"upep\".\"upep_blast_db\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepBlastDBPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&upepBlastDBS)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UpepBlastDBSlice")
	}

	*o = upepBlastDBS

	return nil
}

// UpepBlastDBExists checks if the UpepBlastDB row exists.
func UpepBlastDBExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upep\".\"upep_blast_db\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upep_blast_db exists")
	}

	return exists, nil
}

// UpepBlastDBExistsG checks if the UpepBlastDB row exists.
func UpepBlastDBExistsG(id int64) (bool, error) {
	return UpepBlastDBExists(boil.GetDB(), id)
}

// UpepBlastDBExistsGP checks if the UpepBlastDB row exists. Panics on error.
func UpepBlastDBExistsGP(id int64) bool {
	e, err := UpepBlastDBExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UpepBlastDBExistsP checks if the UpepBlastDB row exists. Panics on error.
func UpepBlastDBExistsP(exec boil.Executor, id int64) bool {
	e, err := UpepBlastDBExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
