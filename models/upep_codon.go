// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// UpepCodon is an object representing the database table.
type UpepCodon struct {
	CreatedAt     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	StartingCodon bool      `boil:"starting_codon" json:"starting_codon" toml:"starting_codon" yaml:"starting_codon"`
	EndingCodon   bool      `boil:"ending_codon" json:"ending_codon" toml:"ending_codon" yaml:"ending_codon"`
	Sequence      string    `boil:"sequence" json:"sequence" toml:"sequence" yaml:"sequence"`
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *upepCodonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L upepCodonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpepCodonColumns = struct {
	CreatedAt     string
	UpdatedAt     string
	StartingCodon string
	EndingCodon   string
	Sequence      string
	ID            string
}{
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	StartingCodon: "starting_codon",
	EndingCodon:   "ending_codon",
	Sequence:      "sequence",
	ID:            "id",
}

// upepCodonR is where relationships are stored.
type upepCodonR struct {
	StartingCodonUpepBlastDBS      UpepBlastDBSlice
	EndingCodonUpepBlastDBS        UpepBlastDBSlice
	StartingCodonUpepSorfPositions UpepSorfPositionSlice
	EndingCodonUpepSorfPositions   UpepSorfPositionSlice
}

// upepCodonL is where Load methods for each relationship are stored.
type upepCodonL struct{}

var (
	upepCodonColumns               = []string{"created_at", "updated_at", "starting_codon", "ending_codon", "sequence", "id"}
	upepCodonColumnsWithoutDefault = []string{"created_at", "updated_at", "sequence"}
	upepCodonColumnsWithDefault    = []string{"starting_codon", "ending_codon", "id"}
	upepCodonPrimaryKeyColumns     = []string{"id"}
)

type (
	// UpepCodonSlice is an alias for a slice of pointers to UpepCodon.
	// This should generally be used opposed to []UpepCodon.
	UpepCodonSlice []*UpepCodon
	// UpepCodonHook is the signature for custom UpepCodon hook methods
	UpepCodonHook func(boil.Executor, *UpepCodon) error

	upepCodonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	upepCodonType                 = reflect.TypeOf(&UpepCodon{})
	upepCodonMapping              = queries.MakeStructMapping(upepCodonType)
	upepCodonPrimaryKeyMapping, _ = queries.BindMapping(upepCodonType, upepCodonMapping, upepCodonPrimaryKeyColumns)
	upepCodonInsertCacheMut       sync.RWMutex
	upepCodonInsertCache          = make(map[string]insertCache)
	upepCodonUpdateCacheMut       sync.RWMutex
	upepCodonUpdateCache          = make(map[string]updateCache)
	upepCodonUpsertCacheMut       sync.RWMutex
	upepCodonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var upepCodonBeforeInsertHooks []UpepCodonHook
var upepCodonBeforeUpdateHooks []UpepCodonHook
var upepCodonBeforeDeleteHooks []UpepCodonHook
var upepCodonBeforeUpsertHooks []UpepCodonHook

var upepCodonAfterInsertHooks []UpepCodonHook
var upepCodonAfterSelectHooks []UpepCodonHook
var upepCodonAfterUpdateHooks []UpepCodonHook
var upepCodonAfterDeleteHooks []UpepCodonHook
var upepCodonAfterUpsertHooks []UpepCodonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UpepCodon) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepCodonBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UpepCodon) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepCodonBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UpepCodon) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepCodonBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UpepCodon) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepCodonBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UpepCodon) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepCodonAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UpepCodon) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range upepCodonAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UpepCodon) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range upepCodonAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UpepCodon) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range upepCodonAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UpepCodon) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range upepCodonAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUpepCodonHook registers your hook function for all future operations.
func AddUpepCodonHook(hookPoint boil.HookPoint, upepCodonHook UpepCodonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		upepCodonBeforeInsertHooks = append(upepCodonBeforeInsertHooks, upepCodonHook)
	case boil.BeforeUpdateHook:
		upepCodonBeforeUpdateHooks = append(upepCodonBeforeUpdateHooks, upepCodonHook)
	case boil.BeforeDeleteHook:
		upepCodonBeforeDeleteHooks = append(upepCodonBeforeDeleteHooks, upepCodonHook)
	case boil.BeforeUpsertHook:
		upepCodonBeforeUpsertHooks = append(upepCodonBeforeUpsertHooks, upepCodonHook)
	case boil.AfterInsertHook:
		upepCodonAfterInsertHooks = append(upepCodonAfterInsertHooks, upepCodonHook)
	case boil.AfterSelectHook:
		upepCodonAfterSelectHooks = append(upepCodonAfterSelectHooks, upepCodonHook)
	case boil.AfterUpdateHook:
		upepCodonAfterUpdateHooks = append(upepCodonAfterUpdateHooks, upepCodonHook)
	case boil.AfterDeleteHook:
		upepCodonAfterDeleteHooks = append(upepCodonAfterDeleteHooks, upepCodonHook)
	case boil.AfterUpsertHook:
		upepCodonAfterUpsertHooks = append(upepCodonAfterUpsertHooks, upepCodonHook)
	}
}

// OneP returns a single upepCodon record from the query, and panics on error.
func (q upepCodonQuery) OneP() *UpepCodon {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single upepCodon record from the query.
func (q upepCodonQuery) One() (*UpepCodon, error) {
	o := &UpepCodon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upep_codon")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UpepCodon records from the query, and panics on error.
func (q upepCodonQuery) AllP() UpepCodonSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UpepCodon records from the query.
func (q upepCodonQuery) All() (UpepCodonSlice, error) {
	var o []*UpepCodon

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UpepCodon slice")
	}

	if len(upepCodonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UpepCodon records in the query, and panics on error.
func (q upepCodonQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UpepCodon records in the query.
func (q upepCodonQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upep_codon rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q upepCodonQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q upepCodonQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upep_codon exists")
	}

	return count > 0, nil
}

// StartingCodonUpepBlastDBSG retrieves all the upep_blast_db's upep blast db via starting_codon_id column.
func (o *UpepCodon) StartingCodonUpepBlastDBSG(mods ...qm.QueryMod) upepBlastDBQuery {
	return o.StartingCodonUpepBlastDBS(boil.GetDB(), mods...)
}

// StartingCodonUpepBlastDBS retrieves all the upep_blast_db's upep blast db with an executor via starting_codon_id column.
func (o *UpepCodon) StartingCodonUpepBlastDBS(exec boil.Executor, mods ...qm.QueryMod) upepBlastDBQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upep\".\"upep_blast_db\".\"starting_codon_id\"=?", o.ID),
	)

	query := UpepBlastDBS(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_blast_db\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"upep\".\"upep_blast_db\".*"})
	}

	return query
}

// EndingCodonUpepBlastDBSG retrieves all the upep_blast_db's upep blast db via ending_codon_id column.
func (o *UpepCodon) EndingCodonUpepBlastDBSG(mods ...qm.QueryMod) upepBlastDBQuery {
	return o.EndingCodonUpepBlastDBS(boil.GetDB(), mods...)
}

// EndingCodonUpepBlastDBS retrieves all the upep_blast_db's upep blast db with an executor via ending_codon_id column.
func (o *UpepCodon) EndingCodonUpepBlastDBS(exec boil.Executor, mods ...qm.QueryMod) upepBlastDBQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upep\".\"upep_blast_db\".\"ending_codon_id\"=?", o.ID),
	)

	query := UpepBlastDBS(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_blast_db\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"upep\".\"upep_blast_db\".*"})
	}

	return query
}

// StartingCodonUpepSorfPositionsG retrieves all the upep_sorf_position's upep sorf positions via starting_codon_id column.
func (o *UpepCodon) StartingCodonUpepSorfPositionsG(mods ...qm.QueryMod) upepSorfPositionQuery {
	return o.StartingCodonUpepSorfPositions(boil.GetDB(), mods...)
}

// StartingCodonUpepSorfPositions retrieves all the upep_sorf_position's upep sorf positions with an executor via starting_codon_id column.
func (o *UpepCodon) StartingCodonUpepSorfPositions(exec boil.Executor, mods ...qm.QueryMod) upepSorfPositionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upep\".\"upep_sorf_positions\".\"starting_codon_id\"=?", o.ID),
	)

	query := UpepSorfPositions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_sorf_positions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"upep\".\"upep_sorf_positions\".*"})
	}

	return query
}

// EndingCodonUpepSorfPositionsG retrieves all the upep_sorf_position's upep sorf positions via ending_codon_id column.
func (o *UpepCodon) EndingCodonUpepSorfPositionsG(mods ...qm.QueryMod) upepSorfPositionQuery {
	return o.EndingCodonUpepSorfPositions(boil.GetDB(), mods...)
}

// EndingCodonUpepSorfPositions retrieves all the upep_sorf_position's upep sorf positions with an executor via ending_codon_id column.
func (o *UpepCodon) EndingCodonUpepSorfPositions(exec boil.Executor, mods ...qm.QueryMod) upepSorfPositionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"upep\".\"upep_sorf_positions\".\"ending_codon_id\"=?", o.ID),
	)

	query := UpepSorfPositions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upep\".\"upep_sorf_positions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"upep\".\"upep_sorf_positions\".*"})
	}

	return query
}

// LoadStartingCodonUpepBlastDBS allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepCodonL) LoadStartingCodonUpepBlastDBS(e boil.Executor, singular bool, maybeUpepCodon interface{}) error {
	var slice []*UpepCodon
	var object *UpepCodon

	count := 1
	if singular {
		object = maybeUpepCodon.(*UpepCodon)
	} else {
		slice = *maybeUpepCodon.(*[]*UpepCodon)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepCodonR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepCodonR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_blast_db\" where \"starting_codon_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upep_blast_db")
	}
	defer results.Close()

	var resultSlice []*UpepBlastDB
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upep_blast_db")
	}

	if len(upepBlastDBAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StartingCodonUpepBlastDBS = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StartingCodonID {
				local.R.StartingCodonUpepBlastDBS = append(local.R.StartingCodonUpepBlastDBS, foreign)
				break
			}
		}
	}

	return nil
}

// LoadEndingCodonUpepBlastDBS allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepCodonL) LoadEndingCodonUpepBlastDBS(e boil.Executor, singular bool, maybeUpepCodon interface{}) error {
	var slice []*UpepCodon
	var object *UpepCodon

	count := 1
	if singular {
		object = maybeUpepCodon.(*UpepCodon)
	} else {
		slice = *maybeUpepCodon.(*[]*UpepCodon)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepCodonR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepCodonR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_blast_db\" where \"ending_codon_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upep_blast_db")
	}
	defer results.Close()

	var resultSlice []*UpepBlastDB
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upep_blast_db")
	}

	if len(upepBlastDBAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EndingCodonUpepBlastDBS = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EndingCodonID {
				local.R.EndingCodonUpepBlastDBS = append(local.R.EndingCodonUpepBlastDBS, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStartingCodonUpepSorfPositions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepCodonL) LoadStartingCodonUpepSorfPositions(e boil.Executor, singular bool, maybeUpepCodon interface{}) error {
	var slice []*UpepCodon
	var object *UpepCodon

	count := 1
	if singular {
		object = maybeUpepCodon.(*UpepCodon)
	} else {
		slice = *maybeUpepCodon.(*[]*UpepCodon)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepCodonR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepCodonR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_sorf_positions\" where \"starting_codon_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upep_sorf_positions")
	}
	defer results.Close()

	var resultSlice []*UpepSorfPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upep_sorf_positions")
	}

	if len(upepSorfPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StartingCodonUpepSorfPositions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StartingCodonID {
				local.R.StartingCodonUpepSorfPositions = append(local.R.StartingCodonUpepSorfPositions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadEndingCodonUpepSorfPositions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (upepCodonL) LoadEndingCodonUpepSorfPositions(e boil.Executor, singular bool, maybeUpepCodon interface{}) error {
	var slice []*UpepCodon
	var object *UpepCodon

	count := 1
	if singular {
		object = maybeUpepCodon.(*UpepCodon)
	} else {
		slice = *maybeUpepCodon.(*[]*UpepCodon)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &upepCodonR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &upepCodonR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upep\".\"upep_sorf_positions\" where \"ending_codon_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upep_sorf_positions")
	}
	defer results.Close()

	var resultSlice []*UpepSorfPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upep_sorf_positions")
	}

	if len(upepSorfPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EndingCodonUpepSorfPositions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EndingCodonID {
				local.R.EndingCodonUpepSorfPositions = append(local.R.EndingCodonUpepSorfPositions, foreign)
				break
			}
		}
	}

	return nil
}

// AddStartingCodonUpepBlastDBSG adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.StartingCodonUpepBlastDBS.
// Sets related.R.StartingCodon appropriately.
// Uses the global database handle.
func (o *UpepCodon) AddStartingCodonUpepBlastDBSG(insert bool, related ...*UpepBlastDB) error {
	return o.AddStartingCodonUpepBlastDBS(boil.GetDB(), insert, related...)
}

// AddStartingCodonUpepBlastDBSP adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.StartingCodonUpepBlastDBS.
// Sets related.R.StartingCodon appropriately.
// Panics on error.
func (o *UpepCodon) AddStartingCodonUpepBlastDBSP(exec boil.Executor, insert bool, related ...*UpepBlastDB) {
	if err := o.AddStartingCodonUpepBlastDBS(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStartingCodonUpepBlastDBSGP adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.StartingCodonUpepBlastDBS.
// Sets related.R.StartingCodon appropriately.
// Uses the global database handle and panics on error.
func (o *UpepCodon) AddStartingCodonUpepBlastDBSGP(insert bool, related ...*UpepBlastDB) {
	if err := o.AddStartingCodonUpepBlastDBS(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStartingCodonUpepBlastDBS adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.StartingCodonUpepBlastDBS.
// Sets related.R.StartingCodon appropriately.
func (o *UpepCodon) AddStartingCodonUpepBlastDBS(exec boil.Executor, insert bool, related ...*UpepBlastDB) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StartingCodonID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upep\".\"upep_blast_db\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"starting_codon_id"}),
				strmangle.WhereClause("\"", "\"", 2, upepBlastDBPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StartingCodonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &upepCodonR{
			StartingCodonUpepBlastDBS: related,
		}
	} else {
		o.R.StartingCodonUpepBlastDBS = append(o.R.StartingCodonUpepBlastDBS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &upepBlastDBR{
				StartingCodon: o,
			}
		} else {
			rel.R.StartingCodon = o
		}
	}
	return nil
}

// AddEndingCodonUpepBlastDBSG adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.EndingCodonUpepBlastDBS.
// Sets related.R.EndingCodon appropriately.
// Uses the global database handle.
func (o *UpepCodon) AddEndingCodonUpepBlastDBSG(insert bool, related ...*UpepBlastDB) error {
	return o.AddEndingCodonUpepBlastDBS(boil.GetDB(), insert, related...)
}

// AddEndingCodonUpepBlastDBSP adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.EndingCodonUpepBlastDBS.
// Sets related.R.EndingCodon appropriately.
// Panics on error.
func (o *UpepCodon) AddEndingCodonUpepBlastDBSP(exec boil.Executor, insert bool, related ...*UpepBlastDB) {
	if err := o.AddEndingCodonUpepBlastDBS(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEndingCodonUpepBlastDBSGP adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.EndingCodonUpepBlastDBS.
// Sets related.R.EndingCodon appropriately.
// Uses the global database handle and panics on error.
func (o *UpepCodon) AddEndingCodonUpepBlastDBSGP(insert bool, related ...*UpepBlastDB) {
	if err := o.AddEndingCodonUpepBlastDBS(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEndingCodonUpepBlastDBS adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.EndingCodonUpepBlastDBS.
// Sets related.R.EndingCodon appropriately.
func (o *UpepCodon) AddEndingCodonUpepBlastDBS(exec boil.Executor, insert bool, related ...*UpepBlastDB) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EndingCodonID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upep\".\"upep_blast_db\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ending_codon_id"}),
				strmangle.WhereClause("\"", "\"", 2, upepBlastDBPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EndingCodonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &upepCodonR{
			EndingCodonUpepBlastDBS: related,
		}
	} else {
		o.R.EndingCodonUpepBlastDBS = append(o.R.EndingCodonUpepBlastDBS, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &upepBlastDBR{
				EndingCodon: o,
			}
		} else {
			rel.R.EndingCodon = o
		}
	}
	return nil
}

// AddStartingCodonUpepSorfPositionsG adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.StartingCodonUpepSorfPositions.
// Sets related.R.StartingCodon appropriately.
// Uses the global database handle.
func (o *UpepCodon) AddStartingCodonUpepSorfPositionsG(insert bool, related ...*UpepSorfPosition) error {
	return o.AddStartingCodonUpepSorfPositions(boil.GetDB(), insert, related...)
}

// AddStartingCodonUpepSorfPositionsP adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.StartingCodonUpepSorfPositions.
// Sets related.R.StartingCodon appropriately.
// Panics on error.
func (o *UpepCodon) AddStartingCodonUpepSorfPositionsP(exec boil.Executor, insert bool, related ...*UpepSorfPosition) {
	if err := o.AddStartingCodonUpepSorfPositions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStartingCodonUpepSorfPositionsGP adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.StartingCodonUpepSorfPositions.
// Sets related.R.StartingCodon appropriately.
// Uses the global database handle and panics on error.
func (o *UpepCodon) AddStartingCodonUpepSorfPositionsGP(insert bool, related ...*UpepSorfPosition) {
	if err := o.AddStartingCodonUpepSorfPositions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddStartingCodonUpepSorfPositions adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.StartingCodonUpepSorfPositions.
// Sets related.R.StartingCodon appropriately.
func (o *UpepCodon) AddStartingCodonUpepSorfPositions(exec boil.Executor, insert bool, related ...*UpepSorfPosition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StartingCodonID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upep\".\"upep_sorf_positions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"starting_codon_id"}),
				strmangle.WhereClause("\"", "\"", 2, upepSorfPositionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StartingCodonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &upepCodonR{
			StartingCodonUpepSorfPositions: related,
		}
	} else {
		o.R.StartingCodonUpepSorfPositions = append(o.R.StartingCodonUpepSorfPositions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &upepSorfPositionR{
				StartingCodon: o,
			}
		} else {
			rel.R.StartingCodon = o
		}
	}
	return nil
}

// AddEndingCodonUpepSorfPositionsG adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.EndingCodonUpepSorfPositions.
// Sets related.R.EndingCodon appropriately.
// Uses the global database handle.
func (o *UpepCodon) AddEndingCodonUpepSorfPositionsG(insert bool, related ...*UpepSorfPosition) error {
	return o.AddEndingCodonUpepSorfPositions(boil.GetDB(), insert, related...)
}

// AddEndingCodonUpepSorfPositionsP adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.EndingCodonUpepSorfPositions.
// Sets related.R.EndingCodon appropriately.
// Panics on error.
func (o *UpepCodon) AddEndingCodonUpepSorfPositionsP(exec boil.Executor, insert bool, related ...*UpepSorfPosition) {
	if err := o.AddEndingCodonUpepSorfPositions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEndingCodonUpepSorfPositionsGP adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.EndingCodonUpepSorfPositions.
// Sets related.R.EndingCodon appropriately.
// Uses the global database handle and panics on error.
func (o *UpepCodon) AddEndingCodonUpepSorfPositionsGP(insert bool, related ...*UpepSorfPosition) {
	if err := o.AddEndingCodonUpepSorfPositions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEndingCodonUpepSorfPositions adds the given related objects to the existing relationships
// of the upep_codon, optionally inserting them as new records.
// Appends related to o.R.EndingCodonUpepSorfPositions.
// Sets related.R.EndingCodon appropriately.
func (o *UpepCodon) AddEndingCodonUpepSorfPositions(exec boil.Executor, insert bool, related ...*UpepSorfPosition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EndingCodonID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upep\".\"upep_sorf_positions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ending_codon_id"}),
				strmangle.WhereClause("\"", "\"", 2, upepSorfPositionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EndingCodonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &upepCodonR{
			EndingCodonUpepSorfPositions: related,
		}
	} else {
		o.R.EndingCodonUpepSorfPositions = append(o.R.EndingCodonUpepSorfPositions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &upepSorfPositionR{
				EndingCodon: o,
			}
		} else {
			rel.R.EndingCodon = o
		}
	}
	return nil
}

// UpepCodonsG retrieves all records.
func UpepCodonsG(mods ...qm.QueryMod) upepCodonQuery {
	return UpepCodons(boil.GetDB(), mods...)
}

// UpepCodons retrieves all the records using an executor.
func UpepCodons(exec boil.Executor, mods ...qm.QueryMod) upepCodonQuery {
	mods = append(mods, qm.From("\"upep\".\"upep_codon\""))
	return upepCodonQuery{NewQuery(exec, mods...)}
}

// FindUpepCodonG retrieves a single record by ID.
func FindUpepCodonG(id int64, selectCols ...string) (*UpepCodon, error) {
	return FindUpepCodon(boil.GetDB(), id, selectCols...)
}

// FindUpepCodonGP retrieves a single record by ID, and panics on error.
func FindUpepCodonGP(id int64, selectCols ...string) *UpepCodon {
	retobj, err := FindUpepCodon(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUpepCodon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpepCodon(exec boil.Executor, id int64, selectCols ...string) (*UpepCodon, error) {
	upepCodonObj := &UpepCodon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upep\".\"upep_codon\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(upepCodonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upep_codon")
	}

	return upepCodonObj, nil
}

// FindUpepCodonP retrieves a single record by ID with an executor, and panics on error.
func FindUpepCodonP(exec boil.Executor, id int64, selectCols ...string) *UpepCodon {
	retobj, err := FindUpepCodon(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UpepCodon) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UpepCodon) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UpepCodon) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UpepCodon) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_codon provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepCodonColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	upepCodonInsertCacheMut.RLock()
	cache, cached := upepCodonInsertCache[key]
	upepCodonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			upepCodonColumns,
			upepCodonColumnsWithDefault,
			upepCodonColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(upepCodonType, upepCodonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(upepCodonType, upepCodonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upep\".\"upep_codon\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upep\".\"upep_codon\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upep_codon")
	}

	if !cached {
		upepCodonInsertCacheMut.Lock()
		upepCodonInsertCache[key] = cache
		upepCodonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UpepCodon record. See Update for
// whitelist behavior description.
func (o *UpepCodon) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UpepCodon record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UpepCodon) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UpepCodon, and panics on error.
// See Update for whitelist behavior description.
func (o *UpepCodon) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UpepCodon.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UpepCodon) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	upepCodonUpdateCacheMut.RLock()
	cache, cached := upepCodonUpdateCache[key]
	upepCodonUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			upepCodonColumns,
			upepCodonPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update upep_codon, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upep\".\"upep_codon\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, upepCodonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(upepCodonType, upepCodonMapping, append(wl, upepCodonPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update upep_codon row")
	}

	if !cached {
		upepCodonUpdateCacheMut.Lock()
		upepCodonUpdateCache[key] = cache
		upepCodonUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q upepCodonQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q upepCodonQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for upep_codon")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UpepCodonSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UpepCodonSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UpepCodonSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpepCodonSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepCodonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upep\".\"upep_codon\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, upepCodonPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in upepCodon slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UpepCodon) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UpepCodon) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UpepCodon) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UpepCodon) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no upep_codon provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upepCodonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	upepCodonUpsertCacheMut.RLock()
	cache, cached := upepCodonUpsertCache[key]
	upepCodonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			upepCodonColumns,
			upepCodonColumnsWithDefault,
			upepCodonColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			upepCodonColumns,
			upepCodonPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert upep_codon, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(upepCodonPrimaryKeyColumns))
			copy(conflict, upepCodonPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"upep\".\"upep_codon\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(upepCodonType, upepCodonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(upepCodonType, upepCodonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upep_codon")
	}

	if !cached {
		upepCodonUpsertCacheMut.Lock()
		upepCodonUpsertCache[key] = cache
		upepCodonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UpepCodon record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepCodon) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UpepCodon record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UpepCodon) DeleteG() error {
	if o == nil {
		return errors.New("models: no UpepCodon provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UpepCodon record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UpepCodon) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UpepCodon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UpepCodon) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepCodon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), upepCodonPrimaryKeyMapping)
	sql := "DELETE FROM \"upep\".\"upep_codon\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from upep_codon")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q upepCodonQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q upepCodonQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no upepCodonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upep_codon")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UpepCodonSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UpepCodonSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UpepCodon slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UpepCodonSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpepCodonSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UpepCodon slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(upepCodonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepCodonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upep\".\"upep_codon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepCodonPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from upepCodon slice")
	}

	if len(upepCodonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UpepCodon) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UpepCodon) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UpepCodon) ReloadG() error {
	if o == nil {
		return errors.New("models: no UpepCodon provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UpepCodon) Reload(exec boil.Executor) error {
	ret, err := FindUpepCodon(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepCodonSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UpepCodonSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepCodonSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UpepCodonSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpepCodonSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	upepCodons := UpepCodonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upepCodonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upep\".\"upep_codon\".* FROM \"upep\".\"upep_codon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upepCodonPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&upepCodons)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UpepCodonSlice")
	}

	*o = upepCodons

	return nil
}

// UpepCodonExists checks if the UpepCodon row exists.
func UpepCodonExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upep\".\"upep_codon\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upep_codon exists")
	}

	return exists, nil
}

// UpepCodonExistsG checks if the UpepCodon row exists.
func UpepCodonExistsG(id int64) (bool, error) {
	return UpepCodonExists(boil.GetDB(), id)
}

// UpepCodonExistsGP checks if the UpepCodon row exists. Panics on error.
func UpepCodonExistsGP(id int64) bool {
	e, err := UpepCodonExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UpepCodonExistsP checks if the UpepCodon row exists. Panics on error.
func UpepCodonExistsP(exec boil.Executor, id int64) bool {
	e, err := UpepCodonExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
